<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FanXing28</title>
  
  
  <link href="https://fanxing28.github.io/atom.xml" rel="self"/>
  
  <link href="https://fanxing28.github.io/"/>
  <updated>2023-12-22T03:17:52.327Z</updated>
  <id>https://fanxing28.github.io/</id>
  
  <author>
    <name>繁星ツ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/RequestData/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/RequestData/README/</id>
    <published>2023-12-22T03:16:12.083Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>CSS</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;&lt;p&gt;CSS&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="RequestData" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/RequestData/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E6%95%B0%E6%8D%AE%E5%BA%93/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E6%95%B0%E6%8D%AE%E5%BA%93/README/</id>
    <published>2023-12-22T03:15:38.991Z</published>
    <updated>2023-12-22T03:17:52.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据库</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h1&gt;&lt;p&gt;数据库&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据库" scheme="https://fanxing28.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/Vue/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/Vue/README/</id>
    <published>2023-12-22T03:15:26.803Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>Vue</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;&lt;p&gt;Vue&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/Uniapp/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/Uniapp/README/</id>
    <published>2023-12-22T03:15:17.646Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>Uniapp</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;&lt;p&gt;Uniapp&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Uniapp" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Uniapp/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/TypeScript/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/TypeScript/README/</id>
    <published>2023-12-22T03:15:09.327Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>TypeScript</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;&lt;p&gt;TypeScript&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/JavaScript/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/JavaScript/README/</id>
    <published>2023-12-22T03:14:51.194Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>JavaScript</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;&lt;p&gt;JavaScript&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/CSS/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/CSS/README/</id>
    <published>2023-12-22T03:14:40.365Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>CSS</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;&lt;p&gt;CSS&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%89%8D%E7%AB%AF/README/</id>
    <published>2023-12-22T03:14:34.707Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/SVG/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/SVG/README/</id>
    <published>2023-12-22T03:14:24.661Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>SVG</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt;SVG&lt;/p&gt;
</summary>
      
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="SVG" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/SVG/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/Obsidian/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/Obsidian/README/</id>
    <published>2023-12-22T03:14:17.168Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Obsidian</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt;Obsidian&lt;/p&gt;
</summary>
      
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Obsidian" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/Obsidian/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/MarkDown/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/MarkDown/README/</id>
    <published>2023-12-22T03:14:01.541Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>MarkDown</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt;MarkDown&lt;/p&gt;
</summary>
      
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="MarkDown" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/MarkDown/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/Hexo/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/Hexo/README/</id>
    <published>2023-12-22T03:13:53.480Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Hexo</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt;Hexo&lt;/p&gt;
</summary>
      
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Hexo" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/Git/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/Git/README/</id>
    <published>2023-12-22T03:13:46.563Z</published>
    <updated>2023-12-22T03:17:52.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Git</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt;Git&lt;/p&gt;
</summary>
      
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Git" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/Git/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%85%B6%E4%BB%96/README/</id>
    <published>2023-12-22T03:13:41.825Z</published>
    <updated>2023-12-22T03:17:52.306Z</updated>
    
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%90%8E%E7%AB%AF/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%90%8E%E7%AB%AF/README/</id>
    <published>2023-12-22T03:13:30.872Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    
    
    
    <category term="后端" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2023/12/22/%E5%B7%A5%E5%85%B7/README/"/>
    <id>https://fanxing28.github.io/2023/12/22/%E5%B7%A5%E5%85%B7/README/</id>
    <published>2023-12-22T03:13:21.497Z</published>
    <updated>2023-12-22T03:17:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>工具</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h1&gt;&lt;p&gt;工具&lt;/p&gt;
</summary>
      
    
    
    
    <category term="工具" scheme="https://fanxing28.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP 常用方法</title>
    <link href="https://fanxing28.github.io/2023/12/17/%E5%90%8E%E7%AB%AF/PHP/PHP%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://fanxing28.github.io/2023/12/17/%E5%90%8E%E7%AB%AF/PHP/PHP%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2023-12-17T07:34:00.000Z</published>
    <updated>2023-12-17T07:35:03.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见处理函数-方法"><a href="#常见处理函数-方法" class="headerlink" title="常见处理函数(方法)"></a>常见处理函数(方法)</h1><ol><li>字符串处理函数：<ul><li><code>strlen()</code>：获取字符串的长度</li><li><code>strtolower()</code>：将字符串转换为小写</li><li><code>strtoupper()</code>：将字符串转换为大写</li><li><code>substr()</code>：提取字符串的一部分</li><li><code>str_replace()</code>：替换字符串中的指定内容</li><li><code>trim()</code>：删除字符串首尾的空白字符</li></ul></li><li>数组处理函数：<ul><li><code>count()</code>：获取数组元素个数</li><li><code>array_push()</code>：将一个或多个元素添加到数组末尾</li><li><code>array_pop()</code>：从数组末尾删除并返回一个元素</li><li><code>array_merge()</code>：合并一个或多个数组</li><li><code>array_search()</code>：在数组中搜索指定的值，并返回其键名</li></ul></li><li>文件操作函数：<ul><li><code>file_get_contents()</code>：将整个文件读取到一个字符串中</li><li><code>file_put_contents()</code>：将一个字符串写入文件</li><li><code>fopen()</code>：打开文件或 URL</li><li><code>fwrite()</code>：向文件写入数据</li><li><code>fclose()</code>：关闭打开的文件</li></ul></li><li>数据库相关函数：<ul><li><code>mysqli_connect()</code>：连接到 MySQL 数据库</li><li><code>mysqli_query()</code>：执行数据库查询</li><li><code>mysqli_fetch_assoc()</code>：从结果集中获取一行作为关联数组</li><li><code>mysqli_insert_id()</code>：获取最后插入行的 ID</li><li><code>mysqli_close()</code>：关闭与数据库的连接</li></ul></li></ol><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-数组排序相关的方法"><a href="#1-数组排序相关的方法" class="headerlink" title="(1) 数组排序相关的方法"></a>(1) 数组排序相关的方法</h2><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">sort()</td><td align="left">对数组进行升序排序</td></tr><tr><td align="left">rsort()</td><td align="left">对数组进行降序排序</td></tr><tr><td align="left">asort()</td><td align="left">根据值对数组进行升序排序，并保持键值关联</td></tr><tr><td align="left">arsort()</td><td align="left">根据值对数组进行降序排序，并保持键值关联</td></tr><tr><td align="left">ksort()</td><td align="left">根据键名对数组进行升序排序</td></tr><tr><td align="left">krsort()</td><td align="left">根据键名对数组进行降序排序</td></tr></tbody></table><ol><li><code>sort()</code>：对数组进行升序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 )</span></span><br></pre></td></tr></table></figure></li><li><code>rsort()</code>：对数组进行降序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="title function_ invoke__">rsort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [0] =&gt; 5 [1] =&gt; 4 [2] =&gt; 3 [3] =&gt; 2 [4] =&gt; 1 )</span></span><br></pre></td></tr></table></figure></li><li><code>asort()</code>：根据值对数组进行升序排序，并保持键值关联<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">asort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [a] =&gt; 1 [c] =&gt; 2 [b] =&gt; 3 )</span></span><br></pre></td></tr></table></figure></li><li><code>arsort()</code>：根据值对数组进行降序排序，并保持键值关联<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">arsort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [b] =&gt; 3 [c] =&gt; 2 [a] =&gt; 1 )</span></span><br></pre></td></tr></table></figure></li><li><code>ksort()</code>：根据键名对数组进行升序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">ksort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [a] =&gt; 1 [b] =&gt; 3 [c] =&gt; 2 )</span></span><br></pre></td></tr></table></figure></li><li><code>krsort()</code> ：根据键名对数组进行降序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">krsort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [c] =&gt; 2 [b] =&gt; 3 [a] =&gt; 1 )</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">PHP 开发常用的方法总结</summary>
    
    
    
    <category term="后端" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="PHP" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/PHP/"/>
    
    
    <category term="后端" scheme="https://fanxing28.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="PHP" scheme="https://fanxing28.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>JS 面向对象和构造函数</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2023-12-14T14:48:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-面向对象和面向过程"><a href="#一-面向对象和面向过程" class="headerlink" title="一. 面向对象和面向过程"></a>一. 面向对象和面向过程</h2><h3 id="1-面向过程的基本概念"><a href="#1-面向过程的基本概念" class="headerlink" title="(1) 面向过程的基本概念"></a>(1) 面向过程的基本概念</h3><p>面向过程(Procedure Oriented)是一种<strong>以过程为中心</strong>的编程思想。<br><strong>面向过程</strong>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。是一种思考问题的基础方法。</p><blockquote><p><strong>简单理解</strong>：面向过程就是任何事情都亲力亲为，很机械，像个步兵。</p></blockquote><h3 id="2-面向对象的基本概念"><a href="#2-面向对象的基本概念" class="headerlink" title="(2) 面向对象的基本概念"></a>(2) 面向对象的基本概念</h3><p>面向对象(Object Oriented)是软件开发方法中的一种；是一种对现实世界理解和抽象的方法；是思考问题相对高级的方法。<br><strong>面向对象是把构成问题事务分解成各个对象</strong>，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。</p><blockquote><p><strong>简单理解</strong>：面向对象就像战场上的指挥官，指挥战斗而不必知道具体执行的过程。</p></blockquote><p><strong>注</strong>：面向对象：对象来自于类，必须先有类在有对象，类在js中也叫构造函数。<br><strong>面向对象和面向过程的联系</strong>：面向对象就是面向过程的封装。</p><h2 id="二-面向对象和面向过程的区别"><a href="#二-面向对象和面向过程的区别" class="headerlink" title="二. 面向对象和面向过程的区别"></a>二. 面向对象和面向过程的区别</h2><ol><li>面向对象是相对面向过程而言的，面向对象包含了面向过程的思想。</li><li>面向过程就是分析出解决问题所需要的步骤，关注的是解决问题需要那些步骤。</li><li>面向对象是把构成问题事务分解成各个对象，关注的是解决问题需要那些对象。</li></ol><h2 id="三-构造函数的推导"><a href="#三-构造函数的推导" class="headerlink" title="三. 构造函数的推导"></a>三. 构造函数的推导</h2><p><strong>推导过程</strong>:star2:：面向对象 &#x3D;&gt; 对象 &#x3D;&gt; 创建对象 &#x3D;&gt; 代码冗余 &#x3D;&gt; 工厂函数 &#x3D;&gt; 识别问题 &#x3D;&gt; 以系统对象为参考 &#x3D;&gt; 推导出构造函数<br><strong>详细的推导过程</strong>：</p><ol><li>首先，创建一个对象，添加属性和方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj1.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">obj1.<span class="title function_">showinfo</span>() <span class="comment">// 我的名字叫zs,我今年18岁</span></span><br></pre></td></tr></table></figure>提到创建一个对象，是不是想问，可不可以创建多个对象&#x3D;&gt;可以，最原始的方法：重复创建。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj1.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">obj2.<span class="property">age</span> = <span class="number">17</span>;</span><br><span class="line">obj2.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj3.<span class="property">name</span> = <span class="string">&#x27;wangwu&#x27;</span>;</span><br><span class="line">obj3.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line">obj3.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>显然上述创建多个对象的方式非常的麻烦，而且造成了代码的冗余，此时有什么办法可以解决呢:question: &#x3D;&gt; <strong>函数封装</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age</span>) &#123; </span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name</span><br><span class="line">    obj.<span class="property">age</span> = age;</span><br><span class="line">    obj.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="title function_">createPerson</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>); <span class="comment">// zs</span></span><br><span class="line">obj1.<span class="title function_">showinfo</span>(); <span class="comment">// 我的名字叫zs,我今年18岁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title function_">createPerson</span>(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">17</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>); <span class="comment">// lisi</span></span><br><span class="line">obj2.<span class="title function_">showinfo</span>(); <span class="comment">// 我的名字叫lisi,我今年17岁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="title function_">createPerson</span>(<span class="string">&#x27;wangwu&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3.<span class="property">name</span>); <span class="comment">// wangwu</span></span><br><span class="line">obj3.<span class="title function_">showinfo</span>(); <span class="comment">// 我的名字叫wangwu,我今年19岁</span></span><br></pre></td></tr></table></figure><strong>注</strong>：封装完成，可以解决创建多个对象代码冗余问题，而且将这一函数称之为<strong>工厂函数</strong>。</li><li>此时，使用函数封装确实可以解决创建多个对象代码冗余问题，但是工厂函数无法解决识别问题。无法像Array，Date一样虽然属于对象，拥有自己独立的名称。<blockquote><p>因为创建的对象都是基于new Object()完成的，通过工厂函数看得见的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age</span>) &#123; <span class="comment">// 工厂函数</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name</span><br><span class="line">    obj.<span class="property">age</span> = age;</span><br><span class="line">    obj.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>继续<strong>以系统对象为参考</strong>，于是在调用函数的前面<strong>添加new关键字</strong>，得到最终构造函数。<br> <strong>构造函数</strong>：new关键字调用，首字母大写，根据前面的概念，构造函数就是类，同时也知道系统的类是如何产生的。<br> 以 new 操作符调用函数的时候，函数内部发生以下变化：<br>1.创建一个空对象，并且this变量引用该对象，同时还继承了该函数的原型。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CreatePerson</span>(<span class="params">name, age</span>) &#123; <span class="comment">// 构造函数，构造函数里面的this指向实例对象，createPerson:类(构造函数)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age; <span class="comment">// 属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">CreatePerson</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>); <span class="comment">// obj1:实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>);</span><br><span class="line">obj1.<span class="title function_">showinfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">CreatePerson</span>(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">17</span>); <span class="comment">// obj2:实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>);</span><br><span class="line">obj2.<span class="title function_">showinfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="keyword">new</span> <span class="title class_">CreatePerson</span>(<span class="string">&#x27;wangwu&#x27;</span>, <span class="number">19</span>); <span class="comment">// obj3:实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3.<span class="property">name</span>);</span><br><span class="line">obj3.<span class="title function_">showinfo</span>();</span><br></pre></td></tr></table></figure><strong>注</strong>：构造函数里面不要书写return<blockquote><p>因为构造函数里没有显式调用return，默认返回的是this对象，也就是新创建的实例对象。</p></blockquote></li></ol><p>2.属性和方法被加入到this引用的对象中。<br>3.并且最后隐式的返回this。</p><h2 id="四-构造函数"><a href="#四-构造函数" class="headerlink" title="四. 构造函数"></a>四. 构造函数</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>构造函数其实就是一个函数，只不过使用的时候需要和new 关键字连用，首字母大写。</p><blockquote><p>和普通函数一样， 只不过调用的时候要和 new 调用 ，不然就是一个普通函数调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// 块作用域，外面无法获取，内部使用</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>; <span class="comment">// 局部变量，外面无法获取，内部使用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age; <span class="comment">// 属性，实例对象可以自由获取，this-&gt;实例对象 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f1 = <span class="keyword">new</span> <span class="title function_">fn</span>(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">let</span> f2 = <span class="keyword">new</span> fn; <span class="comment">// 这种写法也支持，弊端是无法传递参数</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>： 不写 new 的时候就是普通函数调用，没有创造对象的能力，但如果只是首字母不大写，只要和 new 连用，就有创造对象的能力。</p><h3 id="2-构造函数特点总结"><a href="#2-构造函数特点总结" class="headerlink" title="(2) 构造函数特点总结"></a>(2) 构造函数特点总结</h3><ol><li>首字母大写(推荐)<blockquote><p>方便区分</p></blockquote></li><li>构造函数里面不要书写return<br> 构造函数里没有显式调用return，默认返回的是this对象，也就是新创建的实例对象。<blockquote><p>当构造函数里调用return时，分两种情况：</p></blockquote></li></ol><ul><li>​ return的是五种简单数据类型：String，Number，Boolean，Null，Undefined。这种情况下，忽视return值，依然返回this对象。</li><li>​ return的是Object。这种情况下，不再返回this对象，而是返回return语句的返回值。</li></ul><ol start="3"><li>构造函数的调用必须和new连用<blockquote><p>只有和new连用，才有构造函数的能力，不和new连用，就是一个普通函数</p></blockquote></li><li>构造函数的this<blockquote><p>构造函数的this指向：本次调用被自动创建的对象</p></blockquote></li></ol><ul><li>自动创建出来的对象叫做 <strong>实例对象</strong></li><li>这个创建对象的过程叫做  <strong>实例化 的过程</strong></li></ul><ol start="5"><li>箭头函数没有this , 构造函数不能使用箭头函数书写<br><strong>构造函数的弊端</strong>：构造函数的方法也是私有的<br><strong>解决弊端的方式</strong>：将构造函数的方法书写在原型上</li></ol><h3 id="3-构造函数案例-memo"><a href="#3-构造函数案例-memo" class="headerlink" title="(3) 构造函数案例:memo:"></a>(3) 构造函数案例:memo:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Drag</span>(<span class="params">selector</span>) &#123; <span class="comment">// 创建拖拽的构造函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// this -&gt; 实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">box</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector); <span class="comment">// 属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 初始化方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">box</span>.<span class="property">onmousedown</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                e = e || event;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> sx = e.<span class="property">offsetX</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> sy = e.<span class="property">offsetY</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    e = e || event;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">box</span>.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">clientX</span> - sx + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">box</span>.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">clientY</span> - sy + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let d1 = new Drag(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// d1.init();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let d1 = new Drag;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// d1.init();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Drag</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Drag</span>(<span class="string">&#x27;.box1&#x27;</span>).<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Drag</span>(<span class="string">&#x27;.box2&#x27;</span>).<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：<br>？</p>]]></content>
    
    
    <summary type="html">JS 面向对象和构造函数</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 原型与原型链以及判断数据类型方式</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%BB%A5%E5%8F%8A%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E5%BC%8F/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%BB%A5%E5%8F%8A%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E5%BC%8F/</id>
    <published>2023-12-14T14:45:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-原型（prototype）"><a href="#一-原型（prototype）" class="headerlink" title="一. 原型（prototype）"></a>一. 原型（prototype）</h2><blockquote><p>将公共的方法提取出来，都写在原型上（只用书写和创建一次）</p></blockquote><p>原型的出现是为了解决构造函数方法私有化问题。<br>在内置构造函数的原型上扩展一个新方法，所有的数组都可以使用这个方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getMin</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    min = <span class="title class_">Math</span>.<span class="title function_">min</span>(...<span class="variable language_">this</span>); <span class="comment">// this指向arr</span></span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">11</span>, <span class="number">435</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">getMin</span>()); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><strong>原型概念</strong>：</p><blockquote><p>每一个函数：天生自带一个属性 prototype（构造函数的原型也是一个对象）（叫做构造原型） 每一个对象：天生自带一个属性 <code>__proto__</code>（指向所属构造函数的原型）（叫做内置原型）</p></blockquote><p><strong>实例化对象</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><ul><li>p 是 Person的实例对象</li><li>p 的构造函数是 Person</li><li>p 的 <code>__proto__</code> 指向 Person.prototype<br><strong>JS中内置的构造函数</strong>：</li><li>Object</li><li>Array</li><li>Date</li><li>RegExp</li><li>Function<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="comment">//  任何一个数组，所属的构造函数是 Array</span></span><br><span class="line"><span class="comment">//  任何一个对象，所属的构造函数是 Object</span></span><br></pre></td></tr></table></figure><strong>用数组为例</strong>：</li><li>任何一个数组，所属的构造函数都是Array</li><li>Array原型上的方法，都是给数组使用<br><strong>一切皆对象</strong></li><li>只要是 [] 所属的构造函数就是Array</li><li>只要是 {} 所属的构造函数就是Object</li><li>只要是 function () {} 所属的构造函数就是Function<br><strong>问答？</strong></li></ul><ol><li>原型是什么 ？<blockquote><p>一个对象，我们也称为 prototype 为原型对象。</p></blockquote></li><li>原型的作用是什么 ？<blockquote><p>共享方法。</p></blockquote></li><li>为什么要使用原型对象<blockquote><p>因为构造函数方法虽然很好用，但是存在浪费内存的问题。每一次调用构造函数中的方法都会重新开辟一块新的内存存储（浪费了空间），而原型对象（prototype）可以对象共享，可以节省内存。</p></blockquote></li></ol><h2 id="二-原型链"><a href="#二-原型链" class="headerlink" title="二. 原型链"></a>二. 原型链</h2><p><strong>原型链</strong>：使用<code>__proto__</code>串联起来的链状结构<br><strong>对象的访问机制</strong>：</p><ul><li>当访问一个对象成员的时候</li><li>首先在该对象自己身上查找，如果有直接使用，停止查找</li><li>如果没有，会自动去到<code>__proto__</code>查找，如果有直接使用，停止查找</li><li>如果仍然没有，继续去到<code>__proto__</code>在上一级查找</li><li>如果没有找到，返回undefined, （指向了原型链的顶级 null，表示该属性不存在）<br><strong>官方</strong>：每个实例对象（object）都有一个私有属性（称之为 <strong>proto</strong>）指向它的构造函数的原型对象（prototype）。该原型对象也有一个自己的原型对象（<strong>proto</strong>），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  七个指向问题：(p ==&gt; Person的实例对象)</span></span><br><span class="line"><span class="comment">      寻找思路主要还是要先了解：该对象所属的构造函数是什么？</span></span><br><span class="line"><span class="comment">          （实例对象指向构造函数的原型）</span></span><br><span class="line"><span class="comment">          1.p.__pro__                     ==&gt; Person.prototype </span></span><br><span class="line"><span class="comment">          （构造函数的原型也是一个对象，所以构造函数的原型指向Object的原型）</span></span><br><span class="line"><span class="comment">          2.Person.prototype.__proto__    ==&gt; Object.prototype</span></span><br><span class="line"><span class="comment">          （构造函数是一个函数，所以构造函数指向Function的原型）</span></span><br><span class="line"><span class="comment">          3.Person.__proto__              ==&gt; Function.prototype</span></span><br><span class="line"><span class="comment">          （Function是一个函数，所以Function指向自身）</span></span><br><span class="line"><span class="comment">          4.Function.__proto__            ==&gt; Function.prototype</span></span><br><span class="line"><span class="comment">          （Object）</span></span><br><span class="line"><span class="comment">          5.Object.__proto__              ==&gt; Function.prototype</span></span><br><span class="line"><span class="comment">          （Function.prototype也是一个对象，所以Function的原型指向Object的原型）</span></span><br><span class="line"><span class="comment">          6.Function.prototype.__proto__  ==&gt; Object.prototype</span></span><br><span class="line"><span class="comment">          （Object的原型指向null(结束)）</span></span><br><span class="line"><span class="comment">          7.Object.prototype.__proto__    ==&gt; null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   所以以下等式结果全为true</span></span><br><span class="line"><span class="comment">        p.__proto__ === Person.prototype</span></span><br><span class="line"><span class="comment">        Person.prototype.__proto__ === Object.prototype</span></span><br><span class="line"><span class="comment">        Person.__proto__ === Function.prototype</span></span><br><span class="line"><span class="comment">        Function.__proto__ === Function.prototype</span></span><br><span class="line"><span class="comment">        Object.__proto__ === Function.prototype</span></span><br><span class="line"><span class="comment">        Function.prototype.__proto__ === Object.prototype</span></span><br><span class="line"><span class="comment">        Object.prototype.__proto__ === null</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><strong>原型链指向图</strong>：<br>？</li></ul><h2 id="三-判断数据类型"><a href="#三-判断数据类型" class="headerlink" title="三. 判断数据类型"></a>三. 判断数据类型</h2><p><strong>判断数据类型的方式</strong>：</p><ol><li><code>typeof</code><br> 语法：typeof(要测试的数据) 返回值：测试数据对应的数据类型 缺点：只能检测 基本数据类型和函数 注：检测函数时，得到的返回值为function<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="number">12</span>)); <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="string">&#x27;null&#x27;</span>)); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="literal">null</span>)); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="literal">undefined</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="literal">true</span>)); <span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> ([])); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (&#123;&#125;)); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>使用typeof方式检测时各数据类型返回的值：</li></ol><ul><li>检查Undefined类型的值时，返回”undefined”。</li><li>检查Number类型的值时，返回”number”（包括NaN 和 Infinity）。</li><li>检查Boolean类型的值时，返回”boolean”。</li><li><strong>检查Null类型的值时，会返回”object”。</strong>(包括对象、数组)</li><li>检查String类型的值时，会返回”string”。</li><li>检查Symbol类型的值时，返回”symbol”</li><li>检查函数时，返回”function”</li></ul><ol start="2"><li><code>constructor</code><br> 语法：数据结构.constructor 返回值：该数据结构所属的构造函数 缺点：无法检测 undefined 和 null<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">constructor</span>); <span class="comment">// ƒ Array() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">constructor</span>); <span class="comment">// ƒ Object() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;.<span class="property">constructor</span>); <span class="comment">// ƒ Function() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">1</span>).<span class="property">constructor</span>); <span class="comment">// ƒ Number() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">&#x27;zs&#x27;</span>).<span class="property">constructor</span>); <span class="comment">// ƒ String() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">null</span>).<span class="property">constructor</span>); <span class="comment">// Uncaught TypeError: Cannot read properties of null (reading &#x27;constructor&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">undefined</span>).<span class="property">constructor</span>); <span class="comment">// Uncaught TypeError: Cannot read properties of undefined (reading &#x27;constructor&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><code>instanceof</code><br> 语法：数据结构 instanceof 构造函数 返回值：true&#x2F;false 缺点：无法检测 undefined 和 null<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Number</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><code>Object.prototype.toString.call()</code><br> 语法：Object.prototype.toString.call(要测试的数据) 返回值：’[Object 数据类型]’ 所有数据类型都可以检测<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>)); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])); <span class="comment">// [object Array]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;)); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>)); <span class="comment">// [object Boolean]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123</span>)); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">apply</span>(<span class="number">123</span>)); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">bind</span>(<span class="number">123</span>)()); <span class="comment">// [object Number]</span></span><br></pre></td></tr></table></figure><strong>注</strong>：不必一定用<code>call()</code>也可以使用<code>bind()()</code>或<code>apply()</code>，只要是立即执行即可。</li></ol>]]></content>
    
    
    <summary type="html">JS 原型与原型链以及判断数据类型方式</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 继承</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E7%BB%A7%E6%89%BF/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E7%BB%A7%E6%89%BF/</id>
    <published>2023-12-14T14:42:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-继承概念"><a href="#一-继承概念" class="headerlink" title="一. 继承概念"></a>一. 继承概念</h2><p>继承：一个构造函数中的实例使用另一个构造函数上的属性和方法</p><h3 id="1-为什么要学习继承"><a href="#1-为什么要学习继承" class="headerlink" title="1. 为什么要学习继承?"></a>1. 为什么要学习继承?</h3><p>写的构造函数, 定义了⼀个类型 (⼈类), 万⼀项⽬⾮常⼤, ⼜有了细化的多个类型 (⽼师, ⼯⼈, 学⽣) 学习继承, 可以让多个构造函数之间建⽴关联, 便于管理和复⽤</p><h3 id="2-什么是继承"><a href="#2-什么是继承" class="headerlink" title="2. 什么是继承?"></a>2. 什么是继承?</h3><p>继承: 从别⼈那⾥, 继承东⻄过来 (财产, 房产) 代码层⾯的继承: 继承⼀些属性构造的过程和⽅法</p><h2 id="二-原型继承"><a href="#二-原型继承" class="headerlink" title="二. 原型继承"></a>二. 原型继承</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p><strong>原型继承</strong>：</p><ul><li>利用自定义原型的方法来实现继承关系</li><li>核心：子类的原型指向父类的实例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建父类的实例对象</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 原型继承：子类的原型指向父类的实例</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = f;</span><br><span class="line"><span class="comment">// 创建子类的实例对象</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;ls&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br><span class="line"><span class="comment">/*ƒ () &#123;</span></span><br><span class="line"><span class="comment">            console.log(this.age);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">s.<span class="title function_">sayHi</span>(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-原型继承的原理"><a href="#2-原型继承的原理" class="headerlink" title="(2) 原型继承的原理"></a>(2) 原型继承的原理</h3><p>子类的原型(Son.prototype)指向了父类的实例（new Father()也就是f）<br>子类实例化的对象想要访问一个属性时：</p><ul><li>首先在自己身上寻找，</li><li>如果没有，沿着 <code>__proto__</code> 寻找，</li><li>子类的实例化对象的<code>s.__proto__</code>是所属的构造函数的原型 <code>Son.prototype == f</code></li></ul><h3 id="3-原型继承的优缺点"><a href="#3-原型继承的优缺点" class="headerlink" title="(3) 原型继承的优缺点"></a>(3) 原型继承的优缺点</h3><p>优点：可以实现继承父类的属性和方法<br>缺点：</p><ol><li>子类的原型被占用，之后往子类的原型上加属性和方法无效</li><li>继承下来的属性不在子类身上，在原型身上</li></ol><h2 id="三-借用继承"><a href="#三-借用继承" class="headerlink" title="三. 借用继承"></a>三. 借用继承</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>借用继承又叫：借用构造函数继承、call继承<br><strong>核心</strong>：把父类构造函数当做普通函数用，并利用call()、apply()、bind()()修改this的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类的实例对象</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;zs&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Son&amp;nbsp;&#123;sex: &#x27;男&#x27;, name: &#x27;zs&#x27;, age: 20&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>分析</strong>：</p></blockquote><p>Father不和new连用，就是一个普通函数 普通函数调用，this指向window, 希望Son调用的时候，既使用Father里面的内容，同时希望Father里面的内容改成自己的，也就是说，希望使用的时候，this指向自己的this 希望修改Father普通函数的this指向 <code>call apply bind</code>都可以实现，只要注意参数和调用方式就可以了</p><h3 id="2-优缺点"><a href="#2-优缺点" class="headerlink" title="(2) 优缺点"></a>(2) 优缺点</h3><p>优点：</p><ol><li>可以把属性继承在自己身上</li><li>有自己的原型<br>缺点：只能继承父类的属性，不能继承原型的方法</li></ol><h2 id="四-组合继承"><a href="#四-组合继承" class="headerlink" title="四. 组合继承"></a>四. 组合继承</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>把原型继承和借用继承组合在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="comment">// 借用继承</span></span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型继承</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;女&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Son&amp;nbsp;&#123;sex: &#x27;女&#x27;, name: &#x27;ls&#x27;, age: 20&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        ƒ () &#123;</span></span><br><span class="line"><span class="comment">            console.log(this.age);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><h3 id="2-优缺点-1"><a href="#2-优缺点-1" class="headerlink" title="(2) 优缺点"></a>(2) 优缺点</h3><p>优点：</p><ol><li>可以继承属性和方法</li><li>继承的属性在自己身上<br>缺点：原型上存在一套属性</li></ol><h2 id="五-拷贝继承"><a href="#五-拷贝继承" class="headerlink" title="五. 拷贝继承"></a>五. 拷贝继承</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p><strong>拷贝继承</strong>：把父类身上的所有内容复制一份放在子类的原型上<br>实现：利用 for…in 循环遍历对象<br><strong>in 关键字的作用</strong>：</p><blockquote><p>判断字符串是不是对象上的一个属性 返回值：true&#x2F;false 特点：不只是对象本身，原型上的也能访问到</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sayHi&#x27;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="2-hasOwnProperty-方法"><a href="#2-hasOwnProperty-方法" class="headerlink" title="(2) hasOwnProperty() 方法"></a>(2) hasOwnProperty() 方法</h3><p>作用：判断某个属性是否在某个对象上<br>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;属性名&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回值：true&#x2F;false</p><ul><li>true 表示该属性在该对象上</li><li>false 表示不在<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;sayHi&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-拷贝继承案例"><a href="#3-拷贝继承案例" class="headerlink" title="(3) 拷贝继承案例"></a>(3) 拷贝继承案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">Father</span>(...arg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> f) &#123;</span><br><span class="line">        <span class="comment">// 拷贝继承 把所有内容复制一份放在子类的原型上</span></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>[k] = f[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;zs&quot;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure><h2 id="六-类继承（ES6）"><a href="#六-类继承（ES6）" class="headerlink" title="六. 类继承（ES6）"></a>六. 类继承（ES6）</h2><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 必须先写一个super() 相当于借用继承中把父类的方法用call在子类中执行一次</span></span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            super 关键字用于访问和调用一个对象的父对象上的函数。</span></span><br><span class="line"><span class="comment">            在构造函数中使用时，super关键字将单独出现，并且必须在使用 this 关键字之前使用。super 关键字也可以用来调用父对象上的函数。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：ES6的类可以继承ES5的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 用构造函数实现父类</span></span><br><span class="line"><span class="comment">    function Father(name, age) &#123;</span></span><br><span class="line"><span class="comment">        this.name = name</span></span><br><span class="line"><span class="comment">        this.age = age</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Father.prototype.sayHi = function () &#123;</span></span><br><span class="line"><span class="comment">        console.log(this.age);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Father.prototype.sayHello = function () &#123;</span></span><br><span class="line"><span class="comment">        console.log(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">        <span class="comment">// 等同于借用继承中，把父类的函数放在子类中在执行一次的操作</span></span><br><span class="line">        <span class="variable language_">super</span>(...arg);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;女&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Son&amp;nbsp;&#123;name: &#x27;tom&#x27;, age: 20, sex: &#x27;女&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br><span class="line">s.<span class="title function_">sayHi</span>(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h2 id="七-私有属性和方法"><a href="#七-私有属性和方法" class="headerlink" title="七. 私有属性和方法"></a>七. 私有属性和方法</h2><p>在继承中，父类中的部分方法和属性不希望子类继承<br><strong>静态语法</strong>：static 方法</p><ul><li>静态：书写在类自己身上，专门给自己使用，不可以被子类继承</li><li>动态：书写在原型上，可以被子类继承<br><strong>静态方法注意点</strong>：</li><li>静态方法只能由类进行调用</li><li>实例方法只能由实例对象进行调用</li><li>静态方法名和实例方法名<strong>允许重名</strong>，因为类内部的静态方法的调用者只能为类，实例方法的调用者只能为实例对象，不会在调用时造成歧义<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">        // 用构造函数实现父类</span></span><br><span class="line"><span class="comment">        function Father(name, age) &#123;</span></span><br><span class="line"><span class="comment">            this.name = name</span></span><br><span class="line"><span class="comment">            this.age = age</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        Father.prototype.sayHi = function () &#123;</span></span><br><span class="line"><span class="comment">            console.log(this.age);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        // ES5静态方法</span></span><br><span class="line"><span class="comment">        Father.sayHello = function () &#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;Hello&#x27;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(...arg)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Son&amp;nbsp;&#123;name: &#x27;tom&#x27;, age: 18, sex: &#x27;男&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">继承：一个构造函数中的实例使用另一个构造函数上的属性和方法</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
