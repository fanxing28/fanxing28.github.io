<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FanXing28</title>
  
  
  <link href="https://fanxing28.github.io/atom.xml" rel="self"/>
  
  <link href="https://fanxing28.github.io/"/>
  <updated>2024-03-19T13:34:22.982Z</updated>
  <id>https://fanxing28.github.io/</id>
  
  <author>
    <name>繁星ツ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2024/02/29/%E5%89%8D%E7%AB%AF/Vue/Vue%20%E9%A1%B9%E7%9B%AE/"/>
    <id>https://fanxing28.github.io/2024/02/29/%E5%89%8D%E7%AB%AF/Vue/Vue%20%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-02-29T10:52:03.921Z</published>
    <updated>2024-03-19T13:34:22.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重新刷新界面"><a href="#重新刷新界面" class="headerlink" title="重新刷新界面"></a>重新刷新界面</h2><ol><li>使用 <code>this.$forceUpdate()</code> 方法来强制Vue实例重新渲染:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$forceUpdate();</span><br></pre></td></tr></table></figure></li><li>使用 <code>key</code> 属性来强制组件重新渲染，例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :key=&quot;componentKey&quot;&gt;</span><br><span class="line">    &lt;!-- 组件内容 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      componentKey: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    refreshComponent() &#123;</span><br><span class="line">      this.componentKey += 1;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>使用 <code>v-if</code> 来动态销毁和重新创建组件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;showComponent&quot;&gt;</span><br><span class="line">    &lt;!-- 组件内容 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      showComponent: true,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    refreshComponent() &#123;</span><br><span class="line">      this.showComponent = false;</span><br><span class="line">      this.$nextTick(() =&gt; &#123;</span><br><span class="line">        this.showComponent = true;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;重新刷新界面&quot;&gt;&lt;a href=&quot;#重新刷新界面&quot; class=&quot;headerlink&quot; title=&quot;重新刷新界面&quot;&gt;&lt;/a&gt;重新刷新界面&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;this.$forceUpdate()&lt;/code&gt; 方法来强制Vue实例重新</summary>
      
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fanxing28.github.io/2024/02/29/%E5%90%8E%E7%AB%AF/PHP/ThinkPHP%20%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://fanxing28.github.io/2024/02/29/%E5%90%8E%E7%AB%AF/PHP/ThinkPHP%20%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-02-29T08:17:49.484Z</published>
    <updated>2024-03-19T13:34:22.982Z</updated>
    
    <content type="html"><![CDATA[<p><strong>官方文档地址：</strong> <a href="https://doc.thinkphp.cn/v8_0/preface.html">ThinkPHP官方手册</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">param</span>(<span class="string">&#x27;select&#x27;</span>)) &#123;</span><br><span class="line">  <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">list</span>(<span class="variable">$where</span>, <span class="variable">$alias</span>, <span class="variable">$limit</span>, <span class="variable">$order</span>) = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">queryBuilder</span>();</span><br><span class="line">  <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;model</span><br><span class="line">  -&gt;<span class="title function_ invoke__">field</span>(<span class="variable">$this</span>-&gt;indexField)</span><br><span class="line">  -&gt;<span class="title function_ invoke__">withJoin</span>(<span class="variable">$this</span>-&gt;withJoinTable, <span class="variable">$this</span>-&gt;withJoinType)</span><br><span class="line">  -&gt;<span class="title function_ invoke__">alias</span>(<span class="variable">$alias</span>)</span><br><span class="line">  -&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)</span><br><span class="line">  -&gt;<span class="title function_ invoke__">order</span>(<span class="variable">$order</span>)</span><br><span class="line">  -&gt;<span class="title function_ invoke__">paginate</span>(<span class="variable">$limit</span>);</span><br><span class="line">  <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="string">&#x27;&#x27;</span>, [</span><br><span class="line">  <span class="string">&#x27;list&#x27;</span>   =&gt; <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">items</span>(),</span><br><span class="line">  <span class="string">&#x27;total&#x27;</span>  =&gt; <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">total</span>(),</span><br><span class="line">  <span class="string">&#x27;remark&#x27;</span> =&gt; <span class="title function_ invoke__">get_route_remark</span>(),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generateDocNo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">isPost</span>()) &#123;</span><br><span class="line"><span class="variable">$postData</span> = <span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">post</span>();</span><br><span class="line"><span class="variable">$date</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Ymd&#x27;</span>, <span class="variable">$postData</span>[<span class="string">&#x27;date&#x27;</span>]);</span><br><span class="line"><span class="variable">$billNo</span> = <span class="string">&#x27;CYH&#x27;</span> . <span class="variable">$date</span>;</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">startTrans</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$info</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;buy_buymat&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">order</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;billNo&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="variable">$billNo</span> . <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;billNo&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">select</span>()</span><br><span class="line">-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$info</span>))&#123;</span><br><span class="line"><span class="variable">$billNo</span> = <span class="string">&#x27;CYH&#x27;</span> . <span class="variable">$date</span> . <span class="string">&#x27;001&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$lastThreeDigits</span> = [];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$info</span> <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line"><span class="variable">$billNoValue</span> = <span class="variable">$row</span>[<span class="string">&#x27;billNo&#x27;</span>];</span><br><span class="line"><span class="variable">$lastThreeChars</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$billNoValue</span>, -<span class="number">3</span>);</span><br><span class="line"><span class="variable">$lastThreeDigits</span>[] = (<span class="keyword">int</span>) <span class="variable">$lastThreeChars</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$maxValue</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$lastThreeDigits</span>);</span><br><span class="line"><span class="variable">$billNo</span> = <span class="variable">$billNo</span> . <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">formatNumber</span>(<span class="variable">$maxValue</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">commit</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">rollback</span>();</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="string">&#x27;查询失败：&#x27;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="string">&#x27;查询成功&#x27;</span>, <span class="variable">$billNo</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>判断是不是post请求</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">isPost</span>()) &#123;</span><br><span class="line"><span class="comment">// 是post请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>判断是不是get请求</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">isGet</span>())&#123;</span><br><span class="line"><span class="comment">// 是get请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>事务处理</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CustomerInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">isGet</span>())&#123;</span><br><span class="line"><span class="comment">// 启动事务</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">startTrans</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$info</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;settings_customer&#x27;</span>)-&gt;<span class="title function_ invoke__">order</span>(<span class="string">&#x27;id desc&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>()-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">commit</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="comment">// 回滚事务</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">rollback</span>();</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="string">&#x27;查询失败：&#x27;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$info</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>访问数据库语句分析<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;test&#x27;</span>)-&gt;<span class="title function_ invoke__">order</span>(<span class="string">&#x27;id desc&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>()-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">order</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;%&#x27;</span> . <span class="variable">$postData</span>[<span class="string">&#x27;queryValue&#x27;</span>] . <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">whereOr</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;%&#x27;</span> . <span class="variable">$postData</span>[<span class="string">&#x27;queryValue&#x27;</span>] . <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">whereOr</span>(<span class="string">&#x27;spec&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;%&#x27;</span> . <span class="variable">$postData</span>[<span class="string">&#x27;queryValue&#x27;</span>] . <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">select</span>()</span><br><span class="line">-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;test&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;iid&#x27;</span>, <span class="variable">$iid</span>)-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line"><span class="variable">$info</span> = [];</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;test&#x27;</span>)-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$info</span>);</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;test&#x27;</span>)-&gt;<span class="title function_ invoke__">getLastInsID</span>();</span><br></pre></td></tr></table></figure></li></ol><ul><li>Db::name(‘test’)：访问数据库的表名</li><li>-&gt;order(‘id desc’)：按照id字段的倒序查询</li><li>-&gt;select()：查询</li><li>-&gt;toArray()：将查询的数据转为数组格式</li><li>-&gt;where()：查询条件</li><li>-&gt;whereOr()：或查询条件（上述代码意指：对数据库test表中的name、number、spec这三个字段进行模糊查询）</li><li>-&gt;delete()：删除指定条件下的记录</li><li>-&gt;insert()：插入数据</li><li>-&gt;getLastInsID()：得到最后插入记录中的ID</li><li>-&gt;field(‘id, name’)：只查询表格的id和name字段</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;官方文档地址：&lt;/strong&gt; &lt;a href=&quot;https://doc.thinkphp.cn/v8_0/preface.html&quot;&gt;ThinkPHP官方手册&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;header</summary>
      
    
    
    
    <category term="后端" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="PHP" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>开发环境涉及知识</title>
    <link href="https://fanxing28.github.io/2024/02/18/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86/"/>
    <id>https://fanxing28.github.io/2024/02/18/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86/</id>
    <published>2024-02-18T08:49:00.000Z</published>
    <updated>2024-02-18T08:50:58.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切换npm镜像源"><a href="#切换npm镜像源" class="headerlink" title="切换npm镜像源"></a>切换npm镜像源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查询源</span><br><span class="line">npm config get registry</span><br><span class="line">// 更换国内源</span><br><span class="line">npm config set registry https://registry.npmmirror.com</span><br><span class="line">// 恢复官方源</span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><h2 id="nvm-的常用操作指令"><a href="#nvm-的常用操作指令" class="headerlink" title="nvm 的常用操作指令"></a>nvm 的常用操作指令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nvm list available</td><td align="left">查看可在线安装的NodeJS版本</td></tr><tr><td align="left">nvm install <version></td><td align="left">安装指定版本的 Node.js</td></tr><tr><td align="left">nvm use <version></td><td align="left">切换到指定版本的 Node.js</td></tr><tr><td align="left">nvm ls 或 nvm list</td><td align="left">列出已安装的所有 Node.js 版本</td></tr><tr><td align="left">nvm current</td><td align="left">显示当前正在使用的 Node.js 版本</td></tr><tr><td align="left">nvm alias <name> <version></td><td align="left">为指定的版本创建别名</td></tr><tr><td align="left">nvm unalias <name></td><td align="left">删除指定版本的别名</td></tr><tr><td align="left">nvm uninstall <version></td><td align="left">卸载指定的 Node.js 版本</td></tr><tr><td align="left">nvm reinstall-packages <version></td><td align="left">重新安装指定版本的 Node.js，并将全局包重新安装到新版本中</td></tr><tr><td align="left">nvm exec <version> <command></td><td align="left">在指定版本的 Node.js 环境下执行特定命令</td></tr><tr><td align="left">nvm –version</td><td align="left">显示 NVM 的版本信息</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">其他开发相关知识（切换npm镜像源、nvm 的常用操作指令）</summary>
    
    
    
    <category term="工具" scheme="https://fanxing28.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>个人后台管理系统</title>
    <link href="https://fanxing28.github.io/2024/02/18/%E5%B7%A5%E5%85%B7/%E4%B8%AA%E4%BA%BA%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://fanxing28.github.io/2024/02/18/%E5%B7%A5%E5%85%B7/%E4%B8%AA%E4%BA%BA%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-02-18T08:48:00.000Z</published>
    <updated>2024-02-18T08:48:50.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong>技术选型：</strong> Vue3 + VueRouter + Pinia + Element-Plus</p><h2 id="一-项目创建"><a href="#一-项目创建" class="headerlink" title="一. 项目创建"></a>一. 项目创建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vue@latest</span><br></pre></td></tr></table></figure><h2 id="二-安装Element-Plus"><a href="#二-安装Element-Plus" class="headerlink" title="二. 安装Element-Plus"></a>二. 安装Element-Plus</h2><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure><p><strong>完整引入</strong><br>main.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br></pre></td></tr></table></figure><h2 id="三-安装sass"><a href="#三-安装sass" class="headerlink" title="三. 安装sass"></a>三. 安装sass</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass sass-loader --save-dev</span><br></pre></td></tr></table></figure><h2 id="四-全屏显示"><a href="#四-全屏显示" class="headerlink" title="四. 全屏显示"></a>四. 全屏显示</h2><p><strong>安装插件<code>screenfull</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i screenfull</span><br></pre></td></tr></table></figure><p><strong>全屏显示代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">        &lt;svg-icon :name=&quot;isFullscreen == true ? &#x27;exitFullScreen&#x27; : &#x27;fullScreen&#x27;&quot; @click=&quot;toggleFull&quot;&gt;&lt;/svg-icon&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import screenfull from &#x27;screenfull&#x27;;</span><br><span class="line">import &#123; ref,onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">// 是否全屏</span><br><span class="line">const isFullscreen = ref(false);</span><br><span class="line">// 全屏切换事件</span><br><span class="line">const toggleFull = () =&gt; &#123;</span><br><span class="line">  screenfull.toggle();</span><br><span class="line">&#125;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">// 监听全屏切换（考虑点：可以通过键盘的Esc键退出全屏状态）</span><br><span class="line">    screenfull.on(&#x27;change&#x27;, () =&gt; &#123;</span><br><span class="line">      if(screenfull.isFullscreen == true)&#123;</span><br><span class="line">        isFullscreen.value = true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        isFullscreen.value = false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="五-svg图标封装"><a href="#五-svg图标封装" class="headerlink" title="五. svg图标封装"></a>五. svg图标封装</h2><ol><li><strong>安装vite-plugin-svg-icons</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add vite-plugin-svg-icons -D</span><br><span class="line">npm i vite-plugin-svg-icons -D</span><br></pre></td></tr></table></figure></li><li><strong>在<code>vite.config.js</code>中进行配置</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSvgIconsPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-svg-icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">  <span class="title function_">vue</span>(),</span><br><span class="line">  <span class="title function_">createSvgIconsPlugin</span>(&#123;</span><br><span class="line">  <span class="comment">// 指定需要缓存的图标文件夹</span></span><br><span class="line">  <span class="attr">iconDirs</span>: [path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;src/assets/svg&#x27;</span>)],</span><br><span class="line">      <span class="comment">// 指定 symbolId 的格式</span></span><br><span class="line">      <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><strong>创建svg组件</strong><br>文件路径：<code>src/components/svg/SvgIcon.vue</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-external-icon svg-icon&quot;&gt;</span><br><span class="line">        &lt;use :xlink:href=&quot;symbolId&quot; /&gt;</span><br><span class="line">    &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    // 显示的 svg 图标名称（剔除 icon-）</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        required: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 真实显示的 svg 图标名（拼接 #icon-）</span><br><span class="line">const symbolId = computed(() =&gt; `#icon-$&#123;props.name&#125;`)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.svg-icon &#123;</span><br><span class="line">    width: 1em;</span><br><span class="line">    height: 1em;</span><br><span class="line">    vertical-align: -0.15em;</span><br><span class="line">    fill: currentColor;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.svg-external-icon &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">    mask-size: cover !important;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><template> <svg :class="svgClass" aria-hidden="true">     <use :xlink:href="iconName" :fill="color"/> </svg></template></li><li>在main.js中引入组件和脚本，并挂载组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入注册脚本</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;virtual:svg-icons-register&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入svg组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/svg/svgIcon.vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 全局组件挂载</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;svg-icon&#x27;</span>, <span class="title class_">SvgIcon</span>);</span><br></pre></td></tr></table></figure></li><li>使用（直接在name属性写上在<code>src/assets/svg</code>目录下的svg文件名）就可以显示对应的图标<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg-icon name=&quot;home&quot;&gt;&lt;/svg-icon&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="六-md编辑器的使用-v-md-editor"><a href="#六-md编辑器的使用-v-md-editor" class="headerlink" title="六. md编辑器的使用(v-md-editor)"></a>六. md编辑器的使用(v-md-editor)</h2><p><strong>官方文档：</strong> <a href="https://code-farmer-i.github.io/vue-markdown-editor/zh/#%E4%BB%8B%E7%BB%8D">介绍 | v-md-editor (code-farmer-i.github.io)</a></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p><strong>安装Vue3版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm</span></span><br><span class="line">npm i @kangc/v-md-editor@next -S</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yarn</span></span><br><span class="line">yarn add @kangc/v-md-editor@next</span><br></pre></td></tr></table></figure><h3 id="2-注册"><a href="#2-注册" class="headerlink" title="2. 注册"></a>2. 注册</h3><p><strong>在<code>main.js</code>中注册使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入v-md-editor</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueMarkdownEditor</span> <span class="keyword">from</span> <span class="string">&#x27;@kangc/v-md-editor&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@kangc/v-md-editor/lib/style/base-editor.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vuepressTheme <span class="keyword">from</span> <span class="string">&#x27;@kangc/v-md-editor/lib/theme/vuepress.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@kangc/v-md-editor/lib/theme/style/vuepress.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Prism</span> <span class="keyword">from</span> <span class="string">&#x27;prismjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用v-md-editor</span></span><br><span class="line"><span class="title class_">VueMarkdownEditor</span>.<span class="title function_">use</span>(vuepressTheme, &#123;</span><br><span class="line">    <span class="title class_">Prism</span>,</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">VueMarkdownEditor</span>);</span><br></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p><strong>在组件中使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;v-md-editor v-model=&quot;text&quot; height=&quot;600px&quot;&gt;&lt;/v-md-editor&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const text = ref(&#x27;&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-代码高亮-推荐vuepress主题"><a href="#4-代码高亮-推荐vuepress主题" class="headerlink" title="4. 代码高亮(推荐vuepress主题)"></a>4. 代码高亮(推荐vuepress主题)</h3><p><strong>vuepress主题有内置tip和代码高亮显示更舒服</strong></p><h4 id="github主题"><a href="#github主题" class="headerlink" title="github主题"></a>github主题</h4><p><strong>在<code>main.js</code>文件中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入v-md-editor</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueMarkdownEditor</span> <span class="keyword">from</span> <span class="string">&#x27;@kangc/v-md-editor&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@kangc/v-md-editor/lib/style/base-editor.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> githubTheme <span class="keyword">from</span> <span class="string">&#x27;@kangc/v-md-editor/lib/theme/github.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@kangc/v-md-editor/lib/theme/style/github.css&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入所有语言包</span></span><br><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">&#x27;highlight.js&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用v-md-editor</span></span><br><span class="line"><span class="title class_">VueMarkdownEditor</span>.<span class="title function_">use</span>(githubTheme, &#123;</span><br><span class="line">  <span class="title class_">Hljs</span>: hljs,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="vuepress主题"><a href="#vuepress主题" class="headerlink" title="vuepress主题"></a>vuepress主题</h4><p><strong>安装 <code>vite-plugin-prismjs</code> 插件(vite 中扩展代码高亮语言包)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yarn</span></span><br><span class="line">yarn add vite-plugin-prismjs --dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm</span></span><br><span class="line">npm install vite-plugin-prismjs</span><br></pre></td></tr></table></figure><p><strong>按需引入语言包（推荐）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> prismjs <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-prismjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">prismjs</span>(&#123;</span><br><span class="line">      <span class="attr">languages</span>: [<span class="string">&#x27;json&#x27;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>引入所有语言包（不推荐）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> prismjs <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-prismjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">prismjs</span>(&#123;</span><br><span class="line">      <span class="attr">languages</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>内置功能</strong><br>vuepress 主题内置扩展了 tip 功能。同时你也可以在 left-toolbar 属性中配置 tip 来快捷插入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">::: tip </span><br><span class="line">  你可以点击 toolbar 中的 tip 来快速插入</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: warning</span><br><span class="line">  这是一段警告</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: danger</span><br><span class="line">这是一个危险警告</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: details</span><br><span class="line">  这是一个详情块，在 <span class="variable constant_">IE</span> / <span class="title class_">Edge</span> 中不生效</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: tip 自定义标题</span><br><span class="line">  你也可以自定义块中的标题</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: danger <span class="variable constant_">STOP</span></span><br><span class="line">  危险区域，禁止通行</span><br><span class="line">:::</span><br></pre></td></tr></table></figure><h3 id="其他实用的props和拓展"><a href="#其他实用的props和拓展" class="headerlink" title="其他实用的props和拓展"></a>其他实用的props和拓展</h3><h4 id="扩展代码高亮的类型"><a href="#扩展代码高亮的类型" class="headerlink" title="扩展代码高亮的类型"></a>扩展代码高亮的类型</h4><p>例如：语言包中是没有vue高亮的，可以通过下面的代码进行映射其他语言到vue上。<br>codeHighlightExtensionMap：key 为要扩展的名称，value 为代码高亮支持的语言。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// github主题</span></span><br><span class="line"><span class="title class_">VueMarkdownEditor</span>.<span class="title function_">use</span>(githubTheme, &#123;</span><br><span class="line">  <span class="attr">codeHighlightExtensionMap</span>: &#123;</span><br><span class="line">    <span class="attr">vue</span>: <span class="string">&#x27;xml&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// vuepress主题</span></span><br><span class="line"><span class="title class_">VueMarkdownEditor</span>.<span class="title function_">use</span>(vuepressTheme, &#123;</span><br><span class="line">  <span class="attr">codeHighlightExtensionMap</span>: &#123;</span><br><span class="line">    <span class="attr">vue</span>: <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="目录导航"><a href="#目录导航" class="headerlink" title="目录导航"></a>目录导航</h4><p>配置生成目录导航时包含的标题，默认值为<code>[2, 3, 4]</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-md-editor :include-level=&quot;[2, 3, 4]&quot;&gt;&lt;/v-md-editor&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="快捷复制代码"><a href="#快捷复制代码" class="headerlink" title="快捷复制代码"></a>快捷复制代码</h4><p><strong>引入注册</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueMarkdownEditor</span> <span class="keyword">from</span> <span class="string">&#x27;@kangc/v-md-editor&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createCopyCodePlugin <span class="keyword">from</span> <span class="string">&#x27;@kangc/v-md-editor/lib/plugins/copy-code/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@kangc/v-md-editor/lib/plugins/copy-code/copy-code.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VueMarkdownEditor</span>.<span class="title function_">use</span>(<span class="title function_">createCopyCodePlugin</span>());</span><br></pre></td></tr></table></figure><p><strong>组件中使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-md-editor v-model=&quot;text&quot; height=&quot;500px&quot; @copy-code-success=&quot;handleCopyCodeSuccess&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const text = ref(&#x27;&#x27;);</span><br><span class="line">const handleCopyCodeSuccess = (code) =&gt; &#123;</span><br><span class="line">    console.log(code);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>使 preview html 组件支持复制代码功能</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VMdPreviewHtml</span> <span class="keyword">from</span> <span class="string">&#x27;@kangc/v-md-editor/lib/preview-html&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createCopyCodePreview <span class="keyword">from</span> <span class="string">&#x27;@kangc/v-md-editor/lib/plugins/copy-code/preview&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@kangc/v-md-editor/lib/plugins/copy-code/copy-code.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VMdPreviewHtml</span>.<span class="title function_">use</span>(<span class="title function_">createCopyCodePreview</span>());</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">个人后台管理系统开发功能详解</summary>
    
    
    
    <category term="工具" scheme="https://fanxing28.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL的数据库</title>
    <link href="https://fanxing28.github.io/2024/02/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://fanxing28.github.io/2024/02/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-02-18T05:45:00.000Z</published>
    <updated>2024-02-18T08:45:48.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-RDBMS"><a href="#什么是-RDBMS" class="headerlink" title="什么是 RDBMS?"></a>什么是 RDBMS?</h3><p>RDBMS 代表<font color="#ff0000">关系数据库管理系统</font>。<br>RDBMS 是一个<strong>用于维护关系数据库的程序</strong>。<br>RDBMS 是所有现代数据库系统的基础，例如 MySQL、Microsoft SQL Server、Oracle 和 Microsoft Access。</p><h3 id="什么是数据库表"><a href="#什么是数据库表" class="headerlink" title="什么是数据库表?"></a>什么是数据库表?</h3><p>表是相关数据条目的集合，由列和行组成。<br>一列包含有关表中每条记录的特定信息。<br>记录（或行）是表中存在的每个单独条目。</p><h2 id="CREATE-DATABASE-语句"><a href="#CREATE-DATABASE-语句" class="headerlink" title="CREATE DATABASE 语句"></a>CREATE DATABASE 语句</h2><p><code>CREATE DATABASE</code> 语句用于创建新的 SQL 数据库。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE _databasename_;</span><br></pre></td></tr></table></figure><h3 id="创建数据库示例"><a href="#创建数据库示例" class="headerlink" title="创建数据库示例"></a>创建数据库示例</h3><p>以下 SQL 语句创建一个名为 “testDB” 的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE testDB;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong> 在创建任何数据库之前，请确保您拥有管理员权限。 创建数据库后，您可以使用以下 SQL 命令在数据库列表中检查它：<code>SHOW DATABASES</code>;</p><h2 id="DROP-DATABASE-语句"><a href="#DROP-DATABASE-语句" class="headerlink" title="DROP DATABASE 语句"></a>DROP DATABASE 语句</h2><p><code>DROP DATABASE</code> 语句用于删除现有的 SQL 数据库。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE _databasename_;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在删除数据库之前要小心。 删除数据库将导致数据库中存储的完整信息丢失！</p><h3 id="删除数据库示例"><a href="#删除数据库示例" class="headerlink" title="删除数据库示例"></a>删除数据库示例</h3><p>以下 SQL 语句删除现有数据库”testDB”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE testDB;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong> 在删除任何数据库之前，请确保您拥有管理员权限。 删除数据库后，您可以使用以下 SQL 命令在数据库列表中检查它：<code>SHOW DATABASES</code>;</p><h2 id="CREATE-TABLE-语句"><a href="#CREATE-TABLE-语句" class="headerlink" title="CREATE TABLE 语句"></a>CREATE TABLE 语句</h2><p><code>CREATE TABLE</code> 语句用于在数据库中创建新表。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE _table_name_ (  </span><br><span class="line">    _column1 datatype_,  </span><br><span class="line">    _column2 datatype_,  </span><br><span class="line">    _column3 datatype_,  </span><br><span class="line">   ....  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>column 列参数指定表的列名。<br>datatype 参数指定列可以保存的数据类型（例如 varchar、integer、date 等）。</p><h3 id="创建表示例"><a href="#创建表示例" class="headerlink" title="创建表示例"></a>创建表示例</h3><p><strong>示例：</strong> 创建一个名为”Persons”的表。 包含五列：PersonID、LastName、FirstName、Address 和 City。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    PersonID int,  </span><br><span class="line">    LastName varchar(255),  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Address varchar(255),  </span><br><span class="line">    City varchar(255)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>PersonID 列是 int 类型，并且将保存一个整数。<br>LastName、FirstName、Address 和 City 列的类型为 varchar，可容纳字符，这些字段的最大长度为 255 个字符。<br><strong>提示：</strong> 现在可以使用 SQL <code>INSERT INTO</code>语句来填充空的 “Persons” 表。</p><h3 id="使用另一个表创建表"><a href="#使用另一个表创建表" class="headerlink" title="使用另一个表创建表"></a>使用另一个表创建表</h3><p>也可以使用 <code>CREATE TABLE</code> 创建现有表的副本。<br>新表获得相同的列定义。 可以选择所有列或特定列。<br>如果您使用现有表创建新表，则新表将使用旧表中的现有值填充。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE _new_table_name_ AS  </span><br><span class="line">    SELECT _column1, column2,..._  </span><br><span class="line">    FROM _existing_table_name_  </span><br><span class="line">    WHERE ....;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong> 创建一个名为 “TestTables” 的新表（它是 “Customers” 表的副本）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE TestTable AS  </span><br><span class="line">SELECT customername, contactname  </span><br><span class="line">FROM customers;</span><br></pre></td></tr></table></figure><h2 id="DROP-TABLE-语句"><a href="#DROP-TABLE-语句" class="headerlink" title="DROP TABLE 语句"></a>DROP TABLE 语句</h2><p><code>DROP TABLE</code> 语句用于删除数据库中的现有表。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE _table_name_;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在删除表格之前要小心。 删除表会导致表中存储的完整信息丢失！</p><h3 id="DROP-TABLE-示例"><a href="#DROP-TABLE-示例" class="headerlink" title="DROP TABLE 示例"></a>DROP TABLE 示例</h3><p><strong>示例：</strong> 删除现有表”Shippers”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE Shippers;</span><br></pre></td></tr></table></figure><h3 id="TRUNCATE-TABLE"><a href="#TRUNCATE-TABLE" class="headerlink" title="TRUNCATE TABLE"></a>TRUNCATE TABLE</h3><p><code>TRUNCATE TABLE</code>语句用于删除表内的数据，但不删除表本身。</p><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE _table_name_;</span><br></pre></td></tr></table></figure><h2 id="ALTER-TABLE-语句"><a href="#ALTER-TABLE-语句" class="headerlink" title="ALTER TABLE 语句"></a>ALTER TABLE 语句</h2><p><code>ALTER TABLE</code> 语句用于添加、删除或修改现有表中的列。<br><code>ALTER TABLE</code> 语句还用于在现有表上添加和删除各种约束。</p><h3 id="ADD-Column"><a href="#ADD-Column" class="headerlink" title="ADD Column"></a>ADD Column</h3><p>在表中添加列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE _table_name_  </span><br><span class="line">ADD _column_name datatype_;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong> 将 “Email” 列添加到 “Customers” 表中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Customers  </span><br><span class="line">ADD Email varchar(255);</span><br></pre></td></tr></table></figure><h3 id="DROP-COLUMN"><a href="#DROP-COLUMN" class="headerlink" title="DROP COLUMN"></a>DROP COLUMN</h3><p>删除表中的列（请注意，某些数据库系统不允许删除列）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE _table_name_  </span><br><span class="line">DROP COLUMN _column_name_;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Customers  </span><br><span class="line">DROP COLUMN Email;</span><br></pre></td></tr></table></figure><h3 id="MODIFY-COLUMN"><a href="#MODIFY-COLUMN" class="headerlink" title="MODIFY COLUMN"></a>MODIFY COLUMN</h3><p>更改表中列的数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE _table_name_  </span><br><span class="line">MODIFY COLUMN _column_name datatype_;</span><br></pre></td></tr></table></figure><h3 id="ALTER-TABLE-示例"><a href="#ALTER-TABLE-示例" class="headerlink" title="ALTER TABLE 示例"></a>ALTER TABLE 示例</h3><p><strong>示例：</strong> 在 “Persons” 表中添加一个名为 “DateOfBirth” 的列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ADD DateOfBirth date;</span><br></pre></td></tr></table></figure><p>请注意，新列 “DateOfBirth” 的类型为 date，并且将保存一个日期。 </p><h3 id="更改数据类型示例"><a href="#更改数据类型示例" class="headerlink" title="更改数据类型示例"></a>更改数据类型示例</h3><p><strong>示例：</strong> 更改 “Persons” 表中名为 “DateOfBirth” 的列的数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">MODIFY COLUMN DateOfBirth year;</span><br><span class="line"></span><br><span class="line">Notice that the &quot;DateOfBirth&quot; column is now of type year and is going to hold a year in a two- or four-digit format.</span><br></pre></td></tr></table></figure><h3 id="删除列示例"><a href="#删除列示例" class="headerlink" title="删除列示例"></a>删除列示例</h3><p><strong>示例：</strong> 删除 “Persons” 表中名为 “DateOfBirth” 的列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">DROP COLUMN DateOfBirth;</span><br></pre></td></tr></table></figure><h2 id="MySQL-约束"><a href="#MySQL-约束" class="headerlink" title="MySQL 约束"></a>MySQL 约束</h2><p>SQL 约束用于为表中的数据指定规则。<br>约束用于限制可以进入表的数据类型。 这保证了表中数据的准确性和可靠性。 如果约束和数据操作之间存在任何冲突，则该操作被中止。<br>约束可以是列级或表级。 列级约束应用于列，表级约束应用于整个表。</p><h3 id="创建约束"><a href="#创建约束" class="headerlink" title="创建约束"></a>创建约束</h3><p>可以在使用 <code>CREATE TABLE</code> 语句创建表时或在使用  <code>创建表后指定约束 ALTER TABLE</code> 语句。</p><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE _table_name_ (  </span><br><span class="line">    _column1 datatype_ _constraint_,  </span><br><span class="line">    _column2 datatype_ _constraint_,  </span><br><span class="line">    _column3 datatype_ _constraint_,  </span><br><span class="line">    ....  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>SQL中常用的约束如下：</strong></p><ul><li><code>NOT NULL</code> - 确保列不能有 NULL 值</li><li><code>UNIQUE</code> - 确保列中的所有值都不同</li><li><code>PRIMARY KEY</code> - <code>NOT NULL</code> 和 <code>UNIQUE</code> 的组合。 唯一标识表中的每一行</li><li><code>FOREIGN KEY</code> - 防止破坏表之间链接的操作</li><li><code>CHECK</code> - 确保列中的值满足特定条件</li><li><code>DEFAULT</code> - 如果没有指定值，则为列设置默认值</li><li><code>CREATE INDEX</code> - 用于非常快速地从数据库中创建和检索数据</li></ul><h2 id="NOT-NULL-非空约束"><a href="#NOT-NULL-非空约束" class="headerlink" title="NOT NULL 非空约束"></a>NOT NULL 非空约束</h2><p>默认情况下，一列可以保存 NULL 值。<br><code>NOT NULL</code> 约束强制列不接受 NULL 值。<br>这强制字段始终包含一个值，这意味着您不能插入新记录或更新记录而不向该字段添加值。</p><h3 id="CREATE-TABLE-的-NOT-NULL"><a href="#CREATE-TABLE-的-NOT-NULL" class="headerlink" title="CREATE TABLE 的 NOT NULL"></a>CREATE TABLE 的 NOT NULL</h3><p>The following SQL ensures that the “ID”, “LastName”, and “FirstName” columns will NOT accept NULL values when the “Persons” table is created:<br><strong>示例：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255) NOT NULL,  </span><br><span class="line">    Age int  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ALTER-TABLE-的-NOT-NULL"><a href="#ALTER-TABLE-的-NOT-NULL" class="headerlink" title="ALTER TABLE 的 NOT NULL"></a>ALTER TABLE 的 NOT NULL</h3><p><strong>示例：</strong> 在 “Persons” 表已建 “Age” 列上创建 <code>NOT NULL</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">MODIFY Age int NOT NULL;</span><br></pre></td></tr></table></figure><h2 id="UNIQUE-唯一约束"><a href="#UNIQUE-唯一约束" class="headerlink" title="UNIQUE 唯一约束"></a>UNIQUE 唯一约束</h2><p><code>UNIQUE</code> 约束确保列中的所有值都不同。<br><code>UNIQUE</code> 和 <code>PRIMARY KEY</code> 约束都为一列或一组列提供唯一性保证 .<br><code>PRIMARY KEY</code> 约束自动具有 <code>UNIQUE</code> 约束。<br>但是，每个表可以有许多 <code>UNIQUE</code> 约束，但每个表只能有一个 <code>PRIMARY KEY</code> 约束 .</p><h3 id="CREATE-TABLE-创建表时-UNIQUE-唯一约束"><a href="#CREATE-TABLE-创建表时-UNIQUE-唯一约束" class="headerlink" title="CREATE TABLE 创建表时 UNIQUE 唯一约束"></a>CREATE TABLE 创建表时 UNIQUE 唯一约束</h3><p><strong>示例1：</strong> 在创建 “Persons” 表时在 “ID” 列上创建 <code>UNIQUE</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Age int,  </span><br><span class="line">    UNIQUE (ID)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 命名 <code>UNIQUE</code> 约束，并在多个列上定义 <code>UNIQUE</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Age int,  </span><br><span class="line">    CONSTRAINT UC_Person UNIQUE (ID,LastName)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ALTER-TABLE-上的-UNIQUE-唯一约束"><a href="#ALTER-TABLE-上的-UNIQUE-唯一约束" class="headerlink" title="ALTER TABLE 上的 UNIQUE 唯一约束"></a>ALTER TABLE 上的 UNIQUE 唯一约束</h3><p><strong>示例1：</strong> 在表已建表的 “ID” 列上创建 <code>UNIQUE</code> 约束.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ADD UNIQUE (ID);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 命名 <code>UNIQUE</code> 约束，并在多个列上定义 <code>UNIQUE</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);</span><br></pre></td></tr></table></figure><h3 id="删除-UNIQUE-唯一约束"><a href="#删除-UNIQUE-唯一约束" class="headerlink" title="删除 UNIQUE 唯一约束"></a>删除 UNIQUE 唯一约束</h3><p><strong>示例：</strong> 删除 <code>UNIQUE</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">DROP INDEX UC_Person;</span><br></pre></td></tr></table></figure><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><p><code>PRIMARY KEY</code> 约束唯一标识表中的每条记录。<br>主键必须包含 UNIQUE 值，并且不能包含 NULL 值。<br>一张表只能有一个主键； 并且在表中，这个主键可以由单个或多个列（字段）组成。</p><h3 id="CREATE-TABLE-的-PRIMARY-KEY"><a href="#CREATE-TABLE-的-PRIMARY-KEY" class="headerlink" title="CREATE TABLE 的 PRIMARY KEY"></a>CREATE TABLE 的 PRIMARY KEY</h3><p><strong>示例1：</strong> 创建 “Persons” 表时在 “ID” 列上创建一个<code>PRIMARY KEY</code> 主键约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Age int,  </span><br><span class="line">    PRIMARY KEY (ID)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 允许命名 <code>PRIMARY KEY</code> 约束，并在多个列上定义 <code>PRIMARY KEY</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Age int,  </span><br><span class="line">    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在上面的例子中，只有一个 <code>PRIMARY KEY</code> (PK_Person)。 但是，主键的 VALUE 由两列 (ID + LastName) 组成。  </p><h3 id="ALTER-TABLE-上的-PRIMARY-KEY"><a href="#ALTER-TABLE-上的-PRIMARY-KEY" class="headerlink" title="ALTER TABLE 上的 PRIMARY KEY"></a>ALTER TABLE 上的 PRIMARY KEY</h3><p><strong>示例1：</strong> 当表已经创建列时，在”ID”上创建 <code>PRIMARY KEY</code> 约束。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ADD PRIMARY KEY (ID);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 允许命名 <code>PRIMARY KEY</code> 约束，并在多个列上定义 <code>PRIMARY KEY</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 如果您使用 <code>ALTER TABLE</code> 添加主键，则主键列必须已声明为不 包含 NULL 值（首次创建表时）。</p><h3 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h3><p><strong>示例：</strong> 删除 <code>PRIMARY KEY</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><h2 id="FOREIGN-KEY-外键约束"><a href="#FOREIGN-KEY-外键约束" class="headerlink" title="FOREIGN KEY 外键约束"></a>FOREIGN KEY 外键约束</h2><p><code>FOREIGN KEY</code> 约束用于防止破坏表之间链接的操作。<br><code>FOREIGN KEY</code> 是一个表中的字段（或字段集合），它引用 <code>PRIMARY KEY</code> 在另一个表中。<br>具有外键的表称为子表，具有主键的表称为引用表或父表。</p><h3 id="FOREIGN-KEY-on-CREATE-TABLE"><a href="#FOREIGN-KEY-on-CREATE-TABLE" class="headerlink" title="FOREIGN KEY on CREATE TABLE"></a>FOREIGN KEY on CREATE TABLE</h3><p><strong>示例1：</strong> 在创建 “Orders” 表时在 “PersonID” 列上创建 <code>FOREIGN KEY</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (  </span><br><span class="line">    OrderID int NOT NULL,  </span><br><span class="line">    OrderNumber int NOT NULL,  </span><br><span class="line">    PersonID int,  </span><br><span class="line">    PRIMARY KEY (OrderID),  </span><br><span class="line">    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 允许命名 <code>FOREIGN KEY</code> 约束，并在多个列上定义 <code>FOREIGN KEY</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (  </span><br><span class="line">    OrderID int NOT NULL,  </span><br><span class="line">    OrderNumber int NOT NULL,  </span><br><span class="line">    PersonID int,  </span><br><span class="line">    PRIMARY KEY (OrderID),  </span><br><span class="line">    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)  </span><br><span class="line">    REFERENCES Persons(PersonID)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="FOREIGN-KEY-on-ALTER-TABLE"><a href="#FOREIGN-KEY-on-ALTER-TABLE" class="headerlink" title="FOREIGN KEY on ALTER TABLE"></a>FOREIGN KEY on ALTER TABLE</h3><p><strong>示例1：</strong> 在已建的 “Orders” 表的 “PersonID” 列上创建 <code>FOREIGN KEY</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders  </span><br><span class="line">ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 允许命名 <code>FOREIGN KEY</code> 约束，并在多个列上定义 <code>FOREIGN KEY</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders  </span><br><span class="line">ADD CONSTRAINT FK_PersonOrder  </span><br><span class="line">FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);</span><br></pre></td></tr></table></figure><h3 id="删除-FOREIGN-KEY-外键约束"><a href="#删除-FOREIGN-KEY-外键约束" class="headerlink" title="删除 FOREIGN KEY 外键约束"></a>删除 FOREIGN KEY 外键约束</h3><p><strong>示例：</strong> 删除 <code>FOREIGN KEY</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders  </span><br><span class="line">DROP FOREIGN KEY FK_PersonOrder;</span><br></pre></td></tr></table></figure><h2 id="CHECK-约束"><a href="#CHECK-约束" class="headerlink" title="CHECK 约束"></a>CHECK 约束</h2><p><code>CHECK</code> 约束用于限制列中可以放置的值范围。<br>如果您在列上定义 <code>CHECK</code> 约束，它将只允许该列的某些值。<br>如果您在表上定义 <code>CHECK</code> 约束，它可以根据行中其他列中的值来限制某些列中的值。</p><h3 id="建表时创建-CHECK-约束"><a href="#建表时创建-CHECK-约束" class="headerlink" title="建表时创建 CHECK 约束"></a>建表时创建 <code>CHECK</code> 约束</h3><p><strong>示例1：</strong> 在创建 “Persons” 表时在 “Age” 列上创建 <code>CHECK</code> 约束。 <code>CHECK</code> 约束确保一个人的年龄必须是 18 岁或以上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Age int,  </span><br><span class="line">    CHECK (Age&gt;=18)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 允许命名 <code>CHECK</code> 约束，并在多个列上定义 <code>CHECK</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Age int,  </span><br><span class="line">    City varchar(255),  </span><br><span class="line">    CONSTRAINT CHK_Person CHECK (Age&gt;=18 AND City=&#x27;Sandnes&#x27;)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="CHECK-ALTER-TABLE"><a href="#CHECK-ALTER-TABLE" class="headerlink" title="CHECK ALTER TABLE"></a>CHECK ALTER TABLE</h3><p><strong>示例1：</strong> 在已创建的表 “Age” 列上创建 <code>CHECK</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ADD CHECK (Age&gt;=18);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 允许命名 <code>CHECK</code> 约束，并在多个列上定义 <code>CHECK</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ADD CONSTRAINT CHK_PersonAge CHECK (Age&gt;=18 AND City=&#x27;Sandnes&#x27;);</span><br></pre></td></tr></table></figure><h3 id="DROP-CHECK"><a href="#DROP-CHECK" class="headerlink" title="DROP CHECK"></a>DROP CHECK</h3><p>删除 <code>CHECK</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">DROP CHECK CHK_PersonAge;</span><br></pre></td></tr></table></figure><h2 id="DEFAULT-约束"><a href="#DEFAULT-约束" class="headerlink" title="DEFAULT 约束"></a>DEFAULT 约束</h2><p><code>DEFAULT</code> 约束用于为列设置默认值。<br>如果没有指定其他值，默认值将添加到所有新记录中。</p><h3 id="创建表时设置默认约束"><a href="#创建表时设置默认约束" class="headerlink" title="创建表时设置默认约束"></a>创建表时设置默认约束</h3><p>在创建 “Persons” 表时为 “City” 列设置一个<code>DEFAULT</code>值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Age int,  </span><br><span class="line">    City varchar(255) DEFAULT &#x27;Sandnes&#x27;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>DEFAULT</code> 约束也可用于插入系统值，方法是使用像 <code>CURRENT_DATE()</code> 这样的函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (  </span><br><span class="line">    ID int NOT NULL,  </span><br><span class="line">    OrderNumber int NOT NULL,  </span><br><span class="line">    OrderDate date DEFAULT CURRENT_DATE()  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ALTER-TABLE-上的默认值"><a href="#ALTER-TABLE-上的默认值" class="headerlink" title="ALTER TABLE 上的默认值"></a>ALTER TABLE 上的默认值</h3><p>在已建表的 “City” 列上创建 <code>DEFAULT</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ALTER City SET DEFAULT &#x27;Sandnes&#x27;;</span><br></pre></td></tr></table></figure><h3 id="删除默认约束"><a href="#删除默认约束" class="headerlink" title="删除默认约束"></a>删除默认约束</h3><p>删除 <code>DEFAULT</code> 约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons  </span><br><span class="line">ALTER City DROP DEFAULT;</span><br></pre></td></tr></table></figure><h2 id="CREATE-INDEX-语句"><a href="#CREATE-INDEX-语句" class="headerlink" title="CREATE INDEX 语句"></a>CREATE INDEX 语句</h2><p><code>CREATE INDEX</code> 语句用于在表中创建索引。<br>索引用于比其他方式更快地从数据库中检索数据。 用户看不到索引，它们只是用来加速搜索&#x2F;查询。<br><strong>注意：</strong> 更新带有索引的表比不更新表需要更多时间（因为索引也需要更新）。 因此，仅在将经常搜索的列上创建索引。</p><h3 id="CREATE-INDEX-语法"><a href="#CREATE-INDEX-语法" class="headerlink" title="CREATE INDEX 语法"></a>CREATE INDEX 语法</h3><p>在表上创建索引。允许重复值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX _index_name_  </span><br><span class="line">ON _table_name_ (_column1_, _column2_, ...);</span><br></pre></td></tr></table></figure><h3 id="CREATE-UNIQUE-INDEX-语法"><a href="#CREATE-UNIQUE-INDEX-语法" class="headerlink" title="CREATE UNIQUE INDEX 语法"></a>CREATE UNIQUE INDEX 语法</h3><p>在表上创建唯一索引。 不允许重复值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX _index_name_  </span><br><span class="line">ON _table_name_ (_column1_, _column2_, ...);</span><br></pre></td></tr></table></figure><h3 id="创建索引示例"><a href="#创建索引示例" class="headerlink" title="创建索引示例"></a>创建索引示例</h3><p><strong>示例1：</strong> 在 “Persons” 表的 “LastName” 列上创建一个名为 “idx_lastname” 的索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_lastname  </span><br><span class="line">ON Persons (LastName);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 为列组合创建索引，可以在括号内列出列名，用逗号分隔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_pname  </span><br><span class="line">ON Persons (LastName, FirstName);</span><br></pre></td></tr></table></figure><h3 id="DROP-INDEX-语句"><a href="#DROP-INDEX-语句" class="headerlink" title="DROP INDEX 语句"></a>DROP INDEX 语句</h3><p><code>DROP INDEX</code>语句用于删除表中的索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE _table_name  </span><br><span class="line">_DROP INDEX _index_name_;</span><br></pre></td></tr></table></figure><h2 id="AUTO-INCREMENT-自增字段"><a href="#AUTO-INCREMENT-自增字段" class="headerlink" title="AUTO INCREMENT 自增字段"></a>AUTO INCREMENT 自增字段</h2><h3 id="什么是自动增量字段"><a href="#什么是自动增量字段" class="headerlink" title="什么是自动增量字段?"></a>什么是自动增量字段?</h3><p>自动增量允许在向表中插入新记录时自动生成唯一编号。<br>通常这是我们希望在每次插入新记录时自动创建的主键字段。</p><h3 id="AUTO-INCREMENT-关键字"><a href="#AUTO-INCREMENT-关键字" class="headerlink" title="AUTO_INCREMENT 关键字"></a>AUTO_INCREMENT 关键字</h3><p>MySQL 使用 <code>AUTO_INCREMENT</code> 关键字来执行自动增量功能。<br>默认情况下，<code>AUTO_INCREMENT</code>的起始值为1，每新增一条记录就加1。<br>以下 SQL 语句将 “Personid” 列定义为 “Persons” 表中的自增主键字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (  </span><br><span class="line">    Personid int NOT NULL AUTO_INCREMENT,  </span><br><span class="line">    LastName varchar(255) NOT NULL,  </span><br><span class="line">    FirstName varchar(255),  </span><br><span class="line">    Age int,  </span><br><span class="line">    PRIMARY KEY (Personid)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>要让 <code>AUTO_INCREMENT</code> 序列以另一个值开始，请使用以下 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons AUTO_INCREMENT=100;</span><br></pre></td></tr></table></figure><p>当我们在 “Persons” 表中插入一条新记录时，我们不必为 “Personid” 列指定一个值（将自动添加一个唯一值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Persons (FirstName,LastName)  </span><br><span class="line">VALUES (&#x27;Lars&#x27;,&#x27;Monsen&#x27;);</span><br></pre></td></tr></table></figure><p>上面的 SQL 语句会在 “Persons” 表中插入一条新记录。 “Personid” 列将自动分配一个唯一值。 “FirstName” 列将设置为 “Lars”，”LastName” 列将设置为 “Monsen”。</p><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>处理日期最困难的部分是确保您尝试插入的日期格式与数据库中日期列的格式相匹配。<br>只要您的数据仅包含日期部分，您的查询就会按预期工作。 但是，如果涉及到时间部分，它就会变得更加复杂。</p><h3 id="日期数据类型"><a href="#日期数据类型" class="headerlink" title="日期数据类型"></a>日期数据类型</h3><p>MySQL 带有以下数据类型，用于在数据库中存储日期或日期&#x2F;时间值：</p><ul><li><code>DATE</code> - 格式 YYYY-MM-DD</li><li><code>DATETIME</code> - 格式：YYYY-MM-DD HH:MI:SS</li><li><code>TIMESTAMP</code> - 格式：YYYY-MM-DD HH:MI:SS</li><li><code>YEAR</code> - 格式 YYYY 或 YY<br><strong>注意：</strong> 当您在数据库中创建新表时，会为列设置日期数据类型！</li></ul><h3 id="使用日期"><a href="#使用日期" class="headerlink" title="使用日期"></a>使用日期</h3><p>我们使用以下 <code>SELECT</code> 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Orders WHERE OrderDate=&#x27;2008-11-11&#x27;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 如果不涉及时间组件，可以轻松比较两个日期<br>现在，假设 “Orders” 表如下所示（注意 “OrderDate” 列中添加的时间分量）：<br>如果我们使用与上面相同的 <code>SELECT</code> 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Orders WHERE OrderDate=&#x27;2008-11-11&#x27;</span><br></pre></td></tr></table></figure><p>我们不会得到任何结果！ 这是因为查询只查找没有时间部分的日期。<br><strong>提示：</strong> 为使您的查询简单且易于维护，请勿在日期中使用时间组件，除非您必须这样做！</p><h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><h3 id="CREATE-VIEW-语句"><a href="#CREATE-VIEW-语句" class="headerlink" title="CREATE VIEW 语句"></a>CREATE VIEW 语句</h3><p>在 SQL 中，视图是基于 SQL 语句结果集的虚拟表。<br>视图包含行和列，就像真正的表一样。 视图中的字段是来自数据库中一个或多个真实表的字段。<br>您可以将 SQL 语句和函数添加到视图中，并像数据来自单个表一样呈现数据。<br>使用 <code>CREATE VIEW</code> 语句创建视图。</p><h3 id="CREATE-VIEW-创建视图语法"><a href="#CREATE-VIEW-创建视图语法" class="headerlink" title="CREATE VIEW 创建视图语法"></a>CREATE VIEW 创建视图语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW _view_name_ AS  </span><br><span class="line">SELECT _column1_, _column2_, ...  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 视图总是显示最新的数据！ 每次用户查询时，数据库引擎都会重新创建视图。</p><h3 id="CREATE-VIEW-创建视图示例"><a href="#CREATE-VIEW-创建视图示例" class="headerlink" title="CREATE VIEW 创建视图示例"></a>CREATE VIEW 创建视图示例</h3><p>创建一个视图，显示来自巴西的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW [Brazil Customers] AS  </span><br><span class="line">SELECT CustomerName, ContactName  </span><br><span class="line">FROM Customers  </span><br><span class="line">WHERE Country = &#x27;Brazil&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [Brazil Customers];</span><br></pre></td></tr></table></figure><p>创建一个视图，该视图选择 “Products” 表中价格高于平均价格的所有产品：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW [Products Above Average Price] AS  </span><br><span class="line">SELECT ProductName, Price  </span><br><span class="line">FROM Products  </span><br><span class="line">WHERE Price &gt; (SELECT AVG(Price) FROM Products);</span><br></pre></td></tr></table></figure><p><strong>示例：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [Products Above Average Price];</span><br></pre></td></tr></table></figure><h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><p>可以使用 <code>CREATE 或 REPLACE VIEW</code> 语句更新视图。</p><h4 id="创建或替换视图语法"><a href="#创建或替换视图语法" class="headerlink" title="创建或替换视图语法"></a>创建或替换视图语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW _view_name_ AS  </span><br><span class="line">SELECT _column1_, _column2_, ...  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong> 将 “City” 列添加到 “Brazil Customers” 视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW [Brazil Customers] AS  </span><br><span class="line">SELECT CustomerName, ContactName, City  </span><br><span class="line">FROM Customers  </span><br><span class="line">WHERE Country = &#x27;Brazil&#x27;;</span><br></pre></td></tr></table></figure><h3 id="MySQL-删除视图"><a href="#MySQL-删除视图" class="headerlink" title="MySQL 删除视图"></a>MySQL 删除视图</h3><p>使用 <code>DROP VIEW</code> 语句删除视图。</p><h4 id="DROP-VIEW-语法"><a href="#DROP-VIEW-语法" class="headerlink" title="DROP VIEW 语法"></a>DROP VIEW 语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW _view_name_;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong>  删除 “Brazil Customers” 视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW [Brazil Customers];</span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p><strong>注：</strong> 本文参考 <a href="https://www.w3schools.cn/mysql/">MySQL 教程 (w3schools.cn)</a>需了解更详细内容可以点击链接前往</p>]]></content>
    
    
    <summary type="html">RDBMS 代表关系数据库管理系统。RDBMS 是一个用于维护关系数据库的程序。RDBMS 是所有现代数据库系统的基础，例如 MySQL、Microsoft SQL Server、Oracle 和 Microsoft Access。</summary>
    
    
    
    <category term="数据库" scheme="https://fanxing28.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="SQL" scheme="https://fanxing28.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的数据类型与函数</title>
    <link href="https://fanxing28.github.io/2024/02/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    <id>https://fanxing28.github.io/2024/02/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%87%BD%E6%95%B0/</id>
    <published>2024-02-18T05:39:00.000Z</published>
    <updated>2024-02-18T08:42:21.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-数据类型（8-0-版）"><a href="#MySQL-数据类型（8-0-版）" class="headerlink" title="MySQL 数据类型（8.0 版）"></a>MySQL 数据类型（8.0 版）</h2><p>列的数据类型定义了该列可以保存的值：整数、字符、货币、日期和时间、二进制等。<br>数据库表中的<u>每一列都必须有名称和数据类型</u>。<br>SQL 开发人员必须<strong>在创建表时决定将在每列中存储的数据类型</strong>。<br>数据类型是 SQL 了解每列中预期的数据类型的指南，它还标识 SQL 将如何与存储的数据交互。<br>在 MySQL 中有三种主要的数据类型：<strong>字符串、数字、日期和时间</strong>。</p><h3 id="字符串数据类型"><a href="#字符串数据类型" class="headerlink" title="字符串数据类型"></a>字符串数据类型</h3><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>CHAR(size)</td><td>一个固定长度的字符串（可以包含字母、数字和特殊字符）。 <em>size</em> 参数指定以字符为单位的列长度 - 可以从 0 到 255。默认为 1</td></tr><tr><td>VARCHAR(size)</td><td>可变长度字符串（可以包含字母、数字和特殊字符）。 <em>size</em> 参数指定字符的最大列长度 - 可以从 0 到 65535</td></tr><tr><td>BINARY(size)</td><td>等于 CHAR()，但存储二进制字节字符串。 <em>size</em> 参数以字节为单位指定列长度。默认为 1</td></tr><tr><td>VARBINARY(size)</td><td>等于 VARCHAR()，但存储二进制字节字符串。 <em>size</em> 参数指定最大列长度（以字节为单位）。</td></tr><tr><td>TINYBLOB</td><td>对于 BLOB（二进制大对象）。最大长度：255 字节</td></tr><tr><td>TINYTEXT</td><td>保存一个最大长度为 255 个字符的字符串</td></tr><tr><td>TEXT(size)</td><td>保存一个最大长度为 65,535 字节的字符串</td></tr><tr><td>BLOB(size)</td><td>对于 BLOB（二进制大对象）。最多可容纳 65,535 字节的数据</td></tr><tr><td>MEDIUMTEXT</td><td>保存最大长度为 16,777,215 个字符的字符串</td></tr><tr><td>MEDIUMBLOB</td><td>对于 BLOB（二进制大对象）。最多可容纳 16,777,215 字节的数据</td></tr><tr><td>LONGTEXT</td><td>保存最大长度为 4,294,967,295 个字符的字符串</td></tr><tr><td>LONGBLOB</td><td>对于 BLOB（二进制大对象）。最多可容纳 4,294,967,295 字节的数据</td></tr><tr><td>ENUM(val1, val2, val3, …)</td><td>只能有一个值的字符串对象，从可能值列表中选择。您最多可以在一个 ENUM 列表中列出 65535 个值。如果插入的值不在列表中，则将插入一个空白值。 这些值按您输入的顺序排序</td></tr><tr><td>SET(val1, val2, val3, …)</td><td>可以有 0 个或多个值的字符串对象，从可能的值列表中选择。一个 SET 列表中最多可以列出 64 个值</td></tr></tbody></table><h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h3><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>BIT(<em>size</em>)</td><td>位值类型。每个值的位数在 <em>size</em> 中指定。 <em>size</em> 参数可以保存从 1 到 64 的值。<em>size</em> 的默认值为 1。</td></tr><tr><td>TINYINT(<em>size</em>)</td><td>一个非常小的整数。有符号范围是-128 到 127。无符号范围是 0 到 255。<em>size</em> 参数指定最大显示宽度（即 255）</td></tr><tr><td>BOOL</td><td>零被认为是false，非零值被认为是true。</td></tr><tr><td>BOOLEAN</td><td>等同 BOOL</td></tr><tr><td>SMALLINT(<em>size</em>)</td><td>一个小整数。有符号范围是 -32768 到 32767。无符号范围是 0 到 65535。<em>size</em> 参数指定最大显示宽度（即 255）</td></tr><tr><td>MEDIUMINT(<em>size</em>)</td><td>一个中等整数。有符号范围是 -8388608 到 8388607。无符号范围是 0 到 16777215。<em>size</em> 参数指定最大显示宽度（即 255）</td></tr><tr><td>INT(<em>size</em>)</td><td>一个中等整数。有符号范围是 -2147483648 到 2147483647。无符号范围是 0 到 4294967295。<em>size</em> 参数指定最大显示宽度（即 255）</td></tr><tr><td>INTEGER(<em>size</em>)</td><td>等于 INT(size)</td></tr><tr><td>BIGINT(<em>size</em>)</td><td>一个大整数。有符号范围是-9223372036854775808到9223372036854775807。无符号范围是0到18446744073709551615。_size_参数指定最大显示宽度（即255）</td></tr><tr><td>FLOAT(<em>size</em>, <em>d</em>)</td><td>一个浮点数。 <em>size</em> 中指定了总位数。小数点后的位数在 <em>d</em> 参数中指定。此语法在 MySQL 8.0.17 中已弃用，并将在未来的 MySQL 版本中删除</td></tr><tr><td>FLOAT(<em>p</em>)</td><td>一个浮点数。 MySQL 使用 <em>p</em> 值来确定是使用 FLOAT 还是 DOUBLE 作为结果数据类型。如果 <em>p</em> 是从 0 到 24，则数据类型变为 FLOAT()。如果 <em>p</em> 是从 25 到 53，则数据类型变为 DOUBLE()</td></tr><tr><td>DOUBLE(<em>size</em>, <em>d</em>)</td><td>一个正常大小的浮点数。 <em>size</em> 中指定了总位数。 _d_参数中指定小数点后的位数</td></tr><tr><td>双精度(<em>size</em>, <em>d</em>)</td><td></td></tr><tr><td>DECIMAL(<em>size</em>, <em>d</em>)</td><td>一个精确的定点数。 <em>size</em> 中指定了总位数。小数点后的位数在 <em>d</em> 参数中指定。 <em>size</em> 的最大数为 65。<em>d</em> 的最大数为 30。<em>size</em> 的默认值为 10。&lt; em&gt;d 为 0。</td></tr><tr><td>DEC(<em>size</em>, <em>d</em>)</td><td>等于 DECIMAL(size,d)</td></tr><tr><td><strong>注意：</strong> 所有数字数据类型都可能有一个额外的选项：UNSIGNED 或 ZEROFILL。如果添加 UNSIGNED 选项，MySQL 不允许该列使用负值。如果添加 ZEROFILL 选项，MySQL 还会自动将 UNSIGNED 属性添加到列中。</td><td></td></tr></tbody></table><h3 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h3><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>日期。格式：YYYY-MM-DD。支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’</td></tr><tr><td>DATETIME(<em>fsp</em>)</td><td>日期和时间组合。格式：YYYY-MM-DD hh:mm:ss。支持的范围是从”1000-01-01 00:00:00”到”9999-12-31 23:59:59”。 在列定义中添加 DEFAULT 和 ON UPDATE 以获得自动初始化并更新到当前日期和时间</td></tr><tr><td>TIMESTAMP(<em>fsp</em>)</td><td>时间戳。 TIMESTAMP 值存储为自 Unix 纪元 (‘1970-01-01 00:00:00’ UTC) 以来的秒数。格式：YYYY-MM-DD hh:mm:ss。支持的范围是从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC。 可以使用列定义中的 DEFAULT CURRENT_TIMESTAMP 和 ON UPDATE CURRENT_TIMESTAMP 指定自动初始化和更新到当前日期和时间</td></tr><tr><td>TIME(<em>fsp</em>)</td><td>一次。格式：hh:mm:ss。支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’</td></tr><tr><td>YEAR</td><td>四位数格式的年份。允许采用四位数格式的值：1901 到 2155 和 0000。  <br>MySQL 8.0 不支持两位数格式的年份。</td></tr></tbody></table><h1 id="MySQL-函数"><a href="#MySQL-函数" class="headerlink" title="MySQL 函数"></a>MySQL 函数</h1><p>MySQL 有很多内置函数。<br>此参考包含字符串、数字、日期和 MySQL 中的一些高级函数。</p><h2 id="MySQL-字符串函数"><a href="#MySQL-字符串函数" class="headerlink" title="MySQL 字符串函数"></a>MySQL 字符串函数</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_ascii.html">ASCII</a></td><td>返回特定字符的 ASCII 值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_char_length.html">CHAR_LENGTH</a></td><td>返回字符串的长度（以字符为单位）</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_character_length.html">CHARACTER_LENGTH</a></td><td>返回字符串的长度（以字符为单位）</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_concat.html">CONCAT</a></td><td>将两个或多个表达式加在一起</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_concat_ws.html">CONCAT_WS</a></td><td>使用分隔符将两个或多个表达式添加在一起</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_field.html">FIELD</a></td><td>返回值在值列表中的索引位置</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_find_in_set.html">FIND_IN_SET</a></td><td>返回字符串在字符串列表中的位置</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_format.html">FORMAT</a></td><td>将数字格式化为类似”#,###,###.##”的格式，四舍五入到指定的小数位数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_insert.html">INSERT</a></td><td>在字符串中的指定位置插入字符串，并插入一定数量的字符</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_instr.html">INSTR</a></td><td>返回一个字符串在另一个字符串中第一次出现的位置</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_lcase.html">LCASE</a></td><td>将字符串转换为小写</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_left.html">LEFT</a></td><td>从字符串中提取多个字符（从左开始）</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_length.html">LENGTH</a></td><td>返回字符串的长度（以字节为单位）</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_locate.html">LOCATE</a></td><td>返回字符串中子字符串第一次出现的位置</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_lower.html">LOWER</a></td><td>将字符串转换为小写</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_lpad.html">LPAD</a></td><td>用另一个字符串向左填充一个字符串，达到一定的长度</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_ltrim.html">LTRIM</a></td><td>从字符串中删除前导空格</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_mid.html">MID</a></td><td>从字符串中提取子字符串（从任意位置开始）</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_position.html">POSITION</a></td><td>返回字符串中子字符串第一次出现的位置</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_repeat.html">REPEAT</a></td><td>按照指定的次数重复一个字符串</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_replace.html">REPLACE</a></td><td>用新的子字符串替换字符串中所有出现的子字符串</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_reverse.html">REVERSE</a></td><td>反转一个字符串并返回结果</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_right.html">RIGHT</a></td><td>从字符串中提取多个字符（从右开始）</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_rpad.html">RPAD</a></td><td>用另一个字符串右填充一个字符串到一定长度</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_rtrim.html">RTRIM</a></td><td>从字符串中删除尾随空格</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_space.html">SPACE</a></td><td>返回指定空格数的字符串</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_strcmp.html">STRCMP</a></td><td>比较两个字符串</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_substr.html">SUBSTR</a></td><td>从字符串中提取子字符串（从任意位置开始）</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_substring.html">SUBSTRING</a></td><td>从字符串中提取子字符串（从任意位置开始）</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_substring_index.html">SUBSTRING_INDEX</a></td><td>在出现指定数量的分隔符之前返回字符串的子字符串</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_trim.html">TRIM</a></td><td>从字符串中删除前导和尾随空格</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_ucase.html">UCASE</a></td><td>将字符串转换为大写</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_upper.html">UPPER</a></td><td>将字符串转换为大写</td></tr></tbody></table><h2 id="MySQL-数值函数"><a href="#MySQL-数值函数" class="headerlink" title="MySQL 数值函数"></a>MySQL 数值函数</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_abs.html">ABS</a></td><td>返回一个数字的绝对值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_acos.html">ACOS</a></td><td>返回数字的反余弦</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_asin.html">ASIN</a></td><td>返回数字的反正弦</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_atan.html">ATAN</a></td><td>返回一个或两个数字的反正切</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_atan2.html">ATAN2</a></td><td>返回两个数的反正切</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_avg.html">AVG</a></td><td>返回表达式的平均值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_ceil.html">CEIL</a></td><td>将 &gt;&#x3D; 的最小整数值返回为数字</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_ceiling.html">CEILING</a></td><td>将 &gt;&#x3D; 的最小整数值返回为数字</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_cos.html">COS</a></td><td>返回数字的余弦</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_cot.html">COT</a></td><td>返回数字的余切</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_count.html">COUNT</a></td><td>返回选择查询返回的记录数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_degrees.html">DEGREES</a></td><td>将弧度值转换为度数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_div.html">DIV</a></td><td>用于整数除法</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_exp.html">EXP</a></td><td>返回 e 的指定数次方</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_floor.html">FLOOR</a></td><td>将 &lt;&#x3D; 的最大整数值返回为数字</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_greatest.html">GREATEST</a></td><td>返回参数列表的最大值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_least.html">LEAST</a></td><td>返回参数列表中的最小值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_ln.html">LN</a></td><td>返回数字的自然对数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_log.html">LOG</a></td><td>返回一个数字的自然对数，或者一个数字的对数到指定底数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_log10.html">LOG10</a></td><td>返回一个以 10 为底的自然对数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_log2.html">LOG2</a></td><td>返回以 2 为底的数字的自然对数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_max.html">MAX</a></td><td>返回一组值中的最大值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_min.html">MIN</a></td><td>返回一组值中的最小值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_mod.html">MOD</a></td><td>返回一个数除以另一个数的余数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_pi.html">PI</a></td><td>返回 PI 的值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_pow.html">POW</a></td><td>返回一个数字的另一个数字的幂</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_power.html">POWER</a></td><td>返回一个数字的另一个数字的幂</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_radians.html">RADIANS</a></td><td>将度数转换为弧度</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_rand.html">RAND</a></td><td>返回一个随机数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_round.html">ROUND</a></td><td>将数字四舍五入到指定的小数位数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_sign.html">SIGN</a></td><td>返回一个数字的符号</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_sin.html">SIN</a></td><td>返回数字的正弦</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_sqrt.html">SQRT</a></td><td>返回数字的平方根</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_sum.html">SUM</a></td><td>计算一组值的总和</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_tan.html">TAN</a></td><td>返回数字的正切</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_truncate.html">TRUNCATE</a></td><td>将数字截断到指定的小数位数</td></tr></tbody></table><h2 id="MySQL-日期函数"><a href="#MySQL-日期函数" class="headerlink" title="MySQL 日期函数"></a>MySQL 日期函数</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_adddate.html">ADDDATE</a></td><td>将时间&#x2F;日期间隔添加到日期，然后返回日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_addtime.html">ADDTIME</a></td><td>将时间间隔添加到时间&#x2F;日期时间，然后返回时间&#x2F;日期时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_curdate.html">CURDATE</a></td><td>返回当前日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_current_date.html">CURRENT_DATE</a></td><td>返回当前日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_current_time.html">CURRENT_TIME</a></td><td>返回当前时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_current_timestamp.html">CURRENT_TIMESTAMP</a></td><td>返回当前日期和时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_curtime.html">CURTIME</a></td><td>返回当前时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_date.html">DATE</a></td><td>从日期时间表达式中提取日期部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_datediff.html">DATEDIFF</a></td><td>返回两个日期值之间的天数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_date_add.html">DATE_ADD</a></td><td>将时间&#x2F;日期间隔添加到日期，然后返回日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_date_format.html">DATE_FORMAT</a></td><td>格式化日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_date_sub.html">DATE_SUB</a></td><td>从日期中减去时间&#x2F;日期间隔，然后返回日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_day.html">DAY</a></td><td>返回给定日期的月份日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_dayname.html">DAYNAME</a></td><td>返回给定日期的工作日名称</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_dayofmonth.html">DAYOFMONTH</a></td><td>返回给定日期的月份日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_dayofweek.html">DAYOFWEEK</a></td><td>返回给定日期的工作日索引</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_dayofyear.html">DAYOFYEAR</a></td><td>返回给定日期的一年中的哪一天</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_extract.html">EXTRACT</a></td><td>从给定日期提取部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_from_days.html">FROM_DAYS</a></td><td>从数字日期值返回日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_hour.html">HOUR</a></td><td>返回给定日期的小时部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_last_day.html">LAST_DAY</a></td><td>提取给定日期当月的最后一天</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_localtime.html">LOCALTIME</a></td><td>返回当前日期和时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_localtimestamp.html">LOCALTIMESTAMP</a></td><td>返回当前日期和时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_makedate.html">MAKEDATE</a></td><td>根据年份和天数值创建并返回日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_maketime.html">MAKETIME</a></td><td>根据小时、分钟和秒值创建并返回时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_microsecond.html">MICROSECOND</a></td><td>返回时间&#x2F;日期时间的微秒部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_minute.html">MINUTE</a></td><td>返回时间&#x2F;日期时间的分钟部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_month.html">MONTH</a></td><td>返回给定日期的月份部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_monthname.html">MONTHNAME</a></td><td>返回给定日期的月份名称</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_now.html">NOW</a></td><td>返回当前日期和时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_period_add.html">PERIOD_ADD</a></td><td>将指定的月数添加到期间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_period_diff.html">PERIOD_DIFF</a></td><td>返回两个句点之间的差</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_quarter.html">QUARTER</a></td><td>返回给定日期值的一年中的季度</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_second.html">SECOND</a></td><td>返回时间&#x2F;日期时间的秒部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_sec_to_time.html">SEC_TO_TIME</a></td><td>根据指定的秒数返回一个时间值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_str_to_date.html">STR_TO_DATE</a></td><td>根据字符串和格式返回日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_subdate.html">SUBDATE</a></td><td>从日期中减去时间&#x2F;日期间隔，然后返回日期</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_subtime.html">SUBTIME</a></td><td>从日期时间中减去一个时间间隔，然后返回时间&#x2F;日期时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_sysdate.html">SYSDATE</a></td><td>返回当前日期和时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_time.html">TIME</a></td><td>从给定时间&#x2F;日期时间中提取时间部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_time_format.html">TIME_FORMAT</a></td><td>按指定格式格式化时间</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_time_to_sec.html">TIME_TO_SEC</a></td><td>将时间值转换为秒</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_timediff.html">TIMEDIFF</a></td><td>返回两个时间&#x2F;日期时间表达式之间的差异</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_timestamp.html">TIMESTAMP</a></td><td>根据日期或日期时间值返回一个日期时间值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_to_days.html">TO_DAYS</a></td><td>返回日期和日期”0000-00-00”之间的天数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_week.html">WEEK</a></td><td>返回给定日期的周数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_weekday.html">WEEKDAY</a></td><td>返回给定日期的工作日编号</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_weekofyear.html">WEEKOFYEAR</a></td><td>返回给定日期的周数</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_year.html">YEAR</a></td><td>返回给定日期的年份部分</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_yearweek.html">YEARWEEK</a></td><td>返回给定日期的年和周数</td></tr></tbody></table><h2 id="MySQL-高级函数"><a href="#MySQL-高级函数" class="headerlink" title="MySQL 高级函数"></a>MySQL 高级函数</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_bin.html">BIN</a></td><td>返回数字的二进制表示</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_binary.html">BINARY</a></td><td>将值转换为二进制字符串</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_case.html">CASE</a></td><td>遍历条件并在满足第一个条件时返回一个值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_cast.html">CAST</a></td><td>将（任何类型的）值转换为指定的数据类型</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_coalesce.html">COALESCE</a></td><td>返回列表中的第一个非空值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_connection_id.html">CONNECTION_ID</a></td><td>返回当前连接的唯一连接 ID</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_conv.html">CONV</a></td><td>将数字从一种数字基系统转换为另一种数字系统</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_convert.html">CONVERT</a></td><td>将值转换为指定的数据类型或字符集</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_current_user.html">CURRENT_USER</a></td><td>返回服务器用来验证当前客户端的 MySQL 帐户的用户名和主机名</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_database.html">DATABASE</a></td><td>返回当前数据库的名称</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_if.html">IF</a></td><td>如果条件为 TRUE，则返回一个值，如果条件为 FALSE，则返回另一个值</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_ifnull.html">IFNULL</a></td><td>如果表达式为NULL，则返回指定值，否则返回表达式</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_isnull.html">ISNULL</a></td><td>根据表达式是否为 NULL 返回 1 或 0</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_last_insert_id.html">LAST_INSERT_ID</a></td><td>返回表中已插入或更新的最后一行的 AUTO_INCREMENT id</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_nullif.html">NULLIF</a></td><td>比较两个表达式，如果相等则返回 NULL。否则返回第一个表达式</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_session_user.html">SESSION_USER</a></td><td>返回当前 MySQL 用户名和主机名</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_system_user.html">SYSTEM_USER</a></td><td>返回当前 MySQL 用户名和主机名</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_user.html">USER</a></td><td>返回当前 MySQL 用户名和主机名</td></tr><tr><td><a href="https://www.w3schools.cn/mysql/func_mysql_version.html">VERSION</a></td><td>返回 MySQL 数据库的当前版本</td></tr></tbody></table><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p><strong>注：</strong> 本文参考 <a href="https://www.w3schools.cn/mysql/">MySQL 教程 (w3schools.cn)</a>需了解更详细内容可以点击链接前往</p>]]></content>
    
    
    <summary type="html">SQL 开发人员必须在创建表时决定将在每列中存储的数据类型。数据类型是 SQL 了解每列中预期的数据类型的指南，它还标识 SQL 将如何与存储的数据交互。在 MySQL 中有三种主要的数据类型：字符串、数字、日期和时间。MySQL 有很多内置函数。此参考包含字符串、数字、日期和 MySQL 中的一些高级函数。</summary>
    
    
    
    <category term="数据库" scheme="https://fanxing28.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="SQL" scheme="https://fanxing28.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的SQL语句</title>
    <link href="https://fanxing28.github.io/2024/02/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84SQL%E8%AF%AD%E5%8F%A5/"/>
    <id>https://fanxing28.github.io/2024/02/18/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84SQL%E8%AF%AD%E5%8F%A5/</id>
    <published>2024-02-18T02:15:00.000Z</published>
    <updated>2024-02-19T01:39:07.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-MySQL"><a href="#什么是-MySQL" class="headerlink" title="什么是 MySQL?"></a>什么是 MySQL?</h3><ul><li>MySQL 是一个<font color="#ff0000">关系型数据库管理系统</font></li><li>MySQL 是<font color="#ff0000">开源</font>的</li><li>MySQL 是<font color="#ff0000">免费</font>的</li><li>MySQL 是小型和大型应用程序的理想选择</li><li>MySQL 非常快速、可靠、可扩展且易于使用</li><li>MySQL 是<font color="#ff0000">跨平台</font>的</li><li>MySQL 符合 ANSI SQL 标准</li><li>MySQL 于 1995 年首次发布</li><li>MySQL 由 Oracle Corporation 开发、分发和支持</li><li>MySQL 以联合创始人 Monty Widenius 的女儿命名：My</li></ul><h3 id="什么是-SQL"><a href="#什么是-SQL" class="headerlink" title="什么是 SQL?"></a>什么是 SQL?</h3><p>SQL 是<strong>处理关系数据库的标准语言</strong>。<br>SQL <u>用于插入、搜索、更新和删除数据库记录</u>。<br><strong>注意点：</strong> <span style="background:#ff4d4f"><span style="background:rgba(173, 239, 239, 0.55)">SQL 关键字不区分大小写</span></span></p><h2 id="一些最重要的-SQL-命令"><a href="#一些最重要的-SQL-命令" class="headerlink" title="一些最重要的 SQL 命令"></a>一些最重要的 SQL 命令</h2><ul><li><code>SELECT</code> - 从数据库中查询提取数据</li><li><code>UPDATE</code> - 更新数据库中的数据</li><li><code>DELETE</code> - 从数据库中删除数据</li><li><code>INSERT INTO</code> - 将新数据插入数据库</li><li><code>CREATE DATABASE</code> - 创建一个新的数据库</li><li><code>ALTER DATABASE</code> - 修改数据库</li><li><code>CREATE TABLE</code> - 创建一个新表</li><li><code>ALTER TABLE</code> - 修改表</li><li><code>DROP TABLE</code> - 删除一个表</li><li><code>CREATE INDEX</code> - 创建索引（搜索键）</li><li><code>DROP INDEX</code> - 删除一个索引</li></ul><h2 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h2><p><code>SELECT</code> 语句用于从数据库中选择数据。<br>返回的数据存储在一个结果表中，称为结果集。</p><h3 id="SELECT-语法"><a href="#SELECT-语法" class="headerlink" title="SELECT 语法"></a>SELECT 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column1_, _column2, ..._  </span><br><span class="line">FROM _table_name_;</span><br></pre></td></tr></table></figure><p>这里，column1、column2、…是您要从中选择数据的表的字段名称。</p><h3 id="SELECT-示例"><a href="#SELECT-示例" class="headerlink" title="SELECT 示例"></a>SELECT 示例</h3><h4 id="SELECT-列示例"><a href="#SELECT-列示例" class="headerlink" title="SELECT 列示例"></a>SELECT 列示例</h4><p><strong>示例：</strong> 从”Customers”表中选择 CustomerName, City, Country 列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CustomerName, City, Country FROM Customers;</span><br></pre></td></tr></table></figure><h4 id="SELECT-示例-1"><a href="#SELECT-示例-1" class="headerlink" title="SELECT * 示例"></a>SELECT * 示例</h4><p><strong>示例：</strong> 从”客户”表中选择所有列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers;</span><br></pre></td></tr></table></figure><h3 id="SELECT-DISTINCT-语句"><a href="#SELECT-DISTINCT-语句" class="headerlink" title="SELECT DISTINCT 语句"></a>SELECT DISTINCT 语句</h3><p><code>SELECT DISTINCT</code> 语句用于仅返回不同（不同）的值。<br>在一个表中，一列通常包含许多重复值； 有时您只想列出不同的（不同的）值。</p><h4 id="SELECT-DISTINCT-语法"><a href="#SELECT-DISTINCT-语法" class="headerlink" title="SELECT DISTINCT 语法"></a>SELECT DISTINCT 语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT _column1_, _column2, ..._  </span><br><span class="line">FROM _table_name_;</span><br></pre></td></tr></table></figure><h3 id="DISTINCT-示例"><a href="#DISTINCT-示例" class="headerlink" title="DISTINCT 示例"></a>DISTINCT 示例</h3><h4 id="不带-DISTINCT-的-SELECT-示例"><a href="#不带-DISTINCT-的-SELECT-示例" class="headerlink" title="不带 DISTINCT 的 SELECT 示例"></a>不带 DISTINCT 的 SELECT 示例</h4><p><strong>示例：</strong> 从”客户”表的”地区”列中选择所有（包括重复项）值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Country FROM Customers;</span><br></pre></td></tr></table></figure><h4 id="SELECT-DISTINCT-示例"><a href="#SELECT-DISTINCT-示例" class="headerlink" title="SELECT DISTINCT 示例"></a>SELECT DISTINCT 示例</h4><p><strong>示例1：</strong> 仅从”Customers”表的”Country”列中选择 DISTINCT 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT Country FROM Customers;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 计算并返回”Customers”表中不同（不同）地区的数量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT Country) FROM Customers;</span><br></pre></td></tr></table></figure><h2 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h2><p><code>WHERE</code> 子句用于过滤记录。<br>仅用于提取满足指定条件的记录。</p><h3 id="WHERE-语法"><a href="#WHERE-语法" class="headerlink" title="WHERE 语法"></a>WHERE 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column1_, _column2, ..._  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>WHERE</code> 子句不仅用在 <code>SELECT</code> 语句中 ，也用于<code>UPDATE</code>、<code>DELETE</code>等！</p><h3 id="WHERE-子句示例"><a href="#WHERE-子句示例" class="headerlink" title="WHERE 子句示例"></a>WHERE 子句示例</h3><p><strong>示例：</strong> 从”墨西哥”中选择所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE Country = &#x27;Mexico&#x27;;</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong> SQL 需要在文本值周围加上单引号（大多数数据库系统也允许使用双引号）。但是，数字字段不应用引号引起来</p><h3 id="WHERE-子句中的运算符"><a href="#WHERE-子句中的运算符" class="headerlink" title="WHERE 子句中的运算符"></a>WHERE 子句中的运算符</h3><p><code>WHERE</code> 子句中可以使用以下运算符：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>相等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr><tr><td>&lt;&gt;</td><td>不相等。 <strong>注意：</strong> 在某些 SQL 版本中，此运算符可能写为 !&#x3D;</td></tr><tr><td>BETWEEN</td><td>一定范围内</td></tr><tr><td>LIKE</td><td>搜索模式</td></tr><tr><td>IN</td><td>为一列指定多个可能的值</td></tr></tbody></table><h2 id="AND、OR-和-NOT-运算符"><a href="#AND、OR-和-NOT-运算符" class="headerlink" title="AND、OR 和 NOT 运算符"></a>AND、OR 和 NOT 运算符</h2><p><code>WHERE</code> 子句可以与 <code>AND</code>、 <code>结合使用 OR</code> 和 <code>NOT</code> 运算符。<br><code>AND</code> 和 <code>OR</code> 运算符用于根据多个条件过滤记录： </p><ul><li>如果由 <code>AND</code> 分隔的所有条件都为 TRUE，则 <code>AND</code> 运算符会显示一条记录。</li><li>如果由 <code>OR</code> 分隔的任何条件为 TRUE，则 <code>OR</code> 运算符会显示一条记录。<br>如果条件不为真，<code>NOT</code> 运算符会显示一条记录。</li></ul><h3 id="AND-语法"><a href="#AND-语法" class="headerlink" title="AND 语法"></a>AND 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column1_, _column2, ..._  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition1_ AND _condition2_ AND _condition3 ..._;</span><br></pre></td></tr></table></figure><h3 id="OR-语法"><a href="#OR-语法" class="headerlink" title="OR 语法"></a>OR 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column1_, _column2, ..._  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition1_ OR _condition2_ OR _condition3 ..._;</span><br></pre></td></tr></table></figure><h3 id="NOT-语法"><a href="#NOT-语法" class="headerlink" title="NOT 语法"></a>NOT 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column1_, _column2, ..._  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE NOT _condition_;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="AND-示例"><a href="#AND-示例" class="headerlink" title="AND 示例"></a>AND 示例</h4><p><strong>示例：</strong> 从”Customers”中选择Country为”Germany”且城市为”Berlin”的所有字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE Country = &#x27;Germany&#x27; AND City = &#x27;Berlin&#x27;;</span><br></pre></td></tr></table></figure><h4 id="OR-示例"><a href="#OR-示例" class="headerlink" title="OR 示例"></a>OR 示例</h4><p><strong>示例：</strong> 从”Customers”中选择所有 country 为”Germany”或”Spain”的字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE Country = &#x27;Germany&#x27; OR Country = &#x27;Spain&#x27;;</span><br></pre></td></tr></table></figure><h4 id="NOT-示例"><a href="#NOT-示例" class="headerlink" title="NOT 示例"></a>NOT 示例</h4><p><strong>示例：</strong> 从”Customers”中选择所有 Country 不是”Germany”的字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE NOT Country = &#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure><h4 id="结合-AND、OR-和-NOT"><a href="#结合-AND、OR-和-NOT" class="headerlink" title="结合 AND、OR 和 NOT"></a>结合 AND、OR 和 NOT</h4><p>您还可以组合 <code>AND</code>、<code>OR</code> 和  <code>NOT</code> 运算符。<br><strong>示例1：</strong> 从”Customers”中选择所有字段，其中 Country 为”Germany”且城市必须为”Berlin”或”Stuttgart”（使用括号构成复杂的表达式）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE Country = &#x27;Germany&#x27; AND (City = &#x27;Berlin&#x27; OR City = &#x27;Stuttgart&#x27;);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 从”Customers”中选择所有 Country 不是”Germany”和”USA”的字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE NOT Country = &#x27;Germany&#x27; AND NOT Country = &#x27;USA&#x27;;</span><br></pre></td></tr></table></figure><h2 id="ORDER-BY-关键字"><a href="#ORDER-BY-关键字" class="headerlink" title="ORDER BY 关键字"></a>ORDER BY 关键字</h2><p><code>ORDER BY</code> 关键字用于对结果集进行升序或降序排序。<br><code>ORDER BY</code> 关键字<font color="#ff0000">默认按升序</font>对记录进行排序。 要按降序对记录进行排序，请使用 <code>DESC</code> 关键字。</p><h3 id="ORDER-BY-语法"><a href="#ORDER-BY-语法" class="headerlink" title="ORDER BY 语法"></a>ORDER BY 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column1_, _column2, ..._  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">ORDER BY _column1, column2, ..._ ASC|DESC;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-示例"><a href="#ORDER-BY-示例" class="headerlink" title="ORDER BY 示例"></a>ORDER BY 示例</h3><p><strong>示例：</strong> 从”Customers”表中选择所有客户，按”Country”列排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">ORDER BY Country;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-DESC-示例"><a href="#ORDER-BY-DESC-示例" class="headerlink" title="ORDER BY DESC 示例"></a>ORDER BY DESC 示例</h3><p><strong>示例：</strong> 从”Customers”表中选择所有客户，按”Country”列降序排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">ORDER BY Country DESC;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-多列示例"><a href="#ORDER-BY-多列示例" class="headerlink" title="ORDER BY 多列示例"></a>ORDER BY 多列示例</h3><p><strong>示例：</strong> 从”客户”表中选择所有客户，按”地区”和”客户名称”列排序。 这意味着它按地区排序，但如果某些行具有相同的地区，则按客户名称对其进行排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">ORDER BY Country, CustomerName;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-多列示例-2"><a href="#ORDER-BY-多列示例-2" class="headerlink" title="ORDER BY 多列示例 2"></a>ORDER BY 多列示例 2</h3><p><strong>示例：</strong> 从”Customers”表中选择所有客户，按”Country”升序排序，按”CustomerName”列降序排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">ORDER BY Country ASC, CustomerName DESC;</span><br></pre></td></tr></table></figure><h2 id="INSERT-INTO-语句"><a href="#INSERT-INTO-语句" class="headerlink" title="INSERT INTO 语句"></a>INSERT INTO 语句</h2><p><code>INSERT INTO</code> 语句用于在表中插入新记录。</p><h3 id="INSERT-INTO-语法"><a href="#INSERT-INTO-语法" class="headerlink" title="INSERT INTO 语法"></a>INSERT INTO 语法</h3><p><code>INSERT INTO</code>语句有两种写法：</p><ol><li>指定列名和要插入的值：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO _table_name_ (_column1_, _column2_, _column3_, ...)  </span><br><span class="line">VALUES (_value1_, _value2_, _value3_, ...);</span><br></pre></td></tr></table></figure></li><li>如果要为表的所有列添加值，则无需在 SQL 查询中指定列名。 但是，请确保值的顺序与表中列的顺序相同。 在这里，<code>INSERT INTO</code> 语法如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO _table_name_  </span><br><span class="line">VALUES (_value1_, _value2_, _value3_, ...);</span><br></pre></td></tr></table></figure></li></ol><h3 id="仅在指定列中插入数据"><a href="#仅在指定列中插入数据" class="headerlink" title="仅在指定列中插入数据"></a>仅在指定列中插入数据</h3><p>也可以只在特定列中插入数据。<br><strong>示例：</strong> 将插入一条新记录，但只在”CustomerName”、”City”和”Country”中插入数据，列（CustomerID 将自动更新）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Customers (CustomerName, City, Country)  </span><br><span class="line">VALUES (&#x27;Cardinal&#x27;, &#x27;Stavanger&#x27;, &#x27;Norway&#x27;);</span><br></pre></td></tr></table></figure><h2 id="NULL-值"><a href="#NULL-值" class="headerlink" title="NULL 值"></a>NULL 值</h2><h3 id="什么是-NULL-空值"><a href="#什么是-NULL-空值" class="headerlink" title="什么是 NULL 空值?"></a>什么是 NULL 空值?</h3><p>具有 NULL 值的字段是没有值的字段。<br>如果表中的字段是可选的，则可以插入新记录或更新记录而不向该字段添加值。 然后，该字段将被保存为 NULL 值。<br><strong>注意：</strong> NULL 值不同于零值或包含空格的字段。 具有 NULL 值的字段是在创建记录期间留空的字段！</p><h3 id="如何测试-NULL-值"><a href="#如何测试-NULL-值" class="headerlink" title="如何测试 NULL 值?"></a>如何测试 NULL 值?</h3><p>无法使用比较运算符（例如 &#x3D;、&lt; 或 &lt;&gt;）测试 NULL 值。<br>我们将使用 <code>IS NULL</code> 和 <code>IS NOT NULL</code> 运算符。</p><h3 id="IS-NULL-语法"><a href="#IS-NULL-语法" class="headerlink" title="IS NULL 语法"></a>IS NULL 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_names  </span><br><span class="line">_FROM _table_name_  </span><br><span class="line">WHERE _column_name_ IS NULL;</span><br></pre></td></tr></table></figure><h3 id="IS-NOT-NULL-语法"><a href="#IS-NOT-NULL-语法" class="headerlink" title="IS NOT NULL 语法"></a>IS NOT NULL 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_names  </span><br><span class="line">_FROM _table_name_  </span><br><span class="line">WHERE _column_name_ IS NOT NULL;</span><br></pre></td></tr></table></figure><h3 id="IS-NULL-运算符"><a href="#IS-NULL-运算符" class="headerlink" title="IS NULL 运算符"></a>IS NULL 运算符</h3><p><code>IS NULL</code> 运算符用于测试空值（NULL 值）。<br><strong>示例：</strong> 列出了”地址”字段中具有 NULL 值的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT CustomerName, ContactName, Address  </span><br><span class="line">FROM Customers  </span><br><span class="line">WHERE Address IS NULL;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong> 始终使用 IS NULL 来查找 NULL 值。</p><h3 id="IS-NOT-NULL-运算符"><a href="#IS-NOT-NULL-运算符" class="headerlink" title="IS NOT NULL 运算符"></a>IS NOT NULL 运算符</h3><p><code>IS NOT NULL</code> 运算符用于测试非空值（NOT NULL 值）。<br><strong>示例：</strong> 列出了”地址”字段中具有值的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT CustomerName, ContactName, Address  </span><br><span class="line">FROM Customers  </span><br><span class="line">WHERE Address IS NOT NULL;</span><br></pre></td></tr></table></figure><h2 id="UPDATE-语句"><a href="#UPDATE-语句" class="headerlink" title="UPDATE 语句"></a>UPDATE 语句</h2><p><code>UPDATE</code>语句用于修改表中已有的记录。</p><h3 id="UPDATE-语法"><a href="#UPDATE-语法" class="headerlink" title="UPDATE 语法"></a>UPDATE 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE _table_name_  </span><br><span class="line">SET _column1_ = _value1_, _column2_ = _value2_, ...  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 更新表中的记录时要小心！ 注意 <code>UPDATE</code> 语句中的 <code>WHERE</code> 子句。 <code>WHERE</code> 子句指定应该更新哪些记录。 如果省略<code>WHERE</code>子句，表中的所有记录都会更新！</p><h3 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h3><p><strong>示例：</strong> 将第一个客户 (CustomerID &#x3D; 1) 更新为一个新联系人_和_一个新城市。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Customers  </span><br><span class="line">SET ContactName = &#x27;Alfred Schmidt&#x27;, City = &#x27;Frankfurt&#x27;  </span><br><span class="line">WHERE CustomerID = 1;</span><br></pre></td></tr></table></figure><h3 id="UPDATE-更新多条记录"><a href="#UPDATE-更新多条记录" class="headerlink" title="UPDATE 更新多条记录"></a>UPDATE 更新多条记录</h3><p><code>WHERE</code> 子句决定要更新多少记录。<br><strong>示例：</strong> 将所有地区为”墨西哥”的记录的 PostalCode 更新为 00000：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Customers  </span><br><span class="line">SET PostalCode = 00000  </span><br><span class="line">WHERE Country = &#x27;Mexico&#x27;;</span><br></pre></td></tr></table></figure><h3 id="Update-警告！"><a href="#Update-警告！" class="headerlink" title="Update 警告！"></a>Update 警告！</h3><p><strong>示例：</strong> 更新记录时要小心。 如果省略 <code>WHERE</code> 子句，所有记录都会更新！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Customers  </span><br><span class="line">SET PostalCode = 00000;</span><br></pre></td></tr></table></figure><h2 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h2><p><code>DELETE</code>语句用于删除表中已有的记录。</p><h3 id="DELETE-语法"><a href="#DELETE-语法" class="headerlink" title="DELETE 语法"></a>DELETE 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM _table_name_ WHERE _condition_;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 删除表中的记录时要小心！ 请注意 <code>DELETE</code> 语句中的 <code>WHERE</code> 子句。 <code>WHERE</code> 子句指定应该删除哪些记录。 如果省略<code>WHERE</code>子句，表中的所有记录都会被删除！</p><h3 id="SQL-DELETE-示例"><a href="#SQL-DELETE-示例" class="headerlink" title="SQL DELETE 示例"></a>SQL DELETE 示例</h3><p><strong>示例：</strong> 从”Customers”表中删除客户”Alfreds Futterkiste”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM Customers WHERE CustomerName=&#x27;Alfreds Futterkiste&#x27;;</span><br></pre></td></tr></table></figure><h3 id="删除所有记录"><a href="#删除所有记录" class="headerlink" title="删除所有记录"></a>删除所有记录</h3><p><strong>示例：</strong> 可以在不删除表的情况下删除表中的所有行。 这意味着表结构、属性和索引将保持不变：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM _table_name_;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong> 删除 “Customers” 表中的所有行，不删除表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM Customers;</span><br></pre></td></tr></table></figure><h2 id="LIMIT-限制子句"><a href="#LIMIT-限制子句" class="headerlink" title="LIMIT 限制子句"></a>LIMIT 限制子句</h2><p><code>LIMIT</code> 子句用于指定要返回的记录数。<br><code>LIMIT</code> 子句对包含数千条记录的大型表很有用。 返回大量记录可能会影响性能。</p><h3 id="LIMIT-语法"><a href="#LIMIT-语法" class="headerlink" title="LIMIT 语法"></a>LIMIT 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name  </span><br><span class="line">_WHERE _condition_  </span><br><span class="line">LIMIT _number_;</span><br></pre></td></tr></table></figure><h3 id="限制示例"><a href="#限制示例" class="headerlink" title="限制示例"></a>限制示例</h3><p><strong>示例：</strong> 从”Customers”表中选择前三个记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">LIMIT 3;</span><br></pre></td></tr></table></figure><h3 id="添加-WHERE-子句"><a href="#添加-WHERE-子句" class="headerlink" title="添加 WHERE 子句"></a>添加 WHERE 子句</h3><p><strong>示例：</strong> 从”客户”表中选择前三个记录，其中地区为”德国”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE Country=&#x27;Germany&#x27;  </span><br><span class="line">LIMIT 3;</span><br></pre></td></tr></table></figure><h2 id="MIN-和-MAX-函数"><a href="#MIN-和-MAX-函数" class="headerlink" title="MIN() 和 MAX() 函数"></a>MIN() 和 MAX() 函数</h2><p><code>MIN()</code>函数返回所选列的最小值。<br><code>MAX()</code>函数返回所选列的最大值。</p><h3 id="MIN-语法"><a href="#MIN-语法" class="headerlink" title="MIN() 语法"></a>MIN() 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(_column_name_)  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><h3 id="MAX-语法"><a href="#MAX-语法" class="headerlink" title="MAX() 语法"></a>MAX() 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(_column_name_)  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><h3 id="MIN-示例"><a href="#MIN-示例" class="headerlink" title="MIN() 示例"></a>MIN() 示例</h3><p><strong>示例：</strong> 查找最便宜产品的价格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(Price) AS SmallestPrice  </span><br><span class="line">FROM Products;</span><br></pre></td></tr></table></figure><h3 id="MAX-示例"><a href="#MAX-示例" class="headerlink" title="MAX() 示例"></a>MAX() 示例</h3><p><strong>示例：</strong> 查找最贵产品的价格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(Price) AS LargestPrice  </span><br><span class="line">FROM Products;</span><br></pre></td></tr></table></figure><h2 id="COUNT-、AVG-和-SUM-函数"><a href="#COUNT-、AVG-和-SUM-函数" class="headerlink" title="COUNT()、AVG() 和 SUM() 函数"></a>COUNT()、AVG() 和 SUM() 函数</h2><p><code>COUNT()</code> 函数返回符合指定条件的行数。</p><h3 id="COUNT-语法"><a href="#COUNT-语法" class="headerlink" title="COUNT() 语法"></a>COUNT() 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(_column_name_)  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><p><code>AVG()</code> 函数返回数值列的平均值。</p><h3 id="AVG-语法"><a href="#AVG-语法" class="headerlink" title="AVG() 语法"></a>AVG() 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(_column_name_)  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><p><code>SUM()</code> 函数返回数值列的总和。</p><h3 id="SUM-语法"><a href="#SUM-语法" class="headerlink" title="SUM() 语法"></a>SUM() 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(_column_name_)  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><h3 id="COUNT-示例"><a href="#COUNT-示例" class="headerlink" title="COUNT() 示例"></a>COUNT() 示例</h3><p><strong>示例：</strong> 查找产品的数量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(ProductID)  </span><br><span class="line">FROM Products;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> NULL 值不计算在内。</p><h3 id="AVG-示例"><a href="#AVG-示例" class="headerlink" title="AVG() 示例"></a>AVG() 示例</h3><p><strong>示例：</strong> 查找所有产品的平均价格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(Price)  </span><br><span class="line">FROM Products;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> NULL 值被忽略。</p><h3 id="SUM-示例"><a href="#SUM-示例" class="headerlink" title="SUM() 示例"></a>SUM() 示例</h3><p><strong>示例：</strong> 求 “OrderDetails” 表中 “Quantity” 字段的总和：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(Quantity)  </span><br><span class="line">FROM OrderDetails;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> NULL 值被忽略。</p><h2 id="LIKE-运算符"><a href="#LIKE-运算符" class="headerlink" title="LIKE 运算符"></a>LIKE 运算符</h2><p><code>LIKE</code> 运算符在 <code>WHERE</code> 子句中用于搜索列中的指定模式。<br>有两个通配符经常与 <code>LIKE</code> 运算符一起使用：</p><ul><li>百分号 (%) 表示零个、一个或多个字符</li><li>下划线符号 ( _ ) 代表一个，单个字符<br>百分号和下划线也可以组合使用！</li></ul><h3 id="LIKE-语法"><a href="#LIKE-语法" class="headerlink" title="LIKE 语法"></a>LIKE 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column1, column2, ..._  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _columnN_ LIKE _pattern_;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong> 您还可以使用 <code>AND</code> 或 <code>OR</code> 运算符组合任意数量的条件。<br>以下是一些示例，展示了带有 <code>&#39;%&#39;</code> 和 <code>&#39;_&#39;</code> 通配符的不同 <code>LIKE</code> 运算符：</p><table><thead><tr><th>LIKE 运算符</th><th>描述</th></tr></thead><tbody><tr><td>WHERE CustomerName LIKE ‘a%’</td><td>查找以”a”开头的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘%a’</td><td>查找以”a”结尾的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘%or%’</td><td>查找在任何位置有”或”的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘_r%’</td><td>查找第二个位置有”r”的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘a_%’</td><td>查找以”a”开头且长度至少为 2 个字符的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘a__%’</td><td>查找以”a”开头且长度至少为 3 个字符的任何值</td></tr><tr><td>WHERE ContactName LIKE ‘a%o’</td><td>查找以”a”开头并以”o”结尾的任何值</td></tr></tbody></table><h3 id="SQL-LIKE-示例"><a href="#SQL-LIKE-示例" class="headerlink" title="SQL LIKE 示例"></a>SQL LIKE 示例</h3><p><strong>示例1：</strong> 选择 CustomerName 以”a”开头的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE CustomerName LIKE &#x27;a%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 选择 CustomerName 以”a”结尾的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE CustomerName LIKE &#x27;%a&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong> 选择所有具有”or”的 CustomerName 的客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE CustomerName LIKE &#x27;%or%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例4：</strong> 选择 CustomerName 第二个位置有”r”的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE CustomerName LIKE &#x27;_r%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例5：</strong> 选择 CustomerName 以”a”开头且长度至少为 3 个字符的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE CustomerName LIKE &#x27;a__%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例6：</strong> 选择 ContactName 以”a”开头并以”o”结尾的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE ContactName LIKE &#x27;a%o&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例7：</strong> 选择 CustomerName 不以”a”开头的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE CustomerName NOT LIKE &#x27;a%&#x27;;</span><br></pre></td></tr></table></figure><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符用于替换字符串中的一个或多个字符。<br><code>LIKE</code> 运算符在 <code>WHERE</code> 子句中用于搜索列中的指定模式。</p><h3 id="MySQL-中的通配符"><a href="#MySQL-中的通配符" class="headerlink" title="MySQL 中的通配符"></a>MySQL 中的通配符</h3><table><thead><tr><th>符号</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>%</td><td>代表零个或多个字符</td><td>bl% 找到 bl、black、blue 和 blob</td></tr><tr><td>_</td><td>代表单个字符</td><td>h_t 查找 hot、hat 和 hit</td></tr><tr><td>通配符也可以组合使用！</td><td></td><td></td></tr><tr><td>以下是一些示例，展示了带有 <code>&#39;%&#39;</code> 和 <code>&#39;_&#39; </code>通配符的不同 <code>LIKE</code> 运算符：</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>LIKE 运算符</th><th>描述</th></tr></thead><tbody><tr><td>WHERE CustomerName LIKE ‘a%’</td><td>查找以”a”开头的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘%a’</td><td>查找以”a”结尾的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘%or%’</td><td>查找在任何位置有”或”的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘_r%’</td><td>查找第二个位置有”r”的任何值</td></tr><tr><td>WHERE CustomerName LIKE ‘a_%_%’</td><td>查找以”a”开头且长度至少为 3 个字符的任何值</td></tr><tr><td>WHERE ContactName LIKE ‘a%o’</td><td>查找以”a”开头并以”o”结尾的任何值</td></tr></tbody></table><h3 id="使用-通配符"><a href="#使用-通配符" class="headerlink" title="使用 % 通配符"></a>使用 % 通配符</h3><p><strong>示例1：</strong> 选择城市以”ber”开头的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE City LIKE &#x27;ber%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 选择 City 包含模式”es”的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE City LIKE &#x27;%es%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="使用-通配符-1"><a href="#使用-通配符-1" class="headerlink" title="使用 _ 通配符"></a>使用 _ 通配符</h3><p><strong>示例1：</strong> 选择 City 以任意字符开头，后跟”ondon”的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE City LIKE &#x27;_ondon&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 选择 City 以”L”开头、后接任意字符、后接”n”、后接任意字符、后接”on”的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE City LIKE &#x27;L_n_on&#x27;;</span><br></pre></td></tr></table></figure><h2 id="IN-运算符"><a href="#IN-运算符" class="headerlink" title="IN 运算符"></a>IN 运算符</h2><p><code>IN</code> 运算符允许您在 <code>WHERE</code> 子句中指定多个值。<br><code>IN</code> 运算符是多个 <code>OR</code> 条件的简写。</p><h3 id="IN-语法"><a href="#IN-语法" class="headerlink" title="IN 语法"></a>IN 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _column_name_ IN (_value1_, _value2_, ...);</span><br></pre></td></tr></table></figure><p>or:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _column_name_ IN (_SELECT STATEMENT_);</span><br></pre></td></tr></table></figure><h3 id="IN-运算符示例"><a href="#IN-运算符示例" class="headerlink" title="IN 运算符示例"></a>IN 运算符示例</h3><p><strong>示例1：</strong> 选择位于”德国”、”法国”或”英国”的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE Country IN (&#x27;Germany&#x27;, &#x27;France&#x27;, &#x27;UK&#x27;);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 选择所有不在”德国”、”法国”或”英国”的客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE Country NOT IN (&#x27;Germany&#x27;, &#x27;France&#x27;, &#x27;UK&#x27;);</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong> 选择与供应商来自同一地区的所有客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers  </span><br><span class="line">WHERE Country IN (SELECT Country FROM Suppliers);</span><br></pre></td></tr></table></figure><h2 id="BETWEEN-运算符"><a href="#BETWEEN-运算符" class="headerlink" title="BETWEEN 运算符"></a>BETWEEN 运算符</h2><p><code>BETWEEN</code> 运算符选择给定范围内的值。 这些值可以是数字、文本或日期。<br><code>BETWEEN</code> 运算符具有包容性：包括开始值和结束值。</p><h3 id="BETWEEN-语法"><a href="#BETWEEN-语法" class="headerlink" title="BETWEEN 语法"></a>BETWEEN 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _column_name_ BETWEEN _value1_ AND _value2;_</span><br></pre></td></tr></table></figure><h3 id="BETWEEN-示例"><a href="#BETWEEN-示例" class="headerlink" title="BETWEEN 示例"></a>BETWEEN 示例</h3><p><strong>示例：</strong> 选择价格在 10 到 20 之间的所有产品：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Products  </span><br><span class="line">WHERE Price BETWEEN 10 AND 20;</span><br></pre></td></tr></table></figure><h3 id="NOT-BETWEEN-示例"><a href="#NOT-BETWEEN-示例" class="headerlink" title="NOT BETWEEN 示例"></a>NOT BETWEEN 示例</h3><p><strong>示例：</strong> 显示上例范围之外的产品，请使用 <code>NOT BETWEEN</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Products  </span><br><span class="line">WHERE Price NOT BETWEEN 10 AND 20;</span><br></pre></td></tr></table></figure><h3 id="BETWEEN-与-IN-示例"><a href="#BETWEEN-与-IN-示例" class="headerlink" title="BETWEEN 与 IN 示例"></a>BETWEEN 与 IN 示例</h3><p><strong>示例：</strong> 选择价格在 10 到 20 之间的所有产品。此外； 不显示 CategoryID 为 1、2 或 3 的产品：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Products  </span><br><span class="line">WHERE Price BETWEEN 10 AND 20  </span><br><span class="line">AND CategoryID NOT IN (1,2,3);</span><br></pre></td></tr></table></figure><h3 id="BETWEEN-文本值示例"><a href="#BETWEEN-文本值示例" class="headerlink" title="BETWEEN 文本值示例"></a>BETWEEN 文本值示例</h3><p><strong>示例1：</strong> 选择 ProductName 介于 “Carnarvon Tigers” 和 “Mozzarella di Giovanni” 之间的所有产品：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Products  </span><br><span class="line">WHERE ProductName BETWEEN &#x27;Carnarvon Tigers&#x27; AND &#x27;Mozzarella di Giovanni&#x27;  </span><br><span class="line">ORDER BY ProductName;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 选择 ProductName 介于 “Carnarvon Tigers” 和 “Chef Anton’s Cajun Seasoning” 之间的所有产品：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Products  </span><br><span class="line">WHERE ProductName BETWEEN &quot;Carnarvon Tigers&quot; AND &quot;Chef Anton&#x27;s Cajun Seasoning&quot;  </span><br><span class="line">ORDER BY ProductName;</span><br></pre></td></tr></table></figure><h3 id="NOT-BETWEEN-文本值示例"><a href="#NOT-BETWEEN-文本值示例" class="headerlink" title="NOT BETWEEN 文本值示例"></a>NOT BETWEEN 文本值示例</h3><p><strong>示例：</strong> 选择 ProductName 不在 “Carnarvon Tigers” 和 “Mozzarella di Giovanni” 之间的所有产品：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Products  </span><br><span class="line">WHERE ProductName NOT BETWEEN &#x27;Carnarvon Tigers&#x27; AND &#x27;Mozzarella di Giovanni&#x27;  </span><br><span class="line">ORDER BY ProductName;</span><br></pre></td></tr></table></figure><h3 id="BETWEEN-日期示例"><a href="#BETWEEN-日期示例" class="headerlink" title="BETWEEN 日期示例"></a>BETWEEN 日期示例</h3><p><strong>示例：</strong> 选择 OrderDate 介于 ‘01-July-1996’ 和 ‘31-July-1996’ 之间的所有订单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Orders  </span><br><span class="line">WHERE OrderDate BETWEEN &#x27;1996-07-01&#x27; AND &#x27;1996-07-31&#x27;;</span><br></pre></td></tr></table></figure><h2 id="MySQL-别名"><a href="#MySQL-别名" class="headerlink" title="MySQL 别名"></a>MySQL 别名</h2><p>别名用于为表或表中的列提供临时名称。<br>别名通常用于使列名更具可读性。<br>别名仅在该查询期间存在。<br>使用 <code>AS</code> 关键字创建别名。</p><h3 id="Alias-Column-语法"><a href="#Alias-Column-语法" class="headerlink" title="Alias Column 语法"></a>Alias Column 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name_ AS _alias_name_  </span><br><span class="line">FROM _table_name;_</span><br></pre></td></tr></table></figure><h3 id="Alias-Table-语法"><a href="#Alias-Table-语法" class="headerlink" title="Alias Table 语法"></a>Alias Table 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_ AS _alias_name;_</span><br></pre></td></tr></table></figure><h3 id="列示例的别名"><a href="#列示例的别名" class="headerlink" title="列示例的别名"></a>列示例的别名</h3><p><strong>示例1：</strong> 创建两个别名，一个用于 CustomerID 列，一个用于 CustomerName 列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CustomerID AS ID, CustomerName AS Customer  </span><br><span class="line">FROM Customers;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 创建两个别名，一个用于 CustomerName 列，一个用于 ContactName 列。 <br><strong>注意：</strong> 如果别名包含空格，则需要单引号或双引号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CustomerName AS Customer, ContactName AS &quot;Contact Person&quot;  </span><br><span class="line">FROM Customers;</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong> 创建一个名为”Address”的别名，该别名组合了四列（Address、PostalCode、City 和 Country）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CustomerName, CONCAT_WS(&#x27;, &#x27;, Address, PostalCode, City, Country) AS Address  </span><br><span class="line">FROM Customers;</span><br></pre></td></tr></table></figure><h3 id="表别名示例"><a href="#表别名示例" class="headerlink" title="表别名示例"></a>表别名示例</h3><p><strong>示例1：</strong> 选择来自 CustomerID&#x3D;4 的客户的所有订单（Around the Horn）。 我们使用”Customers”和”Orders”表，并分别赋予它们”c”和”o”的表别名（这里我们使用别名使SQL更短）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT o.OrderID, o.OrderDate, c.CustomerName  </span><br><span class="line">FROM Customers AS c, Orders AS o  </span><br><span class="line">WHERE c.CustomerName=&#x27;Around the Horn&#x27; AND c.CustomerID=o.CustomerID;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 同上，但没有别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName  </span><br><span class="line">FROM Customers, Orders  </span><br><span class="line">WHERE Customers.CustomerName=&#x27;Around the Horn&#x27; AND Customers.CustomerID=Orders.CustomerID;</span><br></pre></td></tr></table></figure><p><strong>别名在以下情况下很有用：</strong></p><ul><li>一个查询涉及多个表</li><li>查询中使用了函数</li><li>列名太大或不太可读</li><li>将两列或多列组合在一起</li></ul><h2 id="MySQL-联接表"><a href="#MySQL-联接表" class="headerlink" title="MySQL 联接表"></a>MySQL 联接表</h2><p><code>JOIN</code> 子句用于根据它们之间的相关列组合来自两个或多个表的行。</p><h3 id="MySQL-支持的联接类型"><a href="#MySQL-支持的联接类型" class="headerlink" title="MySQL 支持的联接类型"></a>MySQL 支持的联接类型</h3><ul><li><code>INNER JOIN</code>：返回两个表中值匹配的记录</li><li><code>LEFT JOIN</code>：返回左表所有记录，右表匹配记录</li><li><code>RIGHT JOIN</code>：返回右表的所有记录，以及左表的匹配记录</li><li><code>CROSS JOIN</code>：返回两个表中的所有记录</li></ul><h2 id="INNER-JOIN-关键字"><a href="#INNER-JOIN-关键字" class="headerlink" title="INNER JOIN 关键字"></a>INNER JOIN 关键字</h2><p><code>INNER JOIN</code> 关键字选择在两个表中具有匹配值的记录。<br><img src="https://www.w3schools.cn/mysql/img_innerjoin.gif" class="lazyload placeholder" data-srcset="https://www.w3schools.cn/mysql/img_innerjoin.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MySQL INNER JOIN"></p><h3 id="INNER-JOIN-语法"><a href="#INNER-JOIN-语法" class="headerlink" title="INNER JOIN 语法"></a>INNER JOIN 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table1_  </span><br><span class="line">INNER JOIN _table2  </span><br><span class="line">_ON _table1.column_name_ = _table2.column_name_;</span><br></pre></td></tr></table></figure><h3 id="内部连接示例"><a href="#内部连接示例" class="headerlink" title="内部连接示例"></a>内部连接示例</h3><p><strong>示例：</strong> 选择所有带有客户信息的订单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Orders.OrderID, Customers.CustomerName  </span><br><span class="line">FROM Orders  </span><br><span class="line">INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 只要列之间存在匹配，<code>INNER JOIN</code> 关键字就会从两个表中选择所有行。 如果”Orders”表中存在与”Customers”不匹配的记录，这些订单将不会显示！</p><h3 id="连接三个表"><a href="#连接三个表" class="headerlink" title="连接三个表"></a>连接三个表</h3><p><strong>示例：</strong> 选择包含客户和发货人信息的所有订单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName  </span><br><span class="line">FROM ((Orders  </span><br><span class="line">INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)  </span><br><span class="line">INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);</span><br></pre></td></tr></table></figure><h2 id="LEFT-JOIN-关键字"><a href="#LEFT-JOIN-关键字" class="headerlink" title="LEFT JOIN 关键字"></a>LEFT JOIN 关键字</h2><p><code>LEFT JOIN</code> 关键字返回左表（table1）中的所有记录，以及右表（table2）中的匹配记录（如果有）。<br><img src="https://www.w3schools.cn/mysql/img_leftjoin.gif" class="lazyload placeholder" data-srcset="https://www.w3schools.cn/mysql/img_leftjoin.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MySQL LEFT JOIN"></p><h3 id="LEFT-JOIN-语法"><a href="#LEFT-JOIN-语法" class="headerlink" title="LEFT JOIN 语法"></a>LEFT JOIN 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table1_  </span><br><span class="line">LEFT JOIN _table2  </span><br><span class="line">_ON _table1.column_name_ = _table2.column_name_;</span><br></pre></td></tr></table></figure><h3 id="左连接示例"><a href="#左连接示例" class="headerlink" title="左连接示例"></a>左连接示例</h3><p><strong>示例：</strong> 将选择所有客户，以及他们可能拥有的任何订单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Customers.CustomerName, Orders.OrderID  </span><br><span class="line">FROM Customers  </span><br><span class="line">LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID  </span><br><span class="line">ORDER BY Customers.CustomerName;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>LEFT JOIN</code> 关键字返回左表（Customers）中的所有记录，即使右表没有匹配项 表（订单）。</p><h2 id="RIGHT-JOIN-关键字"><a href="#RIGHT-JOIN-关键字" class="headerlink" title="RIGHT JOIN 关键字"></a>RIGHT JOIN 关键字</h2><p><code>RIGHT JOIN</code> 关键字返回右表（table2）中的所有记录，以及左表（table1）中的匹配记录（如果有）。<br><img src="https://www.w3schools.cn/mysql/img_rightjoin.gif" class="lazyload placeholder" data-srcset="https://www.w3schools.cn/mysql/img_rightjoin.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MySQL RIGHT JOIN"></p><h3 id="RIGHT-JOIN-语法"><a href="#RIGHT-JOIN-语法" class="headerlink" title="RIGHT JOIN 语法"></a>RIGHT JOIN 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table1_  </span><br><span class="line">RIGHT JOIN _table2  </span><br><span class="line">_ON _table1.column_name_ = _table2.column_name_;</span><br></pre></td></tr></table></figure><h3 id="RIGHT-JOIN-示例"><a href="#RIGHT-JOIN-示例" class="headerlink" title="RIGHT JOIN 示例"></a>RIGHT JOIN 示例</h3><p><strong>示例：</strong> 将返回所有员工以及他们可能下的任何订单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Orders.OrderID, Employees.LastName, Employees.FirstName  </span><br><span class="line">FROM Orders  </span><br><span class="line">RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID  </span><br><span class="line">ORDER BY Orders.OrderID;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>RIGHT JOIN</code> 关键字返回右表（Employees）中的所有记录，即使左边没有匹配项 表（订单）。</p><h2 id="SQL-CROSS-JOIN-关键字"><a href="#SQL-CROSS-JOIN-关键字" class="headerlink" title="SQL CROSS JOIN 关键字"></a>SQL CROSS JOIN 关键字</h2><p><code>CROSS JOIN</code> 关键字返回两个表（table1 和 table2）中的所有记录。<br><img src="https://www.w3schools.cn/mysql/img_crossjoin.png" class="lazyload placeholder" data-srcset="https://www.w3schools.cn/mysql/img_crossjoin.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MySQL CROSS JOIN"></p><h3 id="CROSS-JOIN-语法"><a href="#CROSS-JOIN-语法" class="headerlink" title="CROSS JOIN 语法"></a>CROSS JOIN 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table1_  </span><br><span class="line">CROSS JOIN _table2_;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>CROSS JOIN</code> 可能会返回非常大的结果集！</p><h3 id="CROSS-JOIN-示例"><a href="#CROSS-JOIN-示例" class="headerlink" title="CROSS JOIN 示例"></a>CROSS JOIN 示例</h3><p><strong>示例1：</strong> 选择所有客户和所有订单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Customers.CustomerName, Orders.OrderID  </span><br><span class="line">FROM Customers  </span><br><span class="line">CROSS JOIN Orders;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>CROSS JOIN</code> 关键字返回两个表中的所有匹配记录，无论另一个表是否匹配。 因此，如果”客户”中的某些行与”订单”中的匹配项不匹配，或者”订单”中的某些行与”客户”中的匹配项不匹配，也会列出这些行。<br><strong>示例2：</strong> 如果添加<code>WHERE</code>子句（如果table1和table2有关系），<code>CROSS JOIN</code> 将产生与 <code>INNER JOIN</code> 子句相同的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Customers.CustomerName, Orders.OrderID  </span><br><span class="line">FROM Customers  </span><br><span class="line">CROSS JOIN Orders  </span><br><span class="line">WHERE Customers.CustomerID=Orders.CustomerID;</span><br></pre></td></tr></table></figure><h2 id="MySQL-自联接"><a href="#MySQL-自联接" class="headerlink" title="MySQL 自联接"></a>MySQL 自联接</h2><p>自联接是常规联接，但表是与自身联接的。</p><h3 id="自连接语法"><a href="#自连接语法" class="headerlink" title="自连接语法"></a>自连接语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table1 T1, table1 T2_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><p><em>T1</em> 和 <em>T2</em> 是同一张表的不同表别名。</p><h3 id="自连接示例"><a href="#自连接示例" class="headerlink" title="自连接示例"></a>自连接示例</h3><p><strong>示例：</strong> 匹配来自同一城市的客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City  </span><br><span class="line">FROM Customers A, Customers B  </span><br><span class="line">WHERE A.CustomerID &lt;&gt; B.CustomerID  </span><br><span class="line">AND A.City = B.City  </span><br><span class="line">ORDER BY A.City;</span><br></pre></td></tr></table></figure><h2 id="UNION-运算符"><a href="#UNION-运算符" class="headerlink" title="UNION 运算符"></a>UNION 运算符</h2><p><code>UNION</code> 运算符用于组合两个或多个 <code>SELECT</code> 语句的结果集。</p><ul><li><code>UNION</code> 中的每个 <code>SELECT</code> 语句必须具有相同的列数</li><li>列还必须具有相似的数据类型</li><li>每个 <code>SELECT</code> 语句中的列也必须是相同的顺序</li></ul><h3 id="UNION-语法"><a href="#UNION-语法" class="headerlink" title="UNION 语法"></a>UNION 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_ FROM _table1_  </span><br><span class="line">UNION  </span><br><span class="line">SELECT _column_name(s)_ FROM _table2_;</span><br></pre></td></tr></table></figure><h3 id="UNION-ALL-语法"><a href="#UNION-ALL-语法" class="headerlink" title="UNION ALL 语法"></a>UNION ALL 语法</h3><p><code>UNION</code> 运算符默认只选择不同的值。 要允许重复值，请使用 <code>UNION ALL</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_ FROM _table1_  </span><br><span class="line">UNION ALL  </span><br><span class="line">SELECT _column_name(s)_ FROM _table2_;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 结果集中的列名通常等于第一个 <code>SELECT</code> 语句中的列名。</p><h3 id="SQL-UNION-示例"><a href="#SQL-UNION-示例" class="headerlink" title="SQL UNION 示例"></a>SQL UNION 示例</h3><p><strong>示例：</strong> 从”客户”和”供应商”表中返回城市（仅不同的值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT City FROM Customers  </span><br><span class="line">UNION  </span><br><span class="line">SELECT City FROM Suppliers  </span><br><span class="line">ORDER BY City;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 如果某些客户或供应商拥有相同的城市，则每个城市只会列出一次，因为 <code>UNION</code> 只选择不同的值。 使用 <code>UNION ALL</code> 也可以选择重复值！</p><h3 id="SQL-UNION-ALL-示例"><a href="#SQL-UNION-ALL-示例" class="headerlink" title="SQL UNION ALL 示例"></a>SQL UNION ALL 示例</h3><p><strong>示例：</strong> 从”客户”和”供应商”表中返回城市（也有重复值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT City FROM Customers  </span><br><span class="line">UNION ALL  </span><br><span class="line">SELECT City FROM Suppliers  </span><br><span class="line">ORDER BY City;</span><br></pre></td></tr></table></figure><h3 id="SQL-UNION-与-WHERE"><a href="#SQL-UNION-与-WHERE" class="headerlink" title="SQL UNION 与 WHERE"></a>SQL UNION 与 WHERE</h3><p><strong>示例：</strong> 从”客户”和”供应商”表中返回德国城市（只有不同的值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT City, Country FROM Customers  </span><br><span class="line">WHERE Country=&#x27;Germany&#x27;  </span><br><span class="line">UNION  </span><br><span class="line">SELECT City, Country FROM Suppliers  </span><br><span class="line">WHERE Country=&#x27;Germany&#x27;  </span><br><span class="line">ORDER BY City;</span><br></pre></td></tr></table></figure><h3 id="SQL-UNION-ALL-与-WHERE"><a href="#SQL-UNION-ALL-与-WHERE" class="headerlink" title="SQL UNION ALL 与 WHERE"></a>SQL UNION ALL 与 WHERE</h3><p><strong>示例：</strong> 从”客户”和”供应商”表中返回德国城市（也有重复值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT City, Country FROM Customers  </span><br><span class="line">WHERE Country=&#x27;Germany&#x27;  </span><br><span class="line">UNION ALL  </span><br><span class="line">SELECT City, Country FROM Suppliers  </span><br><span class="line">WHERE Country=&#x27;Germany&#x27;  </span><br><span class="line">ORDER BY City;</span><br></pre></td></tr></table></figure><h3 id="另一个-UNION-示例"><a href="#另一个-UNION-示例" class="headerlink" title="另一个 UNION 示例"></a>另一个 UNION 示例</h3><p><strong>示例：</strong> 列出了所有客户和供应商：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#x27;Customer&#x27; AS Type, ContactName, City, Country  </span><br><span class="line">FROM Customers  </span><br><span class="line">UNION  </span><br><span class="line">SELECT &#x27;Supplier&#x27;, ContactName, City, Country  </span><br><span class="line">FROM Suppliers;</span><br></pre></td></tr></table></figure><p>注意上面的”AS Type”，它是一个别名。 SQL 别名用于给表或列一个临时名称。 别名仅在查询期间存在。 因此，我们在这里创建了一个名为”Type”的临时列，其中列出了联系人是”客户”还是”供应商”。</p><h2 id="GROUP-BY-语句"><a href="#GROUP-BY-语句" class="headerlink" title="GROUP BY 语句"></a>GROUP BY 语句</h2><p><code>GROUP BY</code> 语句将具有相同值的行分组为汇总行，例如”查找每个地区的客户数量”。<br><code>GROUP BY</code> 语句通常与聚合函数（<code>COUNT()</code>、<code>MAX()</code>, <code>MIN()</code>, <code>SUM()</code>, <code>AVG()</code>) 按一列或多列对结果集进行分组。</p><h3 id="GROUP-BY-语法"><a href="#GROUP-BY-语法" class="headerlink" title="GROUP BY 语法"></a>GROUP BY 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_  </span><br><span class="line">GROUP BY _column_name(s)  </span><br><span class="line">_ORDER BY _column_name(s);_</span><br></pre></td></tr></table></figure><h3 id="GROUP-BY-示例"><a href="#GROUP-BY-示例" class="headerlink" title="GROUP BY 示例"></a>GROUP BY 示例</h3><p><strong>示例1：</strong> 列出了每个地区的客户数量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(CustomerID), Country  </span><br><span class="line">FROM Customers  </span><br><span class="line">GROUP BY Country;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 列出了每个地区的客户数量，从高到低排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(CustomerID), Country  </span><br><span class="line">FROM Customers  </span><br><span class="line">GROUP BY Country  </span><br><span class="line">ORDER BY COUNT(CustomerID) DESC;</span><br></pre></td></tr></table></figure><h3 id="GROUP-BY-与-JOIN-示例"><a href="#GROUP-BY-与-JOIN-示例" class="headerlink" title="GROUP BY 与 JOIN 示例"></a>GROUP BY 与 JOIN 示例</h3><p><strong>示例：</strong> 列出了每个发货人发送的订单数量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders  </span><br><span class="line">LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  </span><br><span class="line">GROUP BY ShipperName;</span><br></pre></td></tr></table></figure><h2 id="HAVING-子句"><a href="#HAVING-子句" class="headerlink" title="HAVING 子句"></a>HAVING 子句</h2><p><code>HAVING</code> 子句已添加到 SQL，因为 <code>WHERE</code> 关键字不能与聚合函数一起使用。</p><h3 id="HAVING-语法"><a href="#HAVING-语法" class="headerlink" title="HAVING 语法"></a>HAVING 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_  </span><br><span class="line">GROUP BY _column_name(s)  </span><br><span class="line">_HAVING _condition  </span><br><span class="line">_ORDER BY _column_name(s);_</span><br></pre></td></tr></table></figure><h3 id="HAVING-示例"><a href="#HAVING-示例" class="headerlink" title="HAVING 示例"></a>HAVING 示例</h3><p><strong>示例1：</strong> 列出了每个地区的客户数量。 仅包括拥有 5 个以上客户的地区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(CustomerID), Country  </span><br><span class="line">FROM Customers  </span><br><span class="line">GROUP BY Country  </span><br><span class="line">HAVING COUNT(CustomerID) &gt; 5;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 列出了每个地区的客户数量，从高到低排序（仅包括客户超过 5 个的地区）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(CustomerID), Country  </span><br><span class="line">FROM Customers  </span><br><span class="line">GROUP BY Country  </span><br><span class="line">HAVING COUNT(CustomerID) &gt; 5  </span><br><span class="line">ORDER BY COUNT(CustomerID) DESC;</span><br></pre></td></tr></table></figure><h3 id="更多-HAVING-示例"><a href="#更多-HAVING-示例" class="headerlink" title="更多 HAVING 示例"></a>更多 HAVING 示例</h3><p><strong>示例1：</strong> 列出了注册超过 10 个订单的员工：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders  </span><br><span class="line">FROM (Orders  </span><br><span class="line">INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)  </span><br><span class="line">GROUP BY LastName  </span><br><span class="line">HAVING COUNT(Orders.OrderID) &gt; 10;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 列出员工”Davolio”或”Fuller”是否已注册超过 25 个订单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders  </span><br><span class="line">FROM Orders  </span><br><span class="line">INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID  </span><br><span class="line">WHERE LastName = &#x27;Davolio&#x27; OR LastName = &#x27;Fuller&#x27;  </span><br><span class="line">GROUP BY LastName  </span><br><span class="line">HAVING COUNT(Orders.OrderID) &gt; 25;</span><br></pre></td></tr></table></figure><h2 id="EXISTS-运算符"><a href="#EXISTS-运算符" class="headerlink" title="EXISTS 运算符"></a>EXISTS 运算符</h2><p><code>EXISTS</code> 运算符用于测试子查询中是否存在任何记录。<br>如果子查询返回一条或多条记录，<code>EXISTS</code> 运算符返回 TRUE。</p><h3 id="EXISTS-语法"><a href="#EXISTS-语法" class="headerlink" title="EXISTS 语法"></a>EXISTS 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE EXISTS  </span><br><span class="line">(SELECT _column_name_ FROM _table_name_ WHERE _condition_);</span><br></pre></td></tr></table></figure><h3 id="EXISTS-示例"><a href="#EXISTS-示例" class="headerlink" title="EXISTS 示例"></a>EXISTS 示例</h3><p><strong>示例1：</strong> 返回 TRUE 并列出产品价格低于 20 的供应商：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT SupplierName  </span><br><span class="line">FROM Suppliers  </span><br><span class="line">WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price &lt; 20);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 返回 TRUE 并列出产品价格等于 22 的供应商：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT SupplierName  </span><br><span class="line">FROM Suppliers  </span><br><span class="line">WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price = 22);</span><br></pre></td></tr></table></figure><h2 id="ANY-和-ALL-运算符"><a href="#ANY-和-ALL-运算符" class="headerlink" title="ANY 和 ALL 运算符"></a>ANY 和 ALL 运算符</h2><p><code>ANY</code> 和 <code>ALL</code> 运算符允许您在单个列值和范围之间执行比较 其他值。</p><h3 id="ANY-运算符"><a href="#ANY-运算符" class="headerlink" title="ANY 运算符"></a>ANY 运算符</h3><p><code>ANY</code> 运算符：</p><ul><li>返回一个布尔值作为结果</li><li>如果任何子查询值满足条件，则返回 TRUE<br><code>ANY</code> 表示如果该范围内的任何值的运算为真，则条件为真。</li></ul><h4 id="ANY-语法"><a href="#ANY-语法" class="headerlink" title="ANY 语法"></a>ANY 语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _column_name operator_ ANY  </span><br><span class="line">(SELECT _column_name_  FROM _table_name_  WHERE _condition_);</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> <code>_运算符_ </code>必须是标准比较运算符 (&#x3D;, &lt;&gt;, !&#x3D;, &gt;, &gt;&#x3D;, &lt;, or &lt;&#x3D;)。</p><h3 id="ALL-运算符"><a href="#ALL-运算符" class="headerlink" title="ALL 运算符"></a>ALL 运算符</h3><p><code>ALL</code> 运算符：</p><ul><li>返回一个布尔值作为结果</li><li>如果所有子查询值都满足条件，则返回 TRUE</li><li>与 <code>SELECT</code>、<code>WHERE</code> 和 <code>HAVING</code> 语句一起使用<br><code>ALL</code> 表示仅当操作对范围内的所有值都为真时，条件才会为真。</li></ul><h4 id="SELECT-的-ALL-语法"><a href="#SELECT-的-ALL-语法" class="headerlink" title="SELECT 的 ALL 语法"></a>SELECT 的 ALL 语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ALL _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><h4 id="ALL-语法与-WHERE-或-HAVING"><a href="#ALL-语法与-WHERE-或-HAVING" class="headerlink" title="ALL 语法与 WHERE 或 HAVING"></a>ALL 语法与 WHERE 或 HAVING</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT _column_name(s)_  </span><br><span class="line">FROM _table_name_  </span><br><span class="line">WHERE _column_name operator_ ALL  </span><br><span class="line">(SELECT _column_name_  FROM _table_name_  WHERE _condition_);</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> <code>_运算符_</code>必须是标准比较运算符（&#x3D;、&lt;&gt;、!&#x3D;、&gt;、&gt;&#x3D;、&lt; 或 &lt;&#x3D;）。</p><h3 id="SQL-ANY-示例"><a href="#SQL-ANY-示例" class="headerlink" title="SQL ANY 示例"></a>SQL ANY 示例</h3><p><strong>示例1：</strong> 如果发现 OrderDetails 表中的任何记录的 Quantity 等于 10，则列出 ProductName（这将返回 TRUE，因为 Quantity 列的某些值是 10）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ProductName  </span><br><span class="line">FROM Products  </span><br><span class="line">WHERE ProductID = ANY  </span><br><span class="line">  (SELECT ProductID  </span><br><span class="line">  FROM OrderDetails  </span><br><span class="line">  WHERE Quantity = 10);</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 如果发现 OrderDetails 表中的任何记录的 Quantity 大于 99，则列出 ProductName（这将返回 TRUE，因为 Quantity 列的某些值大于 99）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ProductName  </span><br><span class="line">FROM Products  </span><br><span class="line">WHERE ProductID = ANY  </span><br><span class="line">  (SELECT ProductID  </span><br><span class="line">  FROM OrderDetails  </span><br><span class="line">  WHERE Quantity &gt; 99);</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong> 如果发现 OrderDetails 表中的任何记录的 Quantity 大于 1000，则列出 ProductName（这将返回 FALSE，因为 Quantity 列没有大于 1000 的值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ProductName  </span><br><span class="line">FROM Products  </span><br><span class="line">WHERE ProductID = ANY  </span><br><span class="line">  (SELECT ProductID  </span><br><span class="line">  FROM OrderDetails  </span><br><span class="line">  WHERE Quantity &gt; 1000);</span><br></pre></td></tr></table></figure><h3 id="SQL-ALL-示例"><a href="#SQL-ALL-示例" class="headerlink" title="SQL ALL 示例"></a>SQL ALL 示例</h3><p><strong>示例1：</strong> 列出所有产品名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ALL ProductName  </span><br><span class="line">FROM Products  </span><br><span class="line">WHERE TRUE;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 如果 OrderDetails 表中的所有记录的 Quantity 等于 10，则列出 ProductName。这当然会返回 FALSE，因为 Quantity 列有许多不同的值（不仅仅是 10 的值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ProductName  </span><br><span class="line">FROM Products  </span><br><span class="line">WHERE ProductID = ALL  </span><br><span class="line">  (SELECT ProductID  </span><br><span class="line">  FROM OrderDetails  </span><br><span class="line">  WHERE Quantity = 10);</span><br></pre></td></tr></table></figure><h2 id="INSERT-INTO-SELECT-语句"><a href="#INSERT-INTO-SELECT-语句" class="headerlink" title="INSERT INTO SELECT 语句"></a>INSERT INTO SELECT 语句</h2><p><code>INSERT INTO SELECT</code> 语句从一个表中复制数据并将其插入到另一个表中。<br><code>INSERT INTO SELECT</code> 语句要求源表和目标表中的数据类型匹配。<br><strong>注意：</strong> 目标表中的现有记录不受影响。</p><h3 id="INSERT-INTO-SELECT-语法"><a href="#INSERT-INTO-SELECT-语法" class="headerlink" title="INSERT INTO SELECT 语法"></a>INSERT INTO SELECT 语法</h3><p><strong>示例1：</strong> 将一个表的所有列复制到另一个表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO _table2_  </span><br><span class="line">SELECT * FROM _table1  </span><br><span class="line">_WHERE _condition_;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 仅将一个表中的一些列复制到另一个表中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO _table2_ (_column1_, _column2_, _column3_, ...)  </span><br><span class="line">SELECT _column1_, _column2_, _column3_, ...  </span><br><span class="line">FROM _table1_  </span><br><span class="line">WHERE _condition_;</span><br></pre></td></tr></table></figure><h3 id="INSERT-INTO-SELECT-示例"><a href="#INSERT-INTO-SELECT-示例" class="headerlink" title="INSERT INTO SELECT 示例"></a>INSERT INTO SELECT 示例</h3><p><strong>示例1：</strong> 将”Suppliers”复制到”Customers”（未填充数据的列，将包含NULL）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Customers (CustomerName, City, Country)  </span><br><span class="line">SELECT SupplierName, City, Country FROM Suppliers;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 将”Suppliers”复制到”Customers”（填充所有列）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)  </span><br><span class="line">SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong> 仅将德国供应商复制到”客户”中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Customers (CustomerName, City, Country)  </span><br><span class="line">SELECT SupplierName, City, Country FROM Suppliers  </span><br><span class="line">WHERE Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure><h2 id="CASE-语句"><a href="#CASE-语句" class="headerlink" title="CASE 语句"></a>CASE 语句</h2><p><code>CASE</code> 语句遍历条件并在满足第一个条件时返回一个值（如 if-then-else 语句）。 因此，一旦条件为真，它将停止读取并返回结果。 如果没有条件为真，则返回 <code>ELSE</code> 子句中的值。<br>如果没有<code>ELSE</code>部分且没有条件为真，则返回NULL。</p><h3 id="CASE-语法"><a href="#CASE-语法" class="headerlink" title="CASE 语法"></a>CASE 语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE  </span><br><span class="line">    WHEN _condition1_ THEN _result1_  </span><br><span class="line">    WHEN _condition2_ THEN _result2_  </span><br><span class="line">    WHEN _conditionN_ THEN _resultN_  </span><br><span class="line">    ELSE _result_  </span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="CASE-示例"><a href="#CASE-示例" class="headerlink" title="CASE 示例"></a>CASE 示例</h3><p><strong>示例1：</strong> 遍历条件并在满足第一个条件时返回一个值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT OrderID, Quantity,  </span><br><span class="line">CASE  </span><br><span class="line">    WHEN Quantity &gt; 30 THEN &#x27;The quantity is greater than 30&#x27;  </span><br><span class="line">    WHEN Quantity = 30 THEN &#x27;The quantity is 30&#x27;  </span><br><span class="line">    ELSE &#x27;The quantity is under 30&#x27;  </span><br><span class="line">END AS QuantityText  </span><br><span class="line">FROM OrderDetails;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 将按城市对客户进行排序。 但是，如果 City 为 NULL，则按 Country 排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT CustomerName, City, Country  </span><br><span class="line">FROM Customers  </span><br><span class="line">ORDER BY  </span><br><span class="line">(CASE  </span><br><span class="line">    WHEN City IS NULL THEN Country  </span><br><span class="line">    ELSE City  </span><br><span class="line">END);</span><br></pre></td></tr></table></figure><h2 id="IFNULL-和-COALESCE-函数"><a href="#IFNULL-和-COALESCE-函数" class="headerlink" title="IFNULL() 和 COALESCE() 函数"></a>IFNULL() 和 COALESCE() 函数</h2><h3 id="IFNULL-函数"><a href="#IFNULL-函数" class="headerlink" title="IFNULL() 函数"></a>IFNULL() 函数</h3><p>如果表达式为 NULL，MySQL <code>IFNULL()</code> 函数可让您返回替代值。<br>如果值为 NULL，则下面的示例返回 0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))  </span><br><span class="line">FROM Products;</span><br></pre></td></tr></table></figure><h3 id="COALESCE-函数"><a href="#COALESCE-函数" class="headerlink" title="COALESCE() 函数"></a>COALESCE() 函数</h3><p>或者我们可以使用<code>COALESCE()</code>函数，像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))  </span><br><span class="line">FROM Products;</span><br></pre></td></tr></table></figure><h2 id="MySQL-注释"><a href="#MySQL-注释" class="headerlink" title="MySQL 注释"></a>MySQL 注释</h2><p>注释用于解释 SQL 语句的部分，或阻止 SQL 语句的执行。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>单行注释以<code>--</code>开头。<br>任何介于 – 和行尾之间的文本都将被忽略（不会被执行）。<br><strong>示例1：</strong> 使用单行注释作为解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- Select all:  </span><br><span class="line">SELECT * FROM Customers;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 使用单行注释来忽略行尾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers -- WHERE City=&#x27;Berlin&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong> 使用单行注释来忽略语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- SELECT * FROM Customers;  </span><br><span class="line">SELECT * FROM Products;</span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释以 <code>/*</code> 开头并以 <code>*/</code> 结尾。<br><code>/* 和 */</code> 之间的任何文本都将被忽略。<br><strong>示例1：</strong> 使用多行注释作为解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*Select all the columns  </span><br><span class="line">of all the records  </span><br><span class="line">in the Customers table:*/  </span><br><span class="line">SELECT * FROM Customers;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong> 使用多行注释来忽略许多语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*SELECT * FROM Customers;  </span><br><span class="line">SELECT * FROM Products;  </span><br><span class="line">SELECT * FROM Orders;  </span><br><span class="line">SELECT * FROM Categories;*/  </span><br><span class="line">SELECT * FROM Suppliers;</span><br></pre></td></tr></table></figure><p>要忽略语句的一部分，也可以使用 <code>/* */</code> 注释。<br><strong>示例3：</strong> 使用注释来忽略行的一部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CustomerName, /*City,*/ Country FROM Customers;</span><br></pre></td></tr></table></figure><p><strong>示例4：</strong> 使用注释来忽略部分语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers WHERE (CustomerName LIKE &#x27;L%&#x27;  </span><br><span class="line">OR CustomerName LIKE &#x27;R%&#x27; /*OR CustomerName LIKE &#x27;S%&#x27;  </span><br><span class="line">OR CustomerName LIKE &#x27;T%&#x27;*/ OR CustomerName LIKE &#x27;W%&#x27;)  </span><br><span class="line">AND Country=&#x27;USA&#x27;  </span><br><span class="line">ORDER BY CustomerName;</span><br></pre></td></tr></table></figure><h2 id="MySQL-运算符"><a href="#MySQL-运算符" class="headerlink" title="MySQL 运算符"></a>MySQL 运算符</h2><h3 id="MySQL-算术运算符"><a href="#MySQL-算术运算符" class="headerlink" title="MySQL 算术运算符"></a>MySQL 算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>Add</td></tr><tr><td>-</td><td>Subtract</td></tr><tr><td>*</td><td>Multiply</td></tr><tr><td>&#x2F;</td><td>Divide</td></tr><tr><td>%</td><td>Modulo</td></tr></tbody></table><h3 id="MySQL-位运算符"><a href="#MySQL-位运算符" class="headerlink" title="MySQL 位运算符"></a>MySQL 位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr></tbody></table><h3 id="MySQL-比较运算符"><a href="#MySQL-比较运算符" class="headerlink" title="MySQL 比较运算符"></a>MySQL 比较运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr></tbody></table><h3 id="MySQL-复合运算符"><a href="#MySQL-复合运算符" class="headerlink" title="MySQL 复合运算符"></a>MySQL 复合运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加等于</td></tr><tr><td>-&#x3D;</td><td>减去等于</td></tr><tr><td>*&#x3D;</td><td>乘以等于</td></tr><tr><td>&#x2F;&#x3D;</td><td>除以等于</td></tr><tr><td>%&#x3D;</td><td>模等于</td></tr><tr><td>&amp;&#x3D;</td><td>按位与等于</td></tr><tr><td>^-&#x3D;</td><td>按位互斥等于</td></tr><tr><td>|*&#x3D;</td><td>按位或等于</td></tr></tbody></table><h3 id="MySQL-逻辑运算符"><a href="#MySQL-逻辑运算符" class="headerlink" title="MySQL 逻辑运算符"></a>MySQL 逻辑运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>ALL</td><td>如果所有子查询值都满足条件则为 TRUE</td></tr><tr><td>AND</td><td>如果由 AND 分隔的所有条件都为 TRUE，则为 TRUE</td></tr><tr><td>ANY</td><td>如果任何子查询值满足条件则为 TRUE</td></tr><tr><td>BETWEEN</td><td>如果操作数在比较范围内，则为 TRUE</td></tr><tr><td>EXISTS</td><td>如果子查询返回一条或多条记录则为 TRUE</td></tr><tr><td>IN</td><td>如果操作数等于表达式列表之一，则为 TRUE</td></tr><tr><td>LIKE</td><td>如果操作数匹配模式则为 TRUE</td></tr><tr><td>NOT</td><td>如果条件不成立则显示一条记录</td></tr><tr><td>OR</td><td>如果由 OR 分隔的任何条件为 TRUE，则为 TRUE</td></tr><tr><td>SOME</td><td>如果任何子查询值满足条件则为 TRUE</td></tr></tbody></table><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p><strong>注：</strong> 本文参考 <a href="https://www.w3schools.cn/mysql/">MySQL 教程 (w3schools.cn)</a>需了解更详细内容可以点击链接前往</p>]]></content>
    
    
    <summary type="html">SQL 是处理关系数据库的标准语言。SQL用于插入、搜索、更新和删除数据库记录。一些最重要的 SQL 命令：SELECT - 从数据库中查询提取数据。UPDATE - 更新数据库中的数据。DELETE - 从数据库中删除数据。INSERT INTO - 将新数据插入数据库。CREATE DATABASE - 创建一个新的数据库。ALTER DATABASE - 修改数据库。CREATE TABLE - 创建一个新表。ALTER TABLE - 修改表。DROP TABLE - 删除一个表。CREATE INDEX - 创建索引（搜索键）。DROP INDEX - 删除一个索引</summary>
    
    
    
    <category term="数据库" scheme="https://fanxing28.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="SQL" scheme="https://fanxing28.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>CodeIgniter 4框架使用</title>
    <link href="https://fanxing28.github.io/2024/01/08/%E5%90%8E%E7%AB%AF/PHP/CodeIgniter%204%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://fanxing28.github.io/2024/01/08/%E5%90%8E%E7%AB%AF/PHP/CodeIgniter%204%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2024-01-08T06:30:00.000Z</published>
    <updated>2024-01-08T06:30:32.650Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeigniter.org.cn/user_guide/index.html">中文文档</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在项目根目录上层文件夹中:<br><code>composer create-project codeigniter4/appstarter 项目根目录</code><br>上述命令将创建一个 <strong>项目根目录</strong> 文件夹。<br>如果省略“项目根目录”参数,该命令将创建一个“appstarter”文件夹,可以根据需要重命名。<br><strong>启动命令：</strong> <code>php spark serve</code><br>浏览器打开：<code>http://localhost:8080/</code>即可<br><strong>修改启动路径：</strong> <code>app/Config/App.php/</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$baseURL</span> = <span class="string">&#x27;http://localhost:8080/&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="第一个界面”Hello-World-”"><a href="#第一个界面”Hello-World-”" class="headerlink" title="第一个界面”Hello World!!!”"></a>第一个界面”Hello World!!!”</h2><p>这里指明了默认的<strong>HomeController</strong>以及默认的方法。<br>因此，我们基于这一点创建HelloWorld程序。<br>在<code>app/Controllers/Home.php</code>修改代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;Hello World!!!&lt;h1&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器打开：<code>http://localhost:8080</code>即可看到界面显示：Hello World!!!</p><h2 id="第一个路由Test"><a href="#第一个路由Test" class="headerlink" title="第一个路由Test"></a>第一个路由Test</h2><h3 id="方式一：非正规创建"><a href="#方式一：非正规创建" class="headerlink" title="方式一：非正规创建"></a>方式一：非正规创建</h3><p>在<code>app/Config/Routes.php/</code>添加代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setDefaultNamespace</span>(<span class="string">&#x27;App\Controllers&#x27;</span>);</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setDefaultController</span>(<span class="string">&#x27;Test&#x27;</span>);</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setDefaultMethod</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setTranslateURIDashes</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">set404Override</span>();</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setAutoRoute</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;Test::index&#x27;</span>);</span><br></pre></td></tr></table></figure><p>同时，在<code>app/Controllers</code>目录下创建Test.php文件，编写以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;Hello World!!! Test&lt;h1&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器打开：<code>http://localhost:8080/Test</code>即可看到界面显示：Hello World!!! Test</p><h3 id="方式二：正则创建（通过view）"><a href="#方式二：正则创建（通过view）" class="headerlink" title="方式二：正则创建（通过view）"></a>方式二：正则创建（通过view）</h3><p>在<code>app/Config/Routes.php/</code>添加代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setDefaultNamespace</span>(<span class="string">&#x27;App\Controllers&#x27;</span>);</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setDefaultController</span>(<span class="string">&#x27;Test&#x27;</span>);</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setDefaultMethod</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setTranslateURIDashes</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">set404Override</span>();</span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">setAutoRoute</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$routes</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;Test::index&#x27;</span>);</span><br></pre></td></tr></table></figure><p>同时，在<code>app/Controllers</code>目录下创建<code>Test.php</code>文件，编写以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>View</code>目录下创建<code>Test.php</code>文件，并编写以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!!! View Test&lt;h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>浏览器打开：<code>http://localhost:8080/Test</code>即可看到界面显示：Hello World!!! View Test</p><h2 id="Controller传递参数给View"><a href="#Controller传递参数给View" class="headerlink" title="Controller传递参数给View"></a>Controller传递参数给View</h2><p>在<code>app/Controllers</code>目录下创建<code>Test.php</code>文件，编写以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">&#x27;data&#x27;</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;test&#x27;</span>,<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>View</code>目录下创建<code>Test.php</code>文件，并编写以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;My Data is: <span class="meta">&lt;?php</span> <span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);<span class="meta">?&gt;</span>&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>浏览器打开：<code>http://localhost:8080/Test</code>即可看到界面显示：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My Data is: array(3) &#123; [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CodeIgniter 4框架的使用</summary>
    
    
    
    <category term="后端" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="PHP" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/PHP/"/>
    
    
    <category term="PHP" scheme="https://fanxing28.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP 常用方法</title>
    <link href="https://fanxing28.github.io/2023/12/17/%E5%90%8E%E7%AB%AF/PHP/PHP%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://fanxing28.github.io/2023/12/17/%E5%90%8E%E7%AB%AF/PHP/PHP%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2023-12-17T07:34:00.000Z</published>
    <updated>2024-01-08T06:54:35.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见处理函数-方法"><a href="#常见处理函数-方法" class="headerlink" title="常见处理函数(方法)"></a>常见处理函数(方法)</h1><ol><li>字符串处理函数：<ul><li><code>strlen()</code>：获取字符串的长度</li><li><code>strtolower()</code>：将字符串转换为小写</li><li><code>strtoupper()</code>：将字符串转换为大写</li><li><code>substr()</code>：提取字符串的一部分</li><li><code>str_replace()</code>：替换字符串中的指定内容</li><li><code>trim()</code>：删除字符串首尾的空白字符</li></ul></li><li>数组处理函数：<ul><li><code>count()</code>：获取数组元素个数</li><li><code>array_push()</code>：将一个或多个元素添加到数组末尾</li><li><code>array_pop()</code>：从数组末尾删除并返回一个元素</li><li><code>array_merge()</code>：合并一个或多个数组</li><li><code>array_search()</code>：在数组中搜索指定的值，并返回其键名</li></ul></li><li>文件操作函数：<ul><li><code>file_get_contents()</code>：将整个文件读取到一个字符串中</li><li><code>file_put_contents()</code>：将一个字符串写入文件</li><li><code>fopen()</code>：打开文件或 URL</li><li><code>fwrite()</code>：向文件写入数据</li><li><code>fclose()</code>：关闭打开的文件</li></ul></li><li>数据库相关函数：<ul><li><code>mysqli_connect()</code>：连接到 MySQL 数据库</li><li><code>mysqli_query()</code>：执行数据库查询</li><li><code>mysqli_fetch_assoc()</code>：从结果集中获取一行作为关联数组</li><li><code>mysqli_insert_id()</code>：获取最后插入行的 ID</li><li><code>mysqli_close()</code>：关闭与数据库的连接</li></ul></li></ol><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-数组排序相关的方法"><a href="#1-数组排序相关的方法" class="headerlink" title="(1) 数组排序相关的方法"></a>(1) 数组排序相关的方法</h2><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">sort()</td><td align="left">对数组进行升序排序</td></tr><tr><td align="left">rsort()</td><td align="left">对数组进行降序排序</td></tr><tr><td align="left">asort()</td><td align="left">根据值对数组进行升序排序，并保持键值关联</td></tr><tr><td align="left">arsort()</td><td align="left">根据值对数组进行降序排序，并保持键值关联</td></tr><tr><td align="left">ksort()</td><td align="left">根据键名对数组进行升序排序</td></tr><tr><td align="left">krsort()</td><td align="left">根据键名对数组进行降序排序</td></tr></tbody></table><ol><li><code>sort()</code>：对数组进行升序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 )</span></span><br></pre></td></tr></table></figure></li><li><code>rsort()</code>：对数组进行降序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="title function_ invoke__">rsort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [0] =&gt; 5 [1] =&gt; 4 [2] =&gt; 3 [3] =&gt; 2 [4] =&gt; 1 )</span></span><br></pre></td></tr></table></figure></li><li><code>asort()</code>：根据值对数组进行升序排序，并保持键值关联<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">asort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [a] =&gt; 1 [c] =&gt; 2 [b] =&gt; 3 )</span></span><br></pre></td></tr></table></figure></li><li><code>arsort()</code>：根据值对数组进行降序排序，并保持键值关联<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">arsort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [b] =&gt; 3 [c] =&gt; 2 [a] =&gt; 1 )</span></span><br></pre></td></tr></table></figure></li><li><code>ksort()</code>：根据键名对数组进行升序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">ksort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [a] =&gt; 1 [b] =&gt; 3 [c] =&gt; 2 )</span></span><br></pre></td></tr></table></figure></li><li><code>krsort()</code> ：根据键名对数组进行降序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">krsort</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>); <span class="comment">// 输出：Array ( [c] =&gt; 2 [b] =&gt; 3 [a] =&gt; 1 )</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><h3 id="strpos"><a href="#strpos" class="headerlink" title="strpos"></a>strpos</h3><p><strong>判断一个字符串是否包含某个字符</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;这是一个包含staffVersionId的字符串&#x27;</span>;</span><br><span class="line"><span class="variable">$targetStr</span> = <span class="string">&#x27;staffVersionId&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>, <span class="variable">$targetStr</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;包含目标字符串&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;不包含目标字符串&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取当前的年份和月份"><a href="#获取当前的年份和月份" class="headerlink" title="获取当前的年份和月份"></a>获取当前的年份和月份</h3><p>获取当前年份和月份的字符串形式（例如”2024-01”）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$month</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">PHP 开发常用的方法总结</summary>
    
    
    
    <category term="后端" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="PHP" scheme="https://fanxing28.github.io/categories/%E5%90%8E%E7%AB%AF/PHP/"/>
    
    
    <category term="后端" scheme="https://fanxing28.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="PHP" scheme="https://fanxing28.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>JS 面向对象和构造函数</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2023-12-14T14:48:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-面向对象和面向过程"><a href="#一-面向对象和面向过程" class="headerlink" title="一. 面向对象和面向过程"></a>一. 面向对象和面向过程</h2><h3 id="1-面向过程的基本概念"><a href="#1-面向过程的基本概念" class="headerlink" title="(1) 面向过程的基本概念"></a>(1) 面向过程的基本概念</h3><p>面向过程(Procedure Oriented)是一种<strong>以过程为中心</strong>的编程思想。<br><strong>面向过程</strong>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。是一种思考问题的基础方法。</p><blockquote><p><strong>简单理解</strong>：面向过程就是任何事情都亲力亲为，很机械，像个步兵。</p></blockquote><h3 id="2-面向对象的基本概念"><a href="#2-面向对象的基本概念" class="headerlink" title="(2) 面向对象的基本概念"></a>(2) 面向对象的基本概念</h3><p>面向对象(Object Oriented)是软件开发方法中的一种；是一种对现实世界理解和抽象的方法；是思考问题相对高级的方法。<br><strong>面向对象是把构成问题事务分解成各个对象</strong>，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。</p><blockquote><p><strong>简单理解</strong>：面向对象就像战场上的指挥官，指挥战斗而不必知道具体执行的过程。</p></blockquote><p><strong>注</strong>：面向对象：对象来自于类，必须先有类在有对象，类在js中也叫构造函数。<br><strong>面向对象和面向过程的联系</strong>：面向对象就是面向过程的封装。</p><h2 id="二-面向对象和面向过程的区别"><a href="#二-面向对象和面向过程的区别" class="headerlink" title="二. 面向对象和面向过程的区别"></a>二. 面向对象和面向过程的区别</h2><ol><li>面向对象是相对面向过程而言的，面向对象包含了面向过程的思想。</li><li>面向过程就是分析出解决问题所需要的步骤，关注的是解决问题需要那些步骤。</li><li>面向对象是把构成问题事务分解成各个对象，关注的是解决问题需要那些对象。</li></ol><h2 id="三-构造函数的推导"><a href="#三-构造函数的推导" class="headerlink" title="三. 构造函数的推导"></a>三. 构造函数的推导</h2><p><strong>推导过程</strong>:star2:：面向对象 &#x3D;&gt; 对象 &#x3D;&gt; 创建对象 &#x3D;&gt; 代码冗余 &#x3D;&gt; 工厂函数 &#x3D;&gt; 识别问题 &#x3D;&gt; 以系统对象为参考 &#x3D;&gt; 推导出构造函数<br><strong>详细的推导过程</strong>：</p><ol><li>首先，创建一个对象，添加属性和方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj1.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">obj1.<span class="title function_">showinfo</span>() <span class="comment">// 我的名字叫zs,我今年18岁</span></span><br></pre></td></tr></table></figure>提到创建一个对象，是不是想问，可不可以创建多个对象&#x3D;&gt;可以，最原始的方法：重复创建。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj1.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">obj2.<span class="property">age</span> = <span class="number">17</span>;</span><br><span class="line">obj2.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj3.<span class="property">name</span> = <span class="string">&#x27;wangwu&#x27;</span>;</span><br><span class="line">obj3.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line">obj3.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>显然上述创建多个对象的方式非常的麻烦，而且造成了代码的冗余，此时有什么办法可以解决呢:question: &#x3D;&gt; <strong>函数封装</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age</span>) &#123; </span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name</span><br><span class="line">    obj.<span class="property">age</span> = age;</span><br><span class="line">    obj.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="title function_">createPerson</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>); <span class="comment">// zs</span></span><br><span class="line">obj1.<span class="title function_">showinfo</span>(); <span class="comment">// 我的名字叫zs,我今年18岁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title function_">createPerson</span>(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">17</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>); <span class="comment">// lisi</span></span><br><span class="line">obj2.<span class="title function_">showinfo</span>(); <span class="comment">// 我的名字叫lisi,我今年17岁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="title function_">createPerson</span>(<span class="string">&#x27;wangwu&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3.<span class="property">name</span>); <span class="comment">// wangwu</span></span><br><span class="line">obj3.<span class="title function_">showinfo</span>(); <span class="comment">// 我的名字叫wangwu,我今年19岁</span></span><br></pre></td></tr></table></figure><strong>注</strong>：封装完成，可以解决创建多个对象代码冗余问题，而且将这一函数称之为<strong>工厂函数</strong>。</li><li>此时，使用函数封装确实可以解决创建多个对象代码冗余问题，但是工厂函数无法解决识别问题。无法像Array，Date一样虽然属于对象，拥有自己独立的名称。<blockquote><p>因为创建的对象都是基于new Object()完成的，通过工厂函数看得见的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age</span>) &#123; <span class="comment">// 工厂函数</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name</span><br><span class="line">    obj.<span class="property">age</span> = age;</span><br><span class="line">    obj.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>继续<strong>以系统对象为参考</strong>，于是在调用函数的前面<strong>添加new关键字</strong>，得到最终构造函数。<br> <strong>构造函数</strong>：new关键字调用，首字母大写，根据前面的概念，构造函数就是类，同时也知道系统的类是如何产生的。<br> 以 new 操作符调用函数的时候，函数内部发生以下变化：<br>1.创建一个空对象，并且this变量引用该对象，同时还继承了该函数的原型。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CreatePerson</span>(<span class="params">name, age</span>) &#123; <span class="comment">// 构造函数，构造函数里面的this指向实例对象，createPerson:类(构造函数)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age; <span class="comment">// 属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showinfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">CreatePerson</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>); <span class="comment">// obj1:实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>);</span><br><span class="line">obj1.<span class="title function_">showinfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">CreatePerson</span>(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">17</span>); <span class="comment">// obj2:实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>);</span><br><span class="line">obj2.<span class="title function_">showinfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="keyword">new</span> <span class="title class_">CreatePerson</span>(<span class="string">&#x27;wangwu&#x27;</span>, <span class="number">19</span>); <span class="comment">// obj3:实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3.<span class="property">name</span>);</span><br><span class="line">obj3.<span class="title function_">showinfo</span>();</span><br></pre></td></tr></table></figure><strong>注</strong>：构造函数里面不要书写return<blockquote><p>因为构造函数里没有显式调用return，默认返回的是this对象，也就是新创建的实例对象。</p></blockquote></li></ol><p>2.属性和方法被加入到this引用的对象中。<br>3.并且最后隐式的返回this。</p><h2 id="四-构造函数"><a href="#四-构造函数" class="headerlink" title="四. 构造函数"></a>四. 构造函数</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>构造函数其实就是一个函数，只不过使用的时候需要和new 关键字连用，首字母大写。</p><blockquote><p>和普通函数一样， 只不过调用的时候要和 new 调用 ，不然就是一个普通函数调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// 块作用域，外面无法获取，内部使用</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>; <span class="comment">// 局部变量，外面无法获取，内部使用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age; <span class="comment">// 属性，实例对象可以自由获取，this-&gt;实例对象 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f1 = <span class="keyword">new</span> <span class="title function_">fn</span>(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">let</span> f2 = <span class="keyword">new</span> fn; <span class="comment">// 这种写法也支持，弊端是无法传递参数</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>： 不写 new 的时候就是普通函数调用，没有创造对象的能力，但如果只是首字母不大写，只要和 new 连用，就有创造对象的能力。</p><h3 id="2-构造函数特点总结"><a href="#2-构造函数特点总结" class="headerlink" title="(2) 构造函数特点总结"></a>(2) 构造函数特点总结</h3><ol><li>首字母大写(推荐)<blockquote><p>方便区分</p></blockquote></li><li>构造函数里面不要书写return<br> 构造函数里没有显式调用return，默认返回的是this对象，也就是新创建的实例对象。<blockquote><p>当构造函数里调用return时，分两种情况：</p></blockquote></li></ol><ul><li>​ return的是五种简单数据类型：String，Number，Boolean，Null，Undefined。这种情况下，忽视return值，依然返回this对象。</li><li>​ return的是Object。这种情况下，不再返回this对象，而是返回return语句的返回值。</li></ul><ol start="3"><li>构造函数的调用必须和new连用<blockquote><p>只有和new连用，才有构造函数的能力，不和new连用，就是一个普通函数</p></blockquote></li><li>构造函数的this<blockquote><p>构造函数的this指向：本次调用被自动创建的对象</p></blockquote></li></ol><ul><li>自动创建出来的对象叫做 <strong>实例对象</strong></li><li>这个创建对象的过程叫做  <strong>实例化 的过程</strong></li></ul><ol start="5"><li>箭头函数没有this , 构造函数不能使用箭头函数书写<br><strong>构造函数的弊端</strong>：构造函数的方法也是私有的<br><strong>解决弊端的方式</strong>：将构造函数的方法书写在原型上</li></ol><h3 id="3-构造函数案例-memo"><a href="#3-构造函数案例-memo" class="headerlink" title="(3) 构造函数案例:memo:"></a>(3) 构造函数案例:memo:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Drag</span>(<span class="params">selector</span>) &#123; <span class="comment">// 创建拖拽的构造函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// this -&gt; 实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">box</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector); <span class="comment">// 属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 初始化方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">box</span>.<span class="property">onmousedown</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                e = e || event;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> sx = e.<span class="property">offsetX</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> sy = e.<span class="property">offsetY</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    e = e || event;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">box</span>.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">clientX</span> - sx + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">box</span>.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">clientY</span> - sy + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let d1 = new Drag(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// d1.init();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let d1 = new Drag;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// d1.init();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Drag</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Drag</span>(<span class="string">&#x27;.box1&#x27;</span>).<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Drag</span>(<span class="string">&#x27;.box2&#x27;</span>).<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：<br>？</p>]]></content>
    
    
    <summary type="html">JS 面向对象和构造函数</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 原型与原型链以及判断数据类型方式</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%BB%A5%E5%8F%8A%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E5%BC%8F/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%BB%A5%E5%8F%8A%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E5%BC%8F/</id>
    <published>2023-12-14T14:45:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-原型（prototype）"><a href="#一-原型（prototype）" class="headerlink" title="一. 原型（prototype）"></a>一. 原型（prototype）</h2><blockquote><p>将公共的方法提取出来，都写在原型上（只用书写和创建一次）</p></blockquote><p>原型的出现是为了解决构造函数方法私有化问题。<br>在内置构造函数的原型上扩展一个新方法，所有的数组都可以使用这个方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getMin</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    min = <span class="title class_">Math</span>.<span class="title function_">min</span>(...<span class="variable language_">this</span>); <span class="comment">// this指向arr</span></span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">11</span>, <span class="number">435</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">getMin</span>()); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><strong>原型概念</strong>：</p><blockquote><p>每一个函数：天生自带一个属性 prototype（构造函数的原型也是一个对象）（叫做构造原型） 每一个对象：天生自带一个属性 <code>__proto__</code>（指向所属构造函数的原型）（叫做内置原型）</p></blockquote><p><strong>实例化对象</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><ul><li>p 是 Person的实例对象</li><li>p 的构造函数是 Person</li><li>p 的 <code>__proto__</code> 指向 Person.prototype<br><strong>JS中内置的构造函数</strong>：</li><li>Object</li><li>Array</li><li>Date</li><li>RegExp</li><li>Function<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="comment">//  任何一个数组，所属的构造函数是 Array</span></span><br><span class="line"><span class="comment">//  任何一个对象，所属的构造函数是 Object</span></span><br></pre></td></tr></table></figure><strong>用数组为例</strong>：</li><li>任何一个数组，所属的构造函数都是Array</li><li>Array原型上的方法，都是给数组使用<br><strong>一切皆对象</strong></li><li>只要是 [] 所属的构造函数就是Array</li><li>只要是 {} 所属的构造函数就是Object</li><li>只要是 function () {} 所属的构造函数就是Function<br><strong>问答？</strong></li></ul><ol><li>原型是什么 ？<blockquote><p>一个对象，我们也称为 prototype 为原型对象。</p></blockquote></li><li>原型的作用是什么 ？<blockquote><p>共享方法。</p></blockquote></li><li>为什么要使用原型对象<blockquote><p>因为构造函数方法虽然很好用，但是存在浪费内存的问题。每一次调用构造函数中的方法都会重新开辟一块新的内存存储（浪费了空间），而原型对象（prototype）可以对象共享，可以节省内存。</p></blockquote></li></ol><h2 id="二-原型链"><a href="#二-原型链" class="headerlink" title="二. 原型链"></a>二. 原型链</h2><p><strong>原型链</strong>：使用<code>__proto__</code>串联起来的链状结构<br><strong>对象的访问机制</strong>：</p><ul><li>当访问一个对象成员的时候</li><li>首先在该对象自己身上查找，如果有直接使用，停止查找</li><li>如果没有，会自动去到<code>__proto__</code>查找，如果有直接使用，停止查找</li><li>如果仍然没有，继续去到<code>__proto__</code>在上一级查找</li><li>如果没有找到，返回undefined, （指向了原型链的顶级 null，表示该属性不存在）<br><strong>官方</strong>：每个实例对象（object）都有一个私有属性（称之为 <strong>proto</strong>）指向它的构造函数的原型对象（prototype）。该原型对象也有一个自己的原型对象（<strong>proto</strong>），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  七个指向问题：(p ==&gt; Person的实例对象)</span></span><br><span class="line"><span class="comment">      寻找思路主要还是要先了解：该对象所属的构造函数是什么？</span></span><br><span class="line"><span class="comment">          （实例对象指向构造函数的原型）</span></span><br><span class="line"><span class="comment">          1.p.__pro__                     ==&gt; Person.prototype </span></span><br><span class="line"><span class="comment">          （构造函数的原型也是一个对象，所以构造函数的原型指向Object的原型）</span></span><br><span class="line"><span class="comment">          2.Person.prototype.__proto__    ==&gt; Object.prototype</span></span><br><span class="line"><span class="comment">          （构造函数是一个函数，所以构造函数指向Function的原型）</span></span><br><span class="line"><span class="comment">          3.Person.__proto__              ==&gt; Function.prototype</span></span><br><span class="line"><span class="comment">          （Function是一个函数，所以Function指向自身）</span></span><br><span class="line"><span class="comment">          4.Function.__proto__            ==&gt; Function.prototype</span></span><br><span class="line"><span class="comment">          （Object）</span></span><br><span class="line"><span class="comment">          5.Object.__proto__              ==&gt; Function.prototype</span></span><br><span class="line"><span class="comment">          （Function.prototype也是一个对象，所以Function的原型指向Object的原型）</span></span><br><span class="line"><span class="comment">          6.Function.prototype.__proto__  ==&gt; Object.prototype</span></span><br><span class="line"><span class="comment">          （Object的原型指向null(结束)）</span></span><br><span class="line"><span class="comment">          7.Object.prototype.__proto__    ==&gt; null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   所以以下等式结果全为true</span></span><br><span class="line"><span class="comment">        p.__proto__ === Person.prototype</span></span><br><span class="line"><span class="comment">        Person.prototype.__proto__ === Object.prototype</span></span><br><span class="line"><span class="comment">        Person.__proto__ === Function.prototype</span></span><br><span class="line"><span class="comment">        Function.__proto__ === Function.prototype</span></span><br><span class="line"><span class="comment">        Object.__proto__ === Function.prototype</span></span><br><span class="line"><span class="comment">        Function.prototype.__proto__ === Object.prototype</span></span><br><span class="line"><span class="comment">        Object.prototype.__proto__ === null</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><strong>原型链指向图</strong>：<br>？</li></ul><h2 id="三-判断数据类型"><a href="#三-判断数据类型" class="headerlink" title="三. 判断数据类型"></a>三. 判断数据类型</h2><p><strong>判断数据类型的方式</strong>：</p><ol><li><code>typeof</code><br> 语法：typeof(要测试的数据) 返回值：测试数据对应的数据类型 缺点：只能检测 基本数据类型和函数 注：检测函数时，得到的返回值为function<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="number">12</span>)); <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="string">&#x27;null&#x27;</span>)); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="literal">null</span>)); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="literal">undefined</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (<span class="literal">true</span>)); <span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> ([])); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> (&#123;&#125;)); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>使用typeof方式检测时各数据类型返回的值：</li></ol><ul><li>检查Undefined类型的值时，返回”undefined”。</li><li>检查Number类型的值时，返回”number”（包括NaN 和 Infinity）。</li><li>检查Boolean类型的值时，返回”boolean”。</li><li><strong>检查Null类型的值时，会返回”object”。</strong>(包括对象、数组)</li><li>检查String类型的值时，会返回”string”。</li><li>检查Symbol类型的值时，返回”symbol”</li><li>检查函数时，返回”function”</li></ul><ol start="2"><li><code>constructor</code><br> 语法：数据结构.constructor 返回值：该数据结构所属的构造函数 缺点：无法检测 undefined 和 null<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">constructor</span>); <span class="comment">// ƒ Array() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">constructor</span>); <span class="comment">// ƒ Object() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;.<span class="property">constructor</span>); <span class="comment">// ƒ Function() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">1</span>).<span class="property">constructor</span>); <span class="comment">// ƒ Number() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">&#x27;zs&#x27;</span>).<span class="property">constructor</span>); <span class="comment">// ƒ String() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">null</span>).<span class="property">constructor</span>); <span class="comment">// Uncaught TypeError: Cannot read properties of null (reading &#x27;constructor&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">undefined</span>).<span class="property">constructor</span>); <span class="comment">// Uncaught TypeError: Cannot read properties of undefined (reading &#x27;constructor&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><code>instanceof</code><br> 语法：数据结构 instanceof 构造函数 返回值：true&#x2F;false 缺点：无法检测 undefined 和 null<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Number</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><code>Object.prototype.toString.call()</code><br> 语法：Object.prototype.toString.call(要测试的数据) 返回值：’[Object 数据类型]’ 所有数据类型都可以检测<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>)); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])); <span class="comment">// [object Array]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;)); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>)); <span class="comment">// [object Boolean]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123</span>)); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">apply</span>(<span class="number">123</span>)); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">bind</span>(<span class="number">123</span>)()); <span class="comment">// [object Number]</span></span><br></pre></td></tr></table></figure><strong>注</strong>：不必一定用<code>call()</code>也可以使用<code>bind()()</code>或<code>apply()</code>，只要是立即执行即可。</li></ol>]]></content>
    
    
    <summary type="html">JS 原型与原型链以及判断数据类型方式</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 继承</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E7%BB%A7%E6%89%BF/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E7%BB%A7%E6%89%BF/</id>
    <published>2023-12-14T14:42:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-继承概念"><a href="#一-继承概念" class="headerlink" title="一. 继承概念"></a>一. 继承概念</h2><p>继承：一个构造函数中的实例使用另一个构造函数上的属性和方法</p><h3 id="1-为什么要学习继承"><a href="#1-为什么要学习继承" class="headerlink" title="1. 为什么要学习继承?"></a>1. 为什么要学习继承?</h3><p>写的构造函数, 定义了⼀个类型 (⼈类), 万⼀项⽬⾮常⼤, ⼜有了细化的多个类型 (⽼师, ⼯⼈, 学⽣) 学习继承, 可以让多个构造函数之间建⽴关联, 便于管理和复⽤</p><h3 id="2-什么是继承"><a href="#2-什么是继承" class="headerlink" title="2. 什么是继承?"></a>2. 什么是继承?</h3><p>继承: 从别⼈那⾥, 继承东⻄过来 (财产, 房产) 代码层⾯的继承: 继承⼀些属性构造的过程和⽅法</p><h2 id="二-原型继承"><a href="#二-原型继承" class="headerlink" title="二. 原型继承"></a>二. 原型继承</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p><strong>原型继承</strong>：</p><ul><li>利用自定义原型的方法来实现继承关系</li><li>核心：子类的原型指向父类的实例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建父类的实例对象</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 原型继承：子类的原型指向父类的实例</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = f;</span><br><span class="line"><span class="comment">// 创建子类的实例对象</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;ls&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br><span class="line"><span class="comment">/*ƒ () &#123;</span></span><br><span class="line"><span class="comment">            console.log(this.age);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">s.<span class="title function_">sayHi</span>(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-原型继承的原理"><a href="#2-原型继承的原理" class="headerlink" title="(2) 原型继承的原理"></a>(2) 原型继承的原理</h3><p>子类的原型(Son.prototype)指向了父类的实例（new Father()也就是f）<br>子类实例化的对象想要访问一个属性时：</p><ul><li>首先在自己身上寻找，</li><li>如果没有，沿着 <code>__proto__</code> 寻找，</li><li>子类的实例化对象的<code>s.__proto__</code>是所属的构造函数的原型 <code>Son.prototype == f</code></li></ul><h3 id="3-原型继承的优缺点"><a href="#3-原型继承的优缺点" class="headerlink" title="(3) 原型继承的优缺点"></a>(3) 原型继承的优缺点</h3><p>优点：可以实现继承父类的属性和方法<br>缺点：</p><ol><li>子类的原型被占用，之后往子类的原型上加属性和方法无效</li><li>继承下来的属性不在子类身上，在原型身上</li></ol><h2 id="三-借用继承"><a href="#三-借用继承" class="headerlink" title="三. 借用继承"></a>三. 借用继承</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>借用继承又叫：借用构造函数继承、call继承<br><strong>核心</strong>：把父类构造函数当做普通函数用，并利用call()、apply()、bind()()修改this的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类的实例对象</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;zs&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Son&amp;nbsp;&#123;sex: &#x27;男&#x27;, name: &#x27;zs&#x27;, age: 20&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>分析</strong>：</p></blockquote><p>Father不和new连用，就是一个普通函数 普通函数调用，this指向window, 希望Son调用的时候，既使用Father里面的内容，同时希望Father里面的内容改成自己的，也就是说，希望使用的时候，this指向自己的this 希望修改Father普通函数的this指向 <code>call apply bind</code>都可以实现，只要注意参数和调用方式就可以了</p><h3 id="2-优缺点"><a href="#2-优缺点" class="headerlink" title="(2) 优缺点"></a>(2) 优缺点</h3><p>优点：</p><ol><li>可以把属性继承在自己身上</li><li>有自己的原型<br>缺点：只能继承父类的属性，不能继承原型的方法</li></ol><h2 id="四-组合继承"><a href="#四-组合继承" class="headerlink" title="四. 组合继承"></a>四. 组合继承</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>把原型继承和借用继承组合在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="comment">// 借用继承</span></span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型继承</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;女&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Son&amp;nbsp;&#123;sex: &#x27;女&#x27;, name: &#x27;ls&#x27;, age: 20&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        ƒ () &#123;</span></span><br><span class="line"><span class="comment">            console.log(this.age);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><h3 id="2-优缺点-1"><a href="#2-优缺点-1" class="headerlink" title="(2) 优缺点"></a>(2) 优缺点</h3><p>优点：</p><ol><li>可以继承属性和方法</li><li>继承的属性在自己身上<br>缺点：原型上存在一套属性</li></ol><h2 id="五-拷贝继承"><a href="#五-拷贝继承" class="headerlink" title="五. 拷贝继承"></a>五. 拷贝继承</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p><strong>拷贝继承</strong>：把父类身上的所有内容复制一份放在子类的原型上<br>实现：利用 for…in 循环遍历对象<br><strong>in 关键字的作用</strong>：</p><blockquote><p>判断字符串是不是对象上的一个属性 返回值：true&#x2F;false 特点：不只是对象本身，原型上的也能访问到</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sayHi&#x27;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="2-hasOwnProperty-方法"><a href="#2-hasOwnProperty-方法" class="headerlink" title="(2) hasOwnProperty() 方法"></a>(2) hasOwnProperty() 方法</h3><p>作用：判断某个属性是否在某个对象上<br>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;属性名&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回值：true&#x2F;false</p><ul><li>true 表示该属性在该对象上</li><li>false 表示不在<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;sayHi&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-拷贝继承案例"><a href="#3-拷贝继承案例" class="headerlink" title="(3) 拷贝继承案例"></a>(3) 拷贝继承案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">Father</span>(...arg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> f) &#123;</span><br><span class="line">        <span class="comment">// 拷贝继承 把所有内容复制一份放在子类的原型上</span></span><br><span class="line">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>[k] = f[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;男&quot;</span>, <span class="string">&quot;zs&quot;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure><h2 id="六-类继承（ES6）"><a href="#六-类继承（ES6）" class="headerlink" title="六. 类继承（ES6）"></a>六. 类继承（ES6）</h2><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 必须先写一个super() 相当于借用继承中把父类的方法用call在子类中执行一次</span></span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            super 关键字用于访问和调用一个对象的父对象上的函数。</span></span><br><span class="line"><span class="comment">            在构造函数中使用时，super关键字将单独出现，并且必须在使用 this 关键字之前使用。super 关键字也可以用来调用父对象上的函数。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：ES6的类可以继承ES5的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 用构造函数实现父类</span></span><br><span class="line"><span class="comment">    function Father(name, age) &#123;</span></span><br><span class="line"><span class="comment">        this.name = name</span></span><br><span class="line"><span class="comment">        this.age = age</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Father.prototype.sayHi = function () &#123;</span></span><br><span class="line"><span class="comment">        console.log(this.age);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Father.prototype.sayHello = function () &#123;</span></span><br><span class="line"><span class="comment">        console.log(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">        <span class="comment">// 等同于借用继承中，把父类的函数放在子类中在执行一次的操作</span></span><br><span class="line">        <span class="variable language_">super</span>(...arg);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;女&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Son&amp;nbsp;&#123;name: &#x27;tom&#x27;, age: 20, sex: &#x27;女&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br><span class="line">s.<span class="title function_">sayHi</span>(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h2 id="七-私有属性和方法"><a href="#七-私有属性和方法" class="headerlink" title="七. 私有属性和方法"></a>七. 私有属性和方法</h2><p>在继承中，父类中的部分方法和属性不希望子类继承<br><strong>静态语法</strong>：static 方法</p><ul><li>静态：书写在类自己身上，专门给自己使用，不可以被子类继承</li><li>动态：书写在原型上，可以被子类继承<br><strong>静态方法注意点</strong>：</li><li>静态方法只能由类进行调用</li><li>实例方法只能由实例对象进行调用</li><li>静态方法名和实例方法名<strong>允许重名</strong>，因为类内部的静态方法的调用者只能为类，实例方法的调用者只能为实例对象，不会在调用时造成歧义<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">        // 用构造函数实现父类</span></span><br><span class="line"><span class="comment">        function Father(name, age) &#123;</span></span><br><span class="line"><span class="comment">            this.name = name</span></span><br><span class="line"><span class="comment">            this.age = age</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        Father.prototype.sayHi = function () &#123;</span></span><br><span class="line"><span class="comment">            console.log(this.age);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        // ES5静态方法</span></span><br><span class="line"><span class="comment">        Father.sayHello = function () &#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;Hello&#x27;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">sex, ...arg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(...arg)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Son&amp;nbsp;&#123;name: &#x27;tom&#x27;, age: 18, sex: &#x27;男&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayHi</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">继承：一个构造函数中的实例使用另一个构造函数上的属性和方法</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 事件轮询机制</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E4%BA%8B%E4%BB%B6%E8%BD%AE%E8%AF%A2%E6%9C%BA%E5%88%B6/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E4%BA%8B%E4%BB%B6%E8%BD%AE%E8%AF%A2%E6%9C%BA%E5%88%B6/</id>
    <published>2023-12-14T14:41:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<p>事件轮询 (客户端)<br>开始轮询时间：从开始执行代码的时候就开始执行轮询<br><strong>规则</strong>：</p><ol><li>从第一个宏任务开始（一般是整个JavaScript代码段）</li><li>每执行完一个宏任务，清空一次微任务队列里面的所有内容</li><li>然后再执行一个宏任务</li><li>往复执行以上操作，直到所有队列任务都清空结束<br><strong>关键词</strong>：</li></ol><ul><li>单线程：JS是一个单线程的代码执行机制，如果逐行执行代码, 会阻塞代码执行</li><li>调用栈：用来执行代码的空间 （栈: 后进先出）</li><li>队列：存放异步任务 （队列: 先进先出）</li><li>宏任务队列：JS整块代码(script)、setTimeout、setInterval…</li><li>微任务队列：Promise.then…<br>?<br><strong>案例</strong>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">8</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12</span>)</span><br><span class="line"><span class="comment">// 输出的顺序：1 3 9 12 4 10 2 11 5 6 8 7</span></span><br></pre></td></tr></table></figure><strong>上述案例代码分析</strong>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出的顺序：1 3 9 12 4 10 2 11 5 6 8 7</span></span><br><span class="line"><span class="comment">// 第一次执行宏任务（整个JavaScript代码段）：</span></span><br><span class="line">  第<span class="number">1</span>行 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) 同步代码          =&gt; 直接执行，输出<span class="number">1</span></span><br><span class="line">  第<span class="number">3</span>-<span class="number">5</span>行 =&gt; 第一个定时器（异步代码）   =&gt; 放入<span class="variable constant_">WEBAPI</span>中等待分配（分配到宏任务中）</span><br><span class="line">  第<span class="number">7</span>-<span class="number">10</span>行 =&gt; 同步代码                 =&gt; 直接执行 ，输出<span class="number">3</span></span><br><span class="line">  第<span class="number">10</span>-<span class="number">12</span>行 =&gt; 第一个 <span class="keyword">new</span> <span class="title class_">Promise</span>().<span class="title function_">then</span>() (异步代码) =&gt; 放入<span class="variable constant_">WEBAPI</span>中等待分配（分配到微任务中）</span><br><span class="line">  第<span class="number">14</span>-<span class="number">25</span>行 =&gt; 第二个定时器（异步代码） =&gt; 放入<span class="variable constant_">WEBAPI</span>中等待分配（分配到宏任务中）</span><br><span class="line">  第<span class="number">27</span>-<span class="number">30</span>行 =&gt; 同步代码                =&gt; 直接执行 ，输出<span class="number">9</span></span><br><span class="line">  第<span class="number">30</span>-<span class="number">35</span>行 =&gt; 第二个 <span class="keyword">new</span> <span class="title class_">Promise</span>().<span class="title function_">then</span>()（异步代码）=&gt; 放入<span class="variable constant_">WEBAPI</span>中等待分配（分配到微任务中）</span><br><span class="line">  第<span class="number">37</span>行    =&gt; 同步代码                =&gt; 直接执行，输出<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    至此  输出 1,3,9,12 </span></span><br><span class="line"><span class="comment">    宏任务中：第一个定时器（0ms）、第二个定时器（500ms）</span></span><br><span class="line"><span class="comment">    微任务中：第一个 new Promise().then()、第二个 new Promise().then()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 第一次宏任务结束，开始执行第一次微任务队列</span></span><br><span class="line"></span><br><span class="line">  第<span class="number">10</span>-<span class="number">12</span>行 =&gt; 第一个 <span class="keyword">new</span> <span class="title class_">Promise</span>().<span class="title function_">then</span>(),输出<span class="number">4</span></span><br><span class="line">  第<span class="number">30</span>-<span class="number">35</span>行 =&gt; 第二个 <span class="keyword">new</span> <span class="title class_">Promise</span>().<span class="title function_">then</span>(),输出<span class="number">10</span> </span><br><span class="line">  在第<span class="number">32</span>-<span class="number">35</span>行 =&gt; 第三个定时器  =&gt; 放入<span class="variable constant_">WEBAPI</span>中等待分配（分配到宏任务中）</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    至此  输出 1,3,9,12,4,10</span></span><br><span class="line"><span class="comment">    宏任务中：第一个定时器（0ms）、第三个定时器（0ms）、第二个定时器（500ms）</span></span><br><span class="line"><span class="comment">    微任务中：无</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 第一次微任务队列所有微任务结束，开始执行第二次宏任务</span></span><br><span class="line"></span><br><span class="line">  第<span class="number">3</span>-<span class="number">5</span>行第一个定时器（0ms）,输出<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    至此  输出 1,3,9,12,4,10,2</span></span><br><span class="line"><span class="comment">    宏任务中：第三个定时器（0ms）、第二个定时器（500ms）</span></span><br><span class="line"><span class="comment">    微任务中：无</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 此时微任务队列没有等待队列，开始执行第三次宏任务</span></span><br><span class="line"></span><br><span class="line">  第<span class="number">32</span>-<span class="number">35</span>行第三个定时器（0ms）,输出<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    至此  输出 1,3,9,12,4,10,2,11</span></span><br><span class="line"><span class="comment">    宏任务中：第二个定时器（500ms）</span></span><br><span class="line"><span class="comment">    微任务中：无</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 此时微任务队列没有等待队列，开始执行第四次宏任务</span></span><br><span class="line"></span><br><span class="line">  第<span class="number">14</span>-<span class="number">25</span>行第二个定时器(<span class="attr">time</span>:500ms)</span><br><span class="line">  第<span class="number">15</span>行 （同步代码） =&gt; 直接执行,输出<span class="number">5</span></span><br><span class="line">  第<span class="number">17</span>行 （同步代码） =&gt; 直接执行,输出<span class="number">6</span></span><br><span class="line">  第<span class="number">18</span>行 =&gt; 第五个定时器（异步代码） =&gt; 放入<span class="variable constant_">WEBAPI</span>中等待分配（分配到宏任务中）</span><br><span class="line">  第<span class="number">19</span>行 =&gt; 第三个 <span class="keyword">new</span> <span class="title class_">Promise</span>().<span class="title function_">then</span>()（异步代码） =&gt; 放入<span class="variable constant_">WEBAPI</span>中等待分配（分配到微任务中）</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    至此  输出 1,3,9,12,4,10,2,11,5,6</span></span><br><span class="line"><span class="comment">    宏任务中：第五个定时器（500ms）</span></span><br><span class="line"><span class="comment">    微任务中：第三个 new Promise().then()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 第四次宏任务结束，执行微任务队列</span></span><br><span class="line"></span><br><span class="line">  第<span class="number">19</span>行 =&gt; 第三个 <span class="keyword">new</span> <span class="title class_">Promise</span>().<span class="title function_">then</span>(),输出<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    至此  输出 1,3,9,12,4,10,2,11,5,6,8</span></span><br><span class="line"><span class="comment">    宏任务中：第五个定时器（500ms）</span></span><br><span class="line"><span class="comment">    微任务中：无</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 微任务队列结束，执行第五次宏任务</span></span><br><span class="line"></span><br><span class="line">  第<span class="number">18</span>行 =&gt; 第五个定时器（500ms）,输出<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    至此  输出 1,3,9,12,4,10,2,11,5,6,8,7</span></span><br><span class="line"><span class="comment">    宏任务中：无</span></span><br><span class="line"><span class="comment">    微任务中：无</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终输出结果为：1,3,9,12,4,10,2,11,5,6,8,7</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">JS 事件轮询机制</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 设计模式</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-12-14T14:36:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式是我们在解决问题的时候针对特定问题给出的简洁而优化的处理方案。</p><p>设计模式（Design Pattern）是一套被反复使用，多人知晓，经过分类编目的优秀代码设计经验的总结。使用设计模式是为了重用代码，使代码更容易理解并保证代码的可靠性。使用设计模式对于自己，对他人，对系统都是有利的。设计模式使代码编制更加工程化，是软件工程的基石。</p><h2 id="一-单例模式"><a href="#一-单例模式" class="headerlink" title="一. 单例模式"></a>一. 单例模式</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>单例模式的<strong>定义</strong>是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><blockquote><p>简言之，不管你使用构造函数实例化多少回，都是同一个对象。</p></blockquote><p><strong>单例模式核心</strong>：<br>在实例化一个类的时候：</p><ul><li>先判断，之前有没有实例化过</li><li>如果有，就用之前的</li><li>如果没有，就实例化一个新的<br><strong>单例模式优点</strong>：创建对象和管理单例的职责被分布在两个不同的方法中</li></ul><h3 id="2-场景"><a href="#2-场景" class="headerlink" title="(2) 场景"></a>(2) 场景</h3><p>单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如<strong>线程池、全局缓存、浏览器中的 window</strong> 对象等。<br>在 JavaScript 开发中，单例模式的用途同样非常广泛。试想一下，当我们单击登录按钮的时候，页面中会出现一个登录浮窗，而这个<strong>登录浮窗</strong>是唯一的，无论单击多少次登录按钮，这个浮窗都只会被创建一次，那么这个登录浮窗就适合用单例模式来创建。</p><h3 id="3-案例：书写一个弹窗"><a href="#3-案例：书写一个弹窗" class="headerlink" title="(3) 案例：书写一个弹窗"></a>(3) 案例：书写一个弹窗</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">找到一个变量，初始化的时候是null </span></span><br><span class="line"><span class="comment">第一次实例化后，给这个变量赋值</span></span><br><span class="line"><span class="comment">第二次想要实例化的时候，先去看看这个变量有没有值，如果有，就用之前的</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个弹窗的构造函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">title</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">title</span> = title</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">div</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">div</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">div</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">changeTile</span>(<span class="params">title</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">title</span> = title</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">div</span>.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">title</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单例模式代码</span></span><br><span class="line"><span class="comment">// 为了避免instance这个变量污染 改成闭包</span></span><br><span class="line"><span class="keyword">const</span> singleton = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 提前设置一个变量，用来记录该构造函数有没有实例化过</span></span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">title</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断构造函数有没有实例化过 </span></span><br><span class="line">        <span class="comment">// 没有实例化过</span></span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Dialog</span>(title)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果有，就返回这个实例化对象</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 创建弹窗对象</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">singleton</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">res.<span class="title function_">changeTile</span>(<span class="string">&#x27;小花&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次创建弹窗对象</span></span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">singleton</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">res1.<span class="title function_">changeTile</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1); <span class="comment">// Dialog&amp;nbsp;&#123;title: &#x27;你好&#x27;, div: div&#125;</span></span><br></pre></td></tr></table></figure><h2 id="二-策略模式"><a href="#二-策略模式" class="headerlink" title="二. 策略模式"></a>二. 策略模式</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>策略模式的<strong>定义</strong>是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。<br>策略模式的<strong>目的</strong>是：将算法的使用与算法的实现分离开来。<br>一个基于策略模式的程序至少由两部分组成。第一个部分是一组<strong>策略类</strong>，策略类封装了具体 的算法，并负责具体的计算过程。 第二个部分是<strong>环境类Context</strong>，Context 接受客户的请求，随后 把请求委托给某一个策略类。要做到这点，说明 Context中要维持对某个策略对象的引用。</p><h3 id="2-场景-1"><a href="#2-场景-1" class="headerlink" title="(2) 场景"></a>(2) 场景</h3><p>从定义上看，策略模式就是用来封装算法的。但如果把策略模式仅仅用来封装算法，未免有一点大材小用。在实际开发中，我们通常会把算法的含义扩散开来，使策略模式也可以用来封装 一系列的“业务规则”。只要这些业务规则指向的目标一致，并且可以被替换使用，我们就可以 用策略模式来封装它们。</p><h3 id="3-案例"><a href="#3-案例" class="headerlink" title="(3) 案例"></a>(3) 案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例子  已知一个商品总价 500</span></span><br><span class="line"><span class="comment">       根据折扣计算实际价格</span></span><br><span class="line"><span class="comment">       例如：80%  70%  1000-300   800-50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过闭包的形式计算折扣</span></span><br><span class="line"><span class="keyword">const</span> calcDiscount = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> priceList = &#123;</span><br><span class="line">        <span class="string">&quot;80%&quot;</span>: <span class="keyword">function</span> (<span class="params">total</span>) &#123; <span class="keyword">return</span> (total * <span class="number">0.8</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) &#125;,</span><br><span class="line">        <span class="string">&quot;70%&quot;</span>: <span class="keyword">function</span> (<span class="params">total</span>) &#123; <span class="keyword">return</span> (total * <span class="number">0.7</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) &#125;,</span><br><span class="line">        <span class="string">&quot;50%&quot;</span>: <span class="keyword">function</span> (<span class="params">total</span>) &#123; <span class="keyword">return</span> (total * <span class="number">0.5</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params">total, type</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!priceList[type]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;折扣错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 反之折扣正确,返回计算后的价格</span></span><br><span class="line">        <span class="keyword">return</span> priceList[type](total);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接下来根据需求定义一系列的算法</span></span><br><span class="line">    <span class="comment">// 添加折扣</span></span><br><span class="line">    inner.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">type, fn</span>) &#123;</span><br><span class="line">        priceList[type] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除折扣</span></span><br><span class="line">    inner.<span class="property">remove</span> = <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> priceList[type];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改折扣</span></span><br><span class="line">    inner.<span class="property">change</span> = <span class="keyword">function</span> (<span class="params">type, fn</span>) &#123;</span><br><span class="line">        priceList[type] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查看折扣</span></span><br><span class="line">    inner.<span class="property">look</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> priceList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试算法</span></span><br><span class="line"><span class="comment">// 1.计算价格</span></span><br><span class="line"><span class="comment">// const res = calcDiscount(1400, &quot;80%&quot;);</span></span><br><span class="line"><span class="comment">// console.log(res); // 1120.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.添加折扣</span></span><br><span class="line"><span class="comment">// calcDiscount.add(&quot;40%&quot;, function (total) &#123; return (total * 0.4).toFixed(2) &#125;);</span></span><br><span class="line"><span class="comment">// const res = calcDiscount(1500, &quot;40%&quot;)</span></span><br><span class="line"><span class="comment">// console.log(res); // 600</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.删除折扣</span></span><br><span class="line"><span class="comment">// calcDiscount.remove(&quot;80%&quot;);</span></span><br><span class="line"><span class="comment">// const res = calcDiscount(1200, &quot;80%&quot;);</span></span><br><span class="line"><span class="comment">// console.log(res); // 折扣错误  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.修改折扣</span></span><br><span class="line">calcDiscount.<span class="title function_">change</span>(<span class="string">&quot;70%&quot;</span>, <span class="keyword">function</span> (<span class="params">total</span>) &#123; <span class="keyword">return</span> (total * <span class="number">0.4</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) &#125;);</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">calcDiscount</span>(<span class="number">1200</span>, <span class="string">&quot;70%&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 480.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.查看折扣</span></span><br><span class="line"><span class="comment">// console.log(calcDiscount.look()); // &#123;80%: ƒ, 70%: ƒ, 50%: ƒ&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-优缺点"><a href="#4-优缺点" class="headerlink" title="(4) 优缺点"></a>(4) 优缺点</h3><p><strong>优点</strong>：</p><ul><li>策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。</li><li>策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的策略中，使得它们易于切换，易于理解，易于扩展。</li><li>策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。</li><li>在策略模式中利用组合和委托来让环境类拥有执行算法的能力，这也是继承的一种更轻便的替代方案。<br><strong>缺点</strong>：</li><li>增加许多策略类或者策略对象，但实际上这比把它们负责的 逻辑堆砌在环境类中要好。</li><li>要使用策略模式，必须了解所有的策略，必须了解各个策略之间的不同点， 这样才能选择一个合适的策略。</li></ul><h2 id="三-发布-订阅模式"><a href="#三-发布-订阅模式" class="headerlink" title="三. 发布-订阅模式"></a>三. 发布-订阅模式</h2><h3 id="1-什么是发布-订阅模式"><a href="#1-什么是发布-订阅模式" class="headerlink" title="(1) 什么是发布-订阅模式"></a>(1) 什么是发布-订阅模式</h3><p>通常也被叫做观察者模式或消息模式</p><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p><strong>发布-订阅模式</strong>其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都将得到状态改变的通知。<br>订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Event Channel），当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。</p><h4 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h4><p><strong>例子1</strong>：比如我们很喜欢看某个公众号号的文章，但是我们不知道什么时候发布新文章，要不定时的去翻阅；这时候，我们可以关注该公众号，当有文章推送时，会有消息及时通知我们文章更新了。<br>上面一个看似简单的操作，其实是一个典型的发布订阅模式，公众号属于发布者，用户属于订阅者；用户将订阅公众号的事件注册到调度中心，公众号作为发布者，当有新文章发布时，公众号发布该事件到调度中心，调度中心会及时发消息告知用户。<br><strong>例子2</strong>：一个卖书的例子，当你去买书的时候，如果当时有你要买的书，可以直接买到当时当书店没有这本书的时候，你就需要先在书店预订，让老板等书到了通知你，而如果你等待的时候突然又不想买了你可以告诉老板你不要了。<br>在上述案例中，老板就是发布者，买者就是订阅者，不想要了就是取消订阅。</p><h3 id="2-如何实现发布-订阅模式？"><a href="#2-如何实现发布-订阅模式？" class="headerlink" title="(2) 如何实现发布-订阅模式？"></a>(2) 如何实现发布-订阅模式？</h3><h4 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1. 实现思路"></a>1. 实现思路</h4><ul><li>创建一个对象</li><li>在该对象上创建一个缓存列表（调度中心）</li><li>add方法用来把函数 fn 都加到缓存列表中（订阅者注册事件到调度中心）</li><li>emit 方法取到 arguments 里第一个当做 event，根据 event 值去执行对应缓存列表中的函数（发布者发布事件到调度中心，调度中心处理代码）</li><li>remove 方法可以根据 event 值取消订阅（取消订阅）</li></ul><h4 id="2-具体简单实现例子2：到书店买书"><a href="#2-具体简单实现例子2：到书店买书" class="headerlink" title="2. 具体简单实现例子2：到书店买书"></a>2. 具体简单实现例子2：到书店买书</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subscribe</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 登记本：存放书籍和操作方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加订阅消息</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">type, fn</span>) &#123;</span><br><span class="line">        <span class="comment">// type:订阅的书籍</span></span><br><span class="line">        <span class="comment">// fn：书籍到货后的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加前，判断登记本上是否已经存在这本书籍</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">message</span>[type]) &#123;</span><br><span class="line">            <span class="comment">// 如果不存在，设置一个空数组</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">message</span>[type] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果存在，不重复登记</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">message</span>[type].<span class="title function_">indexOf</span>(fn) !== -<span class="number">1</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="comment">// 正常登记，添加对应的书籍数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span>[type].<span class="title function_">push</span>(fn);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 所需的书籍到货，发布通知</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果还没有这本书籍</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">message</span>[type]) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="comment">// 如果书籍到货，通知所有想要这本书籍的人</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span>[type].<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">item</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取消订阅</span></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">type, fn</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有对应的订阅消息</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">message</span>[type]) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="comment">// 取消该书籍所有的订阅消息</span></span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">message</span>[type];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取消对应的订阅消息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span>[type] = <span class="variable language_">this</span>.<span class="property">message</span>[type].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item !== fn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置一个卖书的老板</span></span><br><span class="line"><span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Subscribe</span>();</span><br><span class="line"><span class="comment">// 进行操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小王需要一本&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小张需要一本&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">zs.<span class="title function_">add</span>(<span class="string">&quot;西游记&quot;</span>, fn1); <span class="comment">// &#123;西游记: Array(1)&#125;</span></span><br><span class="line">zs.<span class="title function_">add</span>(<span class="string">&quot;西游记&quot;</span>, fn2); <span class="comment">// &#123;西游记: Array(2)&#125;</span></span><br><span class="line">zs.<span class="title function_">add</span>(<span class="string">&quot;三国演义&quot;</span>, fn2); <span class="comment">// &#123;西游记: Array(2), 三国演义: Array(1)&#125;</span></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">zs.<span class="title function_">emit</span>(<span class="string">&quot;西游记&quot;</span>); <span class="comment">// 小王需要一本 小张需要一本</span></span><br><span class="line">zs.<span class="title function_">emit</span>(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">zs.<span class="title function_">remove</span>(<span class="string">&quot;西游记&quot;</span>, fn1); <span class="comment">// &#123;西游记: Array(1), 三国演义: Array(1)&#125;</span></span><br><span class="line">zs.<span class="title function_">remove</span>(<span class="string">&quot;红楼梦&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="(3) 优缺点"></a>(3) 优缺点</h3><ol><li><strong>优点</strong></li></ol><ul><li>对象之间解耦</li><li>异步编程中，可以更松耦合的代码编写</li></ul><ol start="2"><li><strong>缺点</strong></li></ol><ul><li>创建订阅者本身要消耗一定的时间和内存</li><li>虽然可以弱化对象之间的联系，多个发布者和订阅者嵌套一起的时候，程序难以跟踪维护</li></ul>]]></content>
    
    
    <summary type="html">设计模式（Design Pattern）是一套被反复使用，多人知晓，经过分类编目的优秀代码设计经验的总结。使用设计模式是为了重用代码，使代码更容易理解并保证代码的可靠性。使用设计模式对于自己，对他人，对系统都是有利的。设计模式使代码编制更加工程化，是软件工程的基石。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 数据劫持(代理)</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81(%E4%BB%A3%E7%90%86)/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81(%E4%BB%A3%E7%90%86)/</id>
    <published>2023-12-14T14:34:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<p>所谓数据代理（也叫数据劫持），指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果。比较典型的是 <code>Object.defineProperty()</code> 和 ES2015 中新增的 <code>Proxy</code> 对象。而在前端框架中vue2.0使用的是<code>Object.defineProperty()</code>、vue3.0使用的是<code>Proxy</code>。当然今天主要讲述的JS和ES中的数据劫持，vue中的小编后续会安排上。</p><h2 id="一-Object-defineProperty"><a href="#一-Object-defineProperty" class="headerlink" title="一. Object.defineProperty()"></a>一. Object.defineProperty()</h2><p>语法：Object.defineProperty(数据, 属性名, {配置项})<br><strong>配置项</strong>：</p><ul><li>value：设置属性名对应的属性值</li><li>writable：设置的属性是否可以修改<blockquote><p>值：true&#x2F;false(默认)</p></blockquote></li><li>enumerable：设置的属性是否可以遍历<blockquote><p>值：true&#x2F;false (默认)</p></blockquote></li><li>configurable：设置的属性是否可以删除<blockquote><p>值：true&#x2F;false(默认)</p></blockquote></li><li>getter、setter：不允许和value, writable连用，连用会报错</li><li>get 获取的时候可以触发的方法</li><li>set 设置的时候可以触发的方法<br><strong>注</strong>：value、writable、enumerable、configurable可以单独使用也可以连用<br><strong>针对上述配置项的使用情况</strong>：<br><strong>(1) value</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// 设置属性名对应的属性值</span></span><br><span class="line">    <span class="attr">value</span>: <span class="number">20</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 20&#125;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">30</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 20&#125;</span></span><br></pre></td></tr></table></figure><strong>(2) writable</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// 设置的属性可以修改 </span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;zs&#x27;, age: undefined &#125;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">30</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 20&#125;</span></span><br></pre></td></tr></table></figure><strong>(3) enumerable</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="comment">// 设置的属性可以遍历 </span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k, obj[k]); <span class="comment">// name zs age 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>(4) configurable</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// 设置的属性可以删除  </span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;age: undefined&#125;</span></span><br></pre></td></tr></table></figure><strong>(5) get set定义属性</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>; <span class="comment">// 当我们设置一个返回值的时候，就表示该属性被设置了值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="comment">// 可以监听到设置的值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(val); <span class="comment">// 19</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">19</span>; <span class="comment">// 设置的时候，会触发 set方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// 20 (获取的时候， 会触发 get方法)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure></li></ul><h2 id="二-数据劫持"><a href="#二-数据劫持" class="headerlink" title="二. 数据劫持"></a>二. 数据劫持</h2><p>当访问或者修改对象的某个属性的时候，通过 getter setter 拦截这个行为，进行额外的操作 将原始的数据复制一份，通过复制的数据操作原始数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;ipt1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;ipt2&quot;&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt; </span><br><span class="line">// 原始数据</span><br><span class="line">const obj = &#123;</span><br><span class="line">    name: &#x27;zs&#x27;,</span><br><span class="line">    age: 20</span><br><span class="line">&#125;</span><br><span class="line">// 目标数据</span><br><span class="line">const target = &#123;&#125;</span><br><span class="line">// 通过数据劫持的方法，把原始数据复制到目标中</span><br><span class="line">Object.defineProperty(target, &#x27;name&#x27;, &#123;</span><br><span class="line">    get() &#123;</span><br><span class="line">        return obj.name</span><br><span class="line">    &#125;,</span><br><span class="line">    set(val) &#123;</span><br><span class="line">        obj.name = val</span><br><span class="line">        box.innerHTML = `你好， 我叫$&#123;target.name&#125; , 我今年$&#123;target.age&#125;`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(target, &#x27;age&#x27;, &#123;</span><br><span class="line">    get() &#123;</span><br><span class="line">        return obj.age</span><br><span class="line">    &#125;,</span><br><span class="line">    set(val) &#123;</span><br><span class="line">        obj.age = val</span><br><span class="line">        box.innerHTML = `你好， 我叫$&#123;target.name&#125; , 我今年$&#123;target.age&#125;`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">box.innerHTML = `你好， 我叫$&#123;target.name&#125; , 我今年$&#123;target.age&#125;`</span><br><span class="line">ipt1.onchange = function () &#123;</span><br><span class="line">    target.name = this.value</span><br><span class="line">&#125;</span><br><span class="line">ipt2.onchange = function () &#123;</span><br><span class="line">    target.age = this.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-封装函数实现数据劫持"><a href="#三-封装函数实现数据劫持" class="headerlink" title="三. 封装函数实现数据劫持"></a>三. 封装函数实现数据劫持</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ipt1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ipt2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原始对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 进行封装函数实现数据劫持</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">encapsulation</span>(<span class="params">obj, cb</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 目标对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 通过数据劫持的方法，把原始数据复制到目标中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> target = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 遍历原始对象，拿到对象中的每一个值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, k, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> obj[k];</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    obj[k] = val;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">cb</span>(target);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">cb</span>(target);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> target;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用封装函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> app = <span class="title function_">encapsulation</span>(obj, <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        box.<span class="property">innerHTML</span> = <span class="string">`你好， 我叫<span class="subst">$&#123;target.name&#125;</span> , 我今年<span class="subst">$&#123;target.age&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取input框中输入的值</span></span></span><br><span class="line"><span class="language-javascript">    ipt1.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        app.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    ipt2.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        app.<span class="property">age</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：<br>?</p><h2 id="四-数据代理-Proxy"><a href="#四-数据代理-Proxy" class="headerlink" title="四. 数据代理(Proxy)"></a>四. 数据代理(Proxy)</h2><p>在数据劫持这个问题上，<code>Proxy</code> 可以被认为是 <code>Object.defineProperty()</code> 的升级版。外界对某个对象的访问，都必须经过这层拦截。因此它是针对 <strong>整个对象</strong>，而不是 <strong>对象的某个属性</strong>，所以也就不需要对 <code>keys</code> 进行遍历。<br><strong>Proxy</strong> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li>target<blockquote><p>要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p></blockquote></li><li>handler<blockquote><p>一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 <code>p</code> 的行为。</p></blockquote></li></ul><p><strong>简单的数据代理案例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始代理</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="comment">// 访问数据的时候 会触发</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> target[property];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置数据的时候会触发</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, property, val</span>) &#123;</span><br><span class="line">        <span class="comment">// target 就是要代理的目标对象</span></span><br><span class="line">        <span class="comment">// property 就是要修改的属性</span></span><br><span class="line">        <span class="comment">// val 修改的属性值</span></span><br><span class="line">        target[property] = val;</span><br><span class="line">        <span class="comment">// 必须写，简单代理必须返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">res.<span class="property">name</span> = <span class="string">&#x27;jerry&#x27;</span>;</span><br><span class="line"><span class="comment">// 给对象新添加一个数据</span></span><br><span class="line">res.<span class="property">sex</span> = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数据&#x27;</span>, obj); <span class="comment">// 原始数据 &#123;name: &#x27;jerry&#x27;, age: 18, sex: &#x27;女&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;代理结果&#x27;</span>, res); <span class="comment">// 代理结果 Proxy&amp;nbsp;&#123;name: &#x27;jerry&#x27;, age: 18, sex: &#x27;女&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="五-Proxy和Object-defineProperty的区别"><a href="#五-Proxy和Object-defineProperty的区别" class="headerlink" title="五. Proxy和Object.defineProperty的区别"></a>五. Proxy和Object.defineProperty的区别</h2><ol><li>Proxy是对整个对象的代理，而Object.defineProperty只能代理某个属性。</li><li>对象上新增属性，Proxy可以监听到，Object.defineProperty不能。</li><li>数组新增修改，Proxy可以监听到，Object.defineProperty不能。</li><li>若对象内部属性要全部递归代理，Proxy可以只在调用的时候递归，而Object.definePropery需要一次完成所有递归，性能比Proxy差。</li><li>Proxy不兼容IE，Object.defineProperty不兼容IE8及以下</li><li>Proxy使用上比Object.defineProperty方便多。</li></ol>]]></content>
    
    
    <summary type="html">所谓数据代理（也叫数据劫持），指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 深浅拷贝及闭包</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8F%8A%E9%97%AD%E5%8C%85/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%8F%8A%E9%97%AD%E5%8C%85/</id>
    <published>2023-12-14T14:30:00.000Z</published>
    <updated>2023-12-14T14:58:36.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-深浅拷贝"><a href="#一-深浅拷贝" class="headerlink" title="一. 深浅拷贝"></a>一. 深浅拷贝</h2><h3 id="1-赋值"><a href="#1-赋值" class="headerlink" title="(1) 赋值"></a>(1) 赋值</h3><p>赋值：把一个数据结构的地址复制一份给另一个变量<br><strong>值传递和引用传递</strong></p><ul><li>基本数据类型：值传递</li><li>引用类型：引用传递<br>值传递就是将基本数据类型的值复制一份，就是简单地赋值操作。 使用值传递，修改接收方的变量值，不会影响原传递变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b); <span class="comment">// 10 11(值传递后，修改接收的变量值，不会影响原传递变量)</span></span><br></pre></td></tr></table></figure>引用传递是将地址赋值给接收的变量。 使用引用传递，修改接收方的变量值，会将原传递变量一同修改。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> brr = arr;</span><br><span class="line">brr.<span class="title function_">push</span>(<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, brr); <span class="comment">// (5)&amp;nbsp;[1, 3, 4, 5, 2] (5)&amp;nbsp;[1, 3, 4, 5, 2]</span></span><br></pre></td></tr></table></figure><blockquote><p>原因：arr将地址赋值给brr，使得brr和arr指向的是相同的地址，然后引用类型通过地址去找对应的值，所以最终arr的值会和brr的值相同，一同被修改。</p></blockquote></li></ul><p>为什么需要深浅拷贝 &#x3D;&#x3D;&gt; 它的产生就是来解决上述引用传递中产生的问题的（使用引用传递，修改接收方的变量值，会将原传递变量一同修改）。</p><h3 id="2-浅拷贝"><a href="#2-浅拷贝" class="headerlink" title="(2) 浅拷贝"></a>(2) 浅拷贝</h3><p>浅拷贝：<strong>将对象里面的值逐个赋值给另一个对象</strong>，但是如果是对象的嵌套，浅拷贝无法实现，必须使用深拷贝。</p><ul><li>浅拷贝仅支持一层拷贝赋值</li><li>深拷贝支持多层拷贝赋值<br>原始数据结构中的key</li><li>存储的是基本数据类型，可以拷贝</li><li>存储的是引用数据类型无法拷贝<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">info</span>: &#123; <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    obj2[k] = obj1[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 18, info: &#123;…&#125;&#125; &#123;name: &#x27;zs&#x27;, age: 18, info: &#123;…&#125;&#125;</span></span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2); <span class="comment">// &#123;name: &#x27;ls&#x27;, age: 18, info: &#123;…&#125;&#125; &#123;name: &#x27;zs&#x27;, age: 18, info: &#123;…&#125;&#125;</span></span><br><span class="line">obj1.<span class="property">info</span>.<span class="property">sex</span> = <span class="string">&quot;女&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2); <span class="comment">// 两个sex都改为女</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><p>语法：Object.assign(新对象,原始对象)<br>返回值：把原始对象内的数据浅拷贝一份放入到新对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">info</span>: &#123; <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 18, info: &#123;…&#125;&#125; &#123;name: &#x27;zs&#x27;, age: 18, info: &#123;…&#125;&#125;</span></span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2); <span class="comment">// &#123;name: &#x27;ls&#x27;, age: 18, info: &#123;…&#125;&#125; &#123;name: &#x27;zs&#x27;, age: 18, info: &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>使用<strong>浅拷贝解决赋值问题</strong>的方式：</p><ul><li>首先创建新对象然后使用for…in…进行赋值</li><li>使用Object.assign()方法进行赋值</li><li>使用扩展运算符<br><strong>浅拷贝的弊端</strong>：当对象里面没有嵌套引用类型的时候浅拷贝可以解决赋值问题，但是当对象嵌套了引用类型时，修改内层的引用类型时就又会产生赋值问题。</li></ul><h3 id="3-深拷贝"><a href="#3-深拷贝" class="headerlink" title="(3) 深拷贝"></a>(3) 深拷贝</h3><p>深拷贝：不管多少层数据结构，都百分百复制一份，变成两个一模一样但是毫不相干的数据结构</p><h4 id="方式一：递归"><a href="#方式一：递归" class="headerlink" title="方式一：递归"></a>方式一：递归</h4><p>利用函数封装，然后对被复制的的对象进行遍历，分别判断：</p><ul><li>如果是数组，给目标对象赋空数组，然后重新调用封装函数</li><li>如果是对象，给目标对象赋空对象，然后重新调用封装函数</li><li>如果是基本数据类型，直接赋值给目标对象</li><li>最后返回目标对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">info</span>: &#123; <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">origin, target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> origin) &#123;</span><br><span class="line">        <span class="keyword">if</span> (origin[k] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            target[k] = &#123;&#125;;</span><br><span class="line">            <span class="title function_">deepClone</span>(origin[k], target[k])</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (origin[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            target[k] = [];</span><br><span class="line">            <span class="title function_">deepClone</span>(origin[k], target[k])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[k] = origin[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">deepClone</span>(obj1, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 18, info: &#123;…&#125;&#125;</span></span><br><span class="line">obj1.<span class="property">info</span>.<span class="property">sex</span> = <span class="string">&quot;女&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2); <span class="comment">// obj1中的sex改为女</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="方式二：利用JSON的方法"><a href="#方式二：利用JSON的方法" class="headerlink" title="方式二：利用JSON的方法"></a>方式二：利用JSON的方法</h4><p>先通过JSON.stringify()方法将被赋值的对象转为字符串，在通过JSON.parse()方法将字符串转为对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">info</span>: &#123; <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 18, info: &#123;…&#125;&#125;</span></span><br><span class="line">obj1.<span class="property">info</span>.<span class="property">sex</span> = <span class="string">&quot;女&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2); <span class="comment">// obj1中的sex改为女</span></span><br></pre></td></tr></table></figure><p><strong>使用方式会产生的问题</strong></p><ul><li>如果obj里面存在时间对象,JSON.parse(JSON.stringify(obj))之后，时间对象变成了字符串。</li><li>如果obj里有RegExp、Error对象，则序列化的结果将只得到空对象。</li><li>如果obj里有函数，undefined，则序列化的结果会把函数， undefined丢失。</li><li>如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null。</li><li>JSON.stringify()只能序列化对象的可枚举的自有属性。如果obj中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor。</li><li>如果对象中存在循环引用的情况也无法正确实现深拷贝。<br><strong>解决方法</strong>：<br>可以使用 lodash 库来解决<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lodash </span></span><br><span class="line"><span class="comment">//  这个库  解决了 javascript中的 疑难杂症  比如深拷贝  npm  insall loadsh </span></span><br><span class="line"><span class="comment">// const &#123; cloneDeep &#125; = require(&#x27;lodash&#x27;)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="二-不会销毁的函数执行空间"><a href="#二-不会销毁的函数执行空间" class="headerlink" title="二. 不会销毁的函数执行空间"></a>二. 不会销毁的函数执行空间</h2><p>当函数返回一个复杂数据类型，并且函数外部有变量接收这个复杂数据类型时，函数执行完毕后函数的执行空间不会销毁<br><strong>原因</strong>：函数执行完毕后，返回的是一个对象的地址<br><strong>如果要销毁这个空间</strong>：只需将接收这个复杂数据类型的变量指向别的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 22&#125;</span></span><br></pre></td></tr></table></figure><h2 id="三-闭包"><a href="#三-闭包" class="headerlink" title="三. 闭包"></a>三. 闭包</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p><strong>官方定义</strong>：<strong>闭包</strong>（closure）是一个函数以及其捆绑的周边环境状态（lexical environment，<strong>词法环境</strong>）的引用的组合。换而言之，<strong>闭包</strong>让开发者可以<strong>从内部函数访问外部函数的作用域</strong>。在 JavaScript 中，闭包会随着函数的创建而被同时创建。<br><strong>目的</strong>：在函数外部操作函数里面的私有变量（起到保护全局变量的作用）<br><strong>闭包</strong>：函数内的函数，<strong>有权访问另一个函数作用域内变量的函数都是闭包。</strong><br><strong>闭包条件</strong>：</p><ol><li>需要一个不会被销毁的函数执行空间</li><li>需要直接或间接返回一个函数</li><li>内部函数使用外部函数的私有变量<br><strong>特点</strong>：</li><li>可以在函数外面访问到函数内部的变量</li><li>延长了变量的生命周期</li><li>内存溢出<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 3.内部函数使用外部函数的私有变量</span></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.需要直接或间接返回一个函数</span></span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.需要一个不会被销毁的函数执行空间</span></span><br><span class="line"><span class="comment">// 在outer外面使用了outer里面的变量</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">outer</span>()();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><strong>闭包的缺点</strong>：会造成内存溢出。<blockquote><p>由于闭包是内部函数引用了外部函数的变量，虽然延迟了变量的生命周期。但是如果闭包使用过多。会造成很多变量没有被垃圾回收处理以至于造成内存溢出。</p></blockquote></li></ol><p><strong>内存溢出解决方式</strong>：将引用的变量赋值为null</p><h3 id="2-闭包的问题处理方式（垃圾回收机制）"><a href="#2-闭包的问题处理方式（垃圾回收机制）" class="headerlink" title="(2) 闭包的问题处理方式（垃圾回收机制）"></a>(2) 闭包的问题处理方式（垃圾回收机制）</h3><ol><li>垃圾回收机制（Garbage Collction）简称GC，是JavaScript中使用的内存管理系统的基本组成部分，是为了防止内存泄漏</li><li>JavaScript是在创建变量（对象、字符串等）时自动进行了分配内存，并且在不使用他们时“自动释放。”</li><li>内存在不适用的时候就被垃圾回收器自动回收<br><strong>内存的生命周期</strong> JS环境中分配的内存，一般有如下生命周期：</li><li>内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</li><li>内存使用：即读写内存，也就是使用变量、函数等</li><li>内存回收：使用完毕，由垃圾回收自动回收不再使用的内存<br><strong>垃圾回收的算法说明</strong> 所谓垃圾回收，核心思想就是如何判断内存是否已经不再会被使用了，如果是，就视为垃圾给释放掉<br>下面介绍两种常见的浏览器垃圾回收算法：引用计数法和标记清除法<br><strong>1.引用计数</strong><br>IE采用的引用计数算法，定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用<br>算法</li><li>跟踪记录每个值被引用的次数。</li><li>如果这个值被引用了一次，那么就会被记录一次。</li><li>多次引用会累加。</li><li>如果减少一个引用就减1。</li><li>如果引用次数是0，则释放内存。<br><strong>缺点</strong>：循环引用<br>如果两个对象互相引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄漏。<br><strong>2.标记清除法</strong><br>现代的浏览器已经不再使用引用计数法了 现代浏览通用的大多是基于标记清除算法的某些改进算法，总体思想都是一致的<br><strong>核心</strong>：</li><li>标记清除算法将“不再使用的对象”定义为“无法达到的对象”。</li><li>标记：就是从根部（在js中就是全局对象）出发定时扫描内存中的对象。凡是能从根部到达的对象，都是还需要使用的。</li><li>回收：那些无法由根部出发触及到的对象被标记为不再使用。<br>参考地址：<a href="https://blog.csdn.net/zzy_999/article/details/128559934">https://blog.csdn.net/zzy_999&#x2F;article&#x2F;details&#x2F;128559934</a></li></ol><h3 id="3-闭包案例"><a href="#3-闭包案例" class="headerlink" title="(3) 闭包案例"></a>(3) 闭包案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 输出什么</span></span><br><span class="line"><span class="comment">// for (var i = 1; i &lt;= 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//     setTimeout(function () &#123;</span></span><br><span class="line"><span class="comment">//         console.log(i);</span></span><br><span class="line"><span class="comment">//     &#125;, 1000);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5个6</span></span><br><span class="line"><span class="comment">// 每一次循环的时候，都修改的是同一个变量i, 最后循环到了6</span></span><br><span class="line"><span class="comment">// 先执行同步代码，同步代码执行完毕之后，再执行异步代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="comment">// for (let i = 1; i &lt;= 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//     setTimeout(function () &#123;</span></span><br><span class="line"><span class="comment">//         console.log(i);</span></span><br><span class="line"><span class="comment">//     &#125;, 0);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let 有块级作用域， 循环的时候，每次循环的i都是不一样的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 闭包 内部函数用了外部函数的变量 ，保存了i这个变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 自执行函数 可以自动执行依次</span></span><br><span class="line">    ! <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 闭包 内部函数用了外部函数的变量，把外部函数的变量保存下来</span></span><br></pre></td></tr></table></figure><h2 id="四-沙箱模式"><a href="#四-沙箱模式" class="headerlink" title="四. 沙箱模式"></a>四. 沙箱模式</h2><p>沙箱模式：</p><ol><li>利用闭包</li><li>利用函数内间接返回一个对象</li><li>外部函数返回一个对象，对象内书写多个函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 下面这个对象就是一个沙箱</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="title function_">getA</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getB</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">setA</span>(<span class="params">num</span>) &#123;</span><br><span class="line">            a = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">outer</span>();</span><br><span class="line"><span class="comment">// console.log(res); // &#123;getA: ƒ, getB: ƒ, setA: ƒ&#125;</span></span><br><span class="line"><span class="comment">// console.log(res.getA()); // 100</span></span><br><span class="line">res.<span class="title function_">setA</span>(<span class="number">500</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">getA</span>()); <span class="comment">// 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">outer</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">getA</span>()); <span class="comment">// 100 </span></span><br></pre></td></tr></table></figure></li></ol><h2 id="五-沙箱语法糖"><a href="#五-沙箱语法糖" class="headerlink" title="五. 沙箱语法糖"></a>五. 沙箱语法糖</h2><p>沙箱语法糖: 尽可能简化沙箱模式的语法<br>语法糖</p><blockquote><p>利用getter 和 setter来进行操作。 操作的时候， 对象.设置(获取) 名称</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="comment">// get关键字  getter获取器，用来获取成员a</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">a</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">b</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span> <span class="title function_">a</span>(<span class="params">num</span>) &#123;</span><br><span class="line">            a = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">outer</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">a</span>); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JS 深浅拷贝及闭包</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 防抖、节流和函数柯理化</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81%E5%92%8C%E5%87%BD%E6%95%B0%E6%9F%AF%E7%90%86%E5%8C%96/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81%E5%92%8C%E5%87%BD%E6%95%B0%E6%9F%AF%E7%90%86%E5%8C%96/</id>
    <published>2023-12-14T14:27:00.000Z</published>
    <updated>2023-12-14T14:58:06.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-函数柯理化"><a href="#一-函数柯理化" class="headerlink" title="一. 函数柯理化"></a>一. 函数柯理化</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>作用：把一次传递两个参数，变成两次每次传递一个参数<br>目的：利用闭包，把第一次传递的参数保存下来（延长变量的生命周期）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">num2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        ƒ (num2) &#123;</span></span><br><span class="line"><span class="comment">                return num1 + num2;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="2-案例：正则验证密码"><a href="#2-案例：正则验证密码" class="headerlink" title="(2) 案例：正则验证密码"></a>(2) 案例：正则验证密码</h3><p><strong>方式一</strong>：判断正则写在函数内部，需要判断的值在函数外部测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testpw</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">testpw</span>(<span class="string">&quot;12345jfiang&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> res2 = <span class="title function_">testpw</span>(<span class="string">&quot;jfiang&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1, res2); <span class="comment">// true true</span></span><br></pre></td></tr></table></figure><p><strong>方式二</strong>：正则和测试的值都在函数外部同时传入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testpw</span>(<span class="params">reg, str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">testpw</span>(<span class="regexp">/^\w&#123;6,12&#125;$/</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> res2 = <span class="title function_">testpw</span>(<span class="regexp">/^\w&#123;6,12&#125;$/</span>, <span class="string">&quot;1234fajin&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1, res2); <span class="comment">// false true</span></span><br></pre></td></tr></table></figure><p><strong>方式三</strong>：利用柯理化（闭包）封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testpw</span>(<span class="params">reg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test1 = <span class="title function_">testpw</span>(<span class="regexp">/^\w&#123;6,12&#125;$/</span>);</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">test1</span>(<span class="string">&quot;1223&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 生成一个验证手机号的函数</span></span><br><span class="line"><span class="keyword">const</span> testPhone = <span class="title function_">testpw</span>(<span class="regexp">/^1\d&#123;10&#125;$/</span>);</span><br><span class="line"><span class="comment">// 校验手机号</span></span><br><span class="line"><span class="keyword">const</span> res2 = <span class="title function_">testPhone</span>(<span class="string">&#x27;2341200&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> res3 = <span class="title function_">testPhone</span>(<span class="string">&#x27;12312345678&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2, res3); <span class="comment">// false true</span></span><br></pre></td></tr></table></figure><h3 id="3-函数柯理化的封装"><a href="#3-函数柯理化的封装" class="headerlink" title="(3) 函数柯理化的封装"></a>(3) 函数柯理化的封装</h3><p>函数柯理化封装</p><ol><li>是多个参数互相利用</li><li>需要两个功能<blockquote><p>功能函数</p></blockquote></li></ol><p>收集参数<br><strong>功能</strong>：实现拼接地址栏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8080/a/b</span></span><br><span class="line">    a : http </span><br><span class="line">    b : localhost</span><br><span class="line">    c : <span class="number">8080</span></span><br><span class="line">    d : <span class="regexp">/a/</span>b</span><br><span class="line">功能函数 把 a b c d 拼接起来</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并且要实现以下三种情况：</span></span><br><span class="line"><span class="comment">// 情况1</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">curry</span>(fn, <span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">res</span>(<span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res2 = <span class="title function_">res1</span>(<span class="string">&#x27;8080&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res3 = <span class="title function_">res2</span>(<span class="string">&#x27;/a/b&#x27;</span>) <span class="comment">// http://localhost:8080/a/b</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line"><span class="comment">// 情况2</span></span><br><span class="line"><span class="comment">// const res = curry(fn, &#x27;http&#x27;, &#x27;localhost&#x27;)</span></span><br><span class="line"><span class="comment">// const res1 = res(&#x27;8080&#x27;, &#x27;/a/b&#x27;) // // http://localhost:8080/a/b</span></span><br><span class="line"><span class="comment">// 情况3</span></span><br><span class="line"><span class="comment">// const res = curry(fn, &#x27;http&#x27;, &#x27;localhost&#x27;, &#x27;8080&#x27;, &#x27;/a/b&#x27;)() // // http://localhost:8080/a/b</span></span><br><span class="line"><span class="comment">// console.log(res);</span></span><br></pre></td></tr></table></figure><p><strong>实现</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;://&#x27;</span> + b + <span class="string">&#x27;:&#x27;</span> + c + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 柯理化函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn, ...arg</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    收集参数，判断参数的个数，够不够功能函数使用</span></span><br><span class="line"><span class="comment">        如果够了：执行功能函数</span></span><br><span class="line"><span class="comment">        如果不够：继续收集</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 对外部收集的参数进行处理</span></span><br><span class="line">    <span class="keyword">let</span> _arg = arg || []</span><br><span class="line">    <span class="comment">// 需要用_arg的length和 功能函数的参数个数进行比对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取函数形参的个数</span></span><br><span class="line">    <span class="keyword">let</span> len = fn.<span class="property">length</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">        _arg = [..._arg, ...arg]</span><br><span class="line">        <span class="comment">// 用处理好的参数进行数量判断</span></span><br><span class="line">        <span class="keyword">if</span> (_arg.<span class="property">length</span> === len) &#123;</span><br><span class="line">            <span class="comment">// 处理好的参数  ==== 功能函数参数相同</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">fn</span>(..._arg)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理好的参数&lt;功能函数参数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">curry</span>(fn, ..._arg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const res = curry(fn)</span></span><br></pre></td></tr></table></figure><h2 id="二-函数防抖"><a href="#二-函数防抖" class="headerlink" title="二. 函数防抖"></a>二. 函数防抖</h2><blockquote><p>通过setTimeout的方式，在一定的时间间隔内，将多次触发变成一次触发。（通俗的说是在最后一次点击间隔规定时间之后才能再次成功触发，否则触发不成功）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ipt&quot;</span>&gt;</span><br><span class="line">&lt;!--  分割线 --&gt;</span><br><span class="line">ipt.<span class="property">oninput</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每键入一次就会将input框中的value值输出</span></span><br></pre></td></tr></table></figure><p><strong>防抖的实现思路</strong>：</p><ol><li>在防抖函数返回的函数的上级作用域设置一个定时器变量t置为null;</li><li>通过t来判断是否是第一次执行。</li><li>如果不是第一次执行，清空定时器</li><li>如果是第一次执行，则通过进行代码执行.</li><li>最后设置定时器，规定时间之后将t设置为null,使得间隔时间之后t为null，间隔时间之后的点击变为第一次点击。<br><strong>递进优化实现步骤</strong>：</li></ol><ul><li>第一步：简单实现<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ipt&quot;</span>&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line"><span class="keyword">let</span> t = <span class="literal">null</span>;</span><br><span class="line">ipt.<span class="property">oninput</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(t);</span><br><span class="line">    t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一直键入值等待1.5s后输出最终值</span></span><br></pre></td></tr></table></figure></li><li>第二步：为了不污染全局，把变量放在函数里面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ipt&quot;</span>&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line">ipt.<span class="property">oninput</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(t);</span><br><span class="line">        t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">        &#125;, <span class="number">1500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li>第三步：封装防抖函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ipt&quot;</span>&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prevent</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(t);</span><br><span class="line">        t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            cb.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;, <span class="number">1500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ipt.<span class="property">oninput</span> = <span class="title function_">prevent</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="三-函数节流"><a href="#三-函数节流" class="headerlink" title="三. 函数节流"></a>三. 函数节流</h2><blockquote><p>节流指的是减少一段时间内的触发频率。只有在上一次成功触发间隔规定时间之后，才能再次触发。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ipt&quot;</span>&gt;</span><br><span class="line">&lt;!--  分割线 --&gt;</span><br><span class="line">ipt.<span class="property">oninput</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每键入一次就会将input框中的value值输出</span></span><br></pre></td></tr></table></figure><p><strong>节流的实现思路</strong>：</p><ol><li>在返回函数的上级作用域定义一个初始标记<code>flag = false</code>;</li><li>通过判断<code>flag 是否=== true</code>来确定是否已经触发</li><li>如果已经触发(flag &#x3D;&#x3D;&#x3D; true)，则中断函数</li><li>如果没有触发(flag &#x3D;&#x3D;&#x3D; false)，则让<code>flag = false</code>执行代码，执行后将<code>flag = true</code><br><strong>递进优化实现步骤</strong>：</li></ol><ul><li>第一步：简单实现<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ipt&quot;</span>&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">ipt.<span class="property">oninput</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span></span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;, <span class="number">2500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>第二步：使用闭包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ipt&quot;</span>&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line">ipt.<span class="property">oninput</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;, <span class="number">2500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li>第三步：封装<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ipt&quot;</span>&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">out</span>(<span class="params">cb = () =&gt; &#123; &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            cb.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;, <span class="number">2500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ipt.<span class="property">oninput</span> = <span class="title function_">out</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="四-节流与防抖的区别是什么？"><a href="#四-节流与防抖的区别是什么？" class="headerlink" title="四. 节流与防抖的区别是什么？"></a>四. 节流与防抖的区别是什么？</h2><ol><li>防抖只在最后一次成功点击之后间隔规定时间之后才能再次成功触发，如果在时间间隔之内就被点击，需要重新间隔时间间隔才能点击。</li><li>节流则不同，节流只要在上一次成功触发规定时间之后点击就能再次触发，中间的触发不会产生影响。</li></ol>]]></content>
    
    
    <summary type="html">JS 防抖、节流和函数柯理化</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS 正则表达式</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/JavaScript/JS%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2023-12-14T14:11:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</p><h2 id="一-什么是正则表达式？"><a href="#一-什么是正则表达式？" class="headerlink" title="一. 什么是正则表达式？"></a>一. 什么是正则表达式？</h2><p>正则表达式是由一个字符序列形成的搜索模式。 当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。 正则表达式可以是一个简单的字符，或一个更复杂的模式。 正则表达式可用于所有文本搜索和文本替换的操作。</p><h2 id="二-创建正则表达式"><a href="#二-创建正则表达式" class="headerlink" title="二. 创建正则表达式"></a>二. 创建正则表达式</h2><p><strong>(1) 内置构造函数方式创建</strong><br>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>,<span class="string">&quot;修饰符&quot;</span>);</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>正则表达式：可以是<strong>字符串或者变量</strong></li><li>修饰符：可以是全局匹配（g）、忽略大小写（i）、多行匹配（m）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: 判断字符串（abCDcs）中是否有（abcd），并且全局匹配（g）、忽略大小写（i）</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;ig&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abCDcs&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><strong>(2) 字面量方式创建</strong><br>语法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量 = <span class="regexp">/正则表达式/</span>修饰符</span><br></pre></td></tr></table></figure><strong>注</strong>：使用字面量创建的正则表达式只能是<strong>字符串</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/abcd/ig</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abCDcs&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三-正则表达式修饰符"><a href="#三-正则表达式修饰符" class="headerlink" title="三. 正则表达式修饰符"></a>三. 正则表达式修饰符</h2><p><strong>修饰符</strong> 可以在全局搜索中不区分大小写:</p><blockquote><p>i（ignore case）：忽略大小写 g（global）：执行全局匹配（查找所有匹配而非在找到第一个匹配后停止） m（multiple lines）：执行多行匹配</p></blockquote><p>设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求。</p><h2 id="四-正则表达式的方法"><a href="#四-正则表达式的方法" class="headerlink" title="四. 正则表达式的方法"></a>四. 正则表达式的方法</h2><h3 id="一-正则对象的方法"><a href="#一-正则对象的方法" class="headerlink" title="(一) 正则对象的方法"></a>(一) 正则对象的方法</h3><h4 id="1-test"><a href="#1-test" class="headerlink" title="(1) test()"></a>(1) test()</h4><p>概念：用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。 <strong>语法</strong>：正则表达式.test(字符串） <strong>返回值</strong>：返回一个布尔值，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;e&quot;</span>);<span class="comment">// 检查下列句子中是否含有e</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(a.<span class="title function_">test</span>(<span class="string">&quot;There is a good thing&quot;</span>));</span><br><span class="line">&lt;!-- 结果：<span class="literal">true</span> --&gt;</span><br></pre></td></tr></table></figure><h4 id="2-exec"><a href="#2-exec" class="headerlink" title="(2) exec()"></a>(2) exec()</h4><p>概念：在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。 <strong>语法</strong>：正则表达式.exec(字符串） <strong>返回值</strong>：把字符串中符合正则要求的<strong>第一项</strong>以及一些其他信息，以<strong>数组的形式</strong>返回<br><strong>注</strong>：该方法是将字符串中满足正则表达式的部分提取出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d[a-z]/</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;ab56efg&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">// [&#x27;6e&#x27;, index: 3, input: &#x27;ab56efg&#x27;, groups: undefined]</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回值中的第一项：匹配的值（&#x27;6e&#x27;）</span></span><br><span class="line"><span class="comment">    第二项：匹配的索引，只找第一个（index: 3）</span></span><br><span class="line"><span class="comment">    第三项：匹配的字符串（input: &#x27;ab56efg&#x27;）</span></span><br><span class="line"><span class="comment">    第四项：分组（这里没有所以，groups: undefined）（可以忽略）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//遇到满足条件的就返回，所以只返回5</span></span><br></pre></td></tr></table></figure><h3 id="二-字符串支持的正则方法"><a href="#二-字符串支持的正则方法" class="headerlink" title="(二) 字符串支持的正则方法"></a>(二) 字符串支持的正则方法</h3><h4 id="1-split"><a href="#1-split" class="headerlink" title="(1) split()"></a>(1) split()</h4><p>概念：将一个字符串拆分为一个数组 <strong>语法</strong>：字符串.split(正则表达式&#x2F;字符串) <strong>返回值</strong>：返回被拆分后的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;1j1j1k2d7o&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&quot;k&quot;</span>)); <span class="comment">// [&#x27;1j1j1&#x27;, &#x27;2d7o&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> result = str.<span class="title function_">split</span>(<span class="regexp">/[A-z]/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [&#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;7&#x27;, &#x27;&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="2-replace"><a href="#2-replace" class="headerlink" title="(2) replace()"></a>(2) replace()</h4><p>概念：用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。 <strong>语法</strong>：字符串.replace(换下字符串，换上字符串)<br><strong>注</strong>：第二参数可以是字符串也可以是回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: 使用正则表达式且不区分大小写将字符串中的 Cat 替换为 Root</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Visit Cat !&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> txt = str.<span class="title function_">replace</span>(<span class="regexp">/cat/i</span>,<span class="string">&quot;Root&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果输出为：<code>Visit Root !</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: 批量替换敏感词</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;HH&#x27;</span>, <span class="string">&#x27;MM&#x27;</span>, <span class="string">&#x27;NN&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aHHdfasMMdfaNNdsfaNNsNNdffas&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(arr.<span class="title function_">join</span>(<span class="string">&quot;|&quot;</span>), <span class="string">&quot;g&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg, <span class="string">&#x27;**&#x27;</span>)); <span class="comment">// a**dfas**dfa**dsfa**s**dffas</span></span><br></pre></td></tr></table></figure><h4 id="3-match"><a href="#3-match" class="headerlink" title="(3) match()"></a>(3) match()</h4><p>概念：检索返回一个字符串匹配正则表达式的结果。 <strong>语法</strong>：字符串.match(正则表达式) <strong>返回值</strong>：以<strong>数组</strong>的格式返回满足条件的第一项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/[a-z]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;ab56efg&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> res=str.<span class="title function_">match</span>(reg); <span class="comment">//字符串中满足表达式的部分提取出来</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//结果：[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>match() 和exec()的同异点</strong><br><strong>区别</strong>：</p><ul><li>exec()方法是：正则表达式提供的方法</li><li>match()方法是：字符串的方法<br><strong>相同</strong>： 都返回一个数组，只要匹配到符合规则的数据就返回</li></ul><h4 id="4-search"><a href="#4-search" class="headerlink" title="(4) search()"></a>(4) search()</h4><p><strong>search()</strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并$\color{red} {返回子串的起始位置} $。 <strong>语法</strong>：字符串.search(正则表达式） <strong>返回值</strong>：找到目标值返回对应的<strong>索引</strong>，没找到返回<code>-1</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:使用正则表达式搜索 &quot;Root&quot; 字符串，且不区分大小写</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Visit Root!&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> n = str.<span class="title function_">search</span>(<span class="regexp">/Root/i</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="五-正则表达式模式"><a href="#五-正则表达式模式" class="headerlink" title="五. 正则表达式模式"></a>五. 正则表达式模式</h2><h3 id="1-方括号"><a href="#1-方括号" class="headerlink" title="(1) 方括号"></a>(1) 方括号</h3><p>方括号用于查找某个范围内的字符：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符。</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>(x</td><td>y)</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: 匹配数字字母中的任意一个字符</span></span><br><span class="line">[a-zA-<span class="variable constant_">Z0</span>-<span class="number">9</span>]</span><br></pre></td></tr></table></figure><h3 id="2-元字符"><a href="#2-元字符" class="headerlink" title="(2) 元字符"></a>(2) 元字符</h3><p>元字符（Metacharacter）是拥有特殊含义的字符：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>（小数点）默认匹配除换行符之外的任何单个字符。</td></tr><tr><td>\w</td><td>匹配一个单字字符（字母、数字或者下划线）。等价于 <code>[A-Za-z0-9_]</code>。</td></tr><tr><td>\W</td><td>匹配一个非单字字符。等价于 <code>[^A-Za-z0-9_]</code>。</td></tr><tr><td>\d</td><td>查找数字（至少含有一个数字(0~9)）</td></tr><tr><td>\D</td><td>查找非数字字符（至少含有一个非数字）</td></tr><tr><td>\s</td><td>查找空白字符（至少含有一个空白字符(空格、缩进、\b…)）</td></tr><tr><td>\S</td><td>查找非空白字符（至少含有一个不是空白字符）</td></tr><tr><td>\b</td><td>匹配单词边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr><tr><td>\0</td><td>查找NUL字符</td></tr><tr><td>\n</td><td>查找换行符</td></tr><tr><td>\f</td><td>查找换页符</td></tr><tr><td>\r</td><td>查找回车符</td></tr><tr><td>\t</td><td>查找制表符</td></tr><tr><td>\v</td><td>查找垂直制表符</td></tr><tr><td>\xxx</td><td>查找以八进制 xxx 规定的字符</td></tr><tr><td>\xdd</td><td>查找以十六进制 dd 规定的字符</td></tr><tr><td>\uxxxx</td><td>查找以十六进制 xxxx 规定的 Unicode 字符</td></tr><tr><td>实例</td><td></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\W/</span>  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;!@#!&quot;</span>))</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\D/</span>  <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;123&quot;</span>))</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bchild\b/</span>  <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;hello children&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-量词"><a href="#3-量词" class="headerlink" title="(3) 量词"></a>(3) 量词</h3><p>|量词|描述| |-|-| |?|出现0次或一次| |+|出现一次或多次| |*|出现0次或多次| |{n}|出现n次| |{n,m}|出现n到m次| |{n,}|至少出现n次|</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a&#123;3&#125;/</span>;<span class="comment">//判断a是否连续出现3次</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;aaabc&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;abc&quot;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(ab)&#123;3&#125;/</span>;<span class="comment">//判断ab是否连续出现3次</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;abababc&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;abc&quot;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab&#123;1,3&#125;c/</span>;<span class="comment">//判断b是否连续出现1-3次</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;abbbc&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;abbbbbc&quot;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;bac&quot;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="4-正则语法"><a href="#4-正则语法" class="headerlink" title="(4) 正则语法"></a>(4) 正则语法</h3><table><thead><tr><th>正则</th><th>描述</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>[ ]</td><td>或</td></tr><tr><td>[^ ]</td><td>除了</td></tr><tr><td>[a-z]</td><td>小写字母</td></tr><tr><td>[A-Z]</td><td>大写字母</td></tr><tr><td>[A-z]</td><td>任意字母</td></tr><tr><td>^</td><td>开头</td></tr><tr><td>$</td><td>结尾</td></tr><tr><td>实例：</td><td></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查字符串中是否含有a或b</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a|b/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;bcd&quot;</span>))<span class="comment">//结果：true</span></span><br><span class="line"><span class="comment">//检查字符串中是否含有字母</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;bcdfsji&quot;</span>))<span class="comment">//结果：true</span></span><br><span class="line"><span class="comment">//检查字符串中是否含有abd或abc或abf</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab[cdf]/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;bcabcji&quot;</span>))<span class="comment">//结果：true</span></span><br><span class="line"><span class="comment">//检查一个字符串是否以a结尾</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;bcabcjia&quot;</span>))<span class="comment">//结果：true</span></span><br><span class="line"><span class="comment">//如果在正则表达式中同时使用^ $则要求必须完全符合正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;as&quot;</span>))<span class="comment">//结果：false</span></span><br></pre></td></tr></table></figure><h3 id="5-重复元字符"><a href="#5-重复元字符" class="headerlink" title="(5) 重复元字符"></a>(5) 重复元字符</h3><p><strong>符号</strong>: <code>\数字</code><br><strong>作用</strong>: 表示重复第n个小括号的内容，要求和第n个小括号的内容一模一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示这个()里面的整体内容出现2次就可以。不要求一模一样</span></span><br><span class="line"><span class="comment">// var reg1 = /^(abc|def)&#123;2&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示 \1 位置 需要出现一个 和 第一个 小括号 一模一样的内容</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^(abc|def)\1$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;defdef&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcdef&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^(abc|def)(哈哈|嘻嘻)\2$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc哈哈哈哈&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc哈哈嘻嘻&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc嘻嘻嘻嘻&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="6-正则的捕获方式"><a href="#6-正则的捕获方式" class="headerlink" title="(6) 正则的捕获方式"></a>(6) 正则的捕获方式</h3><p><strong>语法</strong>：正则表达式.exec(字符串) <strong>作用</strong>：始字符串中捕获到符合正则规则的字符串片段<br><strong>返回值</strong>：</p><ol><li>当原始字符串没有符合规则的时候，返回null</li><li>当原始字符串由符合规则的片段的时候：<blockquote><p>返回值必然是一个数组，数组的[0] 是捕获出来的字符串片段</p></blockquote></li></ol><ul><li>没有(), 没有g<blockquote><p>不管写多少次，只能捕获第一组匹配规则的字符串片段</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span> </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;adfa123sals456hdfl789kasakhdf012&#x27;</span> </span><br><span class="line"><span class="keyword">var</span> res = reg.<span class="title function_">exec</span>(str) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//[&#x27;123&#x27;,index:4,input:&#x27;adfa123sals456hdfl789kasakhdf012&#x27;, groups: undefined] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)); </span><br><span class="line"><span class="comment">// [&#x27;123&#x27;, index: 4, input: &#x27;adfa123sals456hdfl789kasakhdf012&#x27;, groups: undefined] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)); </span><br><span class="line"><span class="comment">// [&#x27;123&#x27;, index: 4, input: &#x27;adfa123sals456hdfl789kasakhdf012&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><ul><li>有()<blockquote><p>会在返回值数组的[1]开始，依次是每一个()中单独的内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d)(\d|x)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;22230120050101123x&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str));</span><br><span class="line"><span class="comment">// [&#x27;22230120050101123x&#x27;, &#x27;22&#x27;, &#x27;23&#x27;, &#x27;01&#x27;, &#x27;2005&#x27;, &#x27;01&#x27;, &#x27;01&#x27;, &#x27;12&#x27;, &#x27;3&#x27;, &#x27;x&#x27;, index: 0, input: &#x27;22230120050101123x&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure></li></ul></li><li>有g<blockquote><p>g 叫做全局标识符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/g</span> <span class="keyword">var</span> str = <span class="string">&#x27;adfa123sals456hdfl789kasakhdf012&#x27;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)); </span><br><span class="line"><span class="comment">// [&#x27;123&#x27;, index: 4, input: &#x27;adfa123sals456hdfl789kasakhdf012&#x27;, groups: undefined] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)); </span><br><span class="line"><span class="comment">// [&#x27;456&#x27;, index: 11, input: &#x27;adfa123sals456hdfl789kasakhdf012&#x27;, groups: undefined] </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)); </span><br><span class="line"><span class="comment">// [&#x27;789&#x27;, index: 18, input: &#x27;adfa123sals456hdfl789kasakhdf012&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure>第二次捕获开始会从第一次捕获的结束为止开始检索<br>直到找不到内容，返回null<br><strong>匹配但是不捕获</strong><blockquote><p>当我们需要使用()这个整体作用，但是不需要把()里面的内容单独捕获的时候：<strong>可以书写( ?: )</strong></p></blockquote></li></ul><h2 id="六-正则的两大特性"><a href="#六-正则的两大特性" class="headerlink" title="六. 正则的两大特性"></a>六. 正则的两大特性</h2><ol><li>懒惰<blockquote><p>每次捕获的时候都会从字符串[0]开始检索 解决：给正则添加标识符g，（查找所有匹配而非在找到第一个匹配后停止）</p></blockquote></li><li>贪婪<blockquote><p>每次在捕获内容的时候，尽可能多的去捕获内容 解决：使用非贪婪限定符(在原来的限定符后面加一个?)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贪婪捕获</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;1234567abcd&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)); <span class="comment">// [&#x27;1234567&#x27;, index: 0, input: &#x27;1234567abcd&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure>贪婪限定符：<code>（*、+、?、&#123;n,&#125;、&#123;n,m&#125;）</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贪婪限定符</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;div.*&gt;/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)); </span><br><span class="line"><span class="comment">// &#x27;&lt;div class=&quot;box&quot; id=&quot;box&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>非贪婪限定符：<code>（* ?、+?、??、&#123;n,&#125;?、&#123;n,m&#125;?）</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非贪婪限定符</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;div.*?&gt;/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str)); </span><br><span class="line"><span class="comment">// &#x27;&lt;div class=&quot;box&quot; id=&quot;box&quot;&gt;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="七-ES9新特性（正则扩展）"><a href="#七-ES9新特性（正则扩展）" class="headerlink" title="七. ES9新特性（正则扩展）"></a>七. ES9新特性（正则扩展）</h2><h3 id="1-命名捕获分组"><a href="#1-命名捕获分组" class="headerlink" title="(1) 命名捕获分组"></a>(1) 命名捕获分组</h3><p>捕获：对正则匹配的数据进行<code>(.*)</code>单独提取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个字符串 </span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;你好&lt;/a&gt;&#x27;</span>; </span><br><span class="line"><span class="comment">// 需求：提取url和标签内文本 </span></span><br><span class="line"><span class="comment">// 之前的写法 </span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span>; </span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); </span><br><span class="line"><span class="comment">// 结果是一个数组，第一个元素是所匹配的所有字符串 </span></span><br><span class="line"><span class="comment">// 第二个元素是第一个(.*)匹配到的字符串 </span></span><br><span class="line"><span class="comment">// 第三个元素是第二个(.*)匹配到的字符串 </span></span><br><span class="line"><span class="comment">// 我们将此称之为捕获 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]); <span class="comment">// http://www.baidu.com</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">2</span>]); <span class="comment">// 你好</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用命名捕获分组的写法：</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>; </span><br><span class="line"><span class="keyword">const</span> result1 = reg1.<span class="title function_">exec</span>(str); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); </span><br><span class="line"><span class="comment">// 这里的结果多了一个groups </span></span><br><span class="line"><span class="comment">// groups: </span></span><br><span class="line"><span class="comment">// text:&quot;你好&quot; </span></span><br><span class="line"><span class="comment">// url:&quot;http://www.baidu.com&quot; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1.<span class="property">groups</span>.<span class="property">url</span>); <span class="comment">// http://www.baidu.com</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1.<span class="property">groups</span>.<span class="property">text</span>); <span class="comment">// 你好</span></span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/%25E5%2591%25BD%25E5%2590%258D%25E6%258D%2595%25E8%258E%25B7%25E5%2588%2586%25E7%25BB%2584.jpg" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/%25E5%2591%25BD%25E5%2590%258D%25E6%258D%2595%25E8%258E%25B7%25E5%2588%2586%25E7%25BB%2584.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://imagesfx.oss-cn-shanghai.aliyuncs.com/img/JavaScript/%E5%91%BD%E5%90%8D%E6%8D%95%E8%8E%B7%E5%88%86%E7%BB%84.jpg?x-oss-process=style/imagesfx"></p><h3 id="2-反向断言"><a href="#2-反向断言" class="headerlink" title="(2) 反向断言"></a>(2) 反向断言</h3><p>断言：判断这次的匹配结果是否正确<br>正向断言&#x2F;反向断言 做一个唯一性的识别<br>正向断言（目标的后面）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;JS314你知道么5呀&quot;</span>; </span><br><span class="line"><span class="comment">// 需求：我们只想匹配到5 </span></span><br><span class="line"><span class="comment">// 正向断言 </span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+(?=呀)/</span>;  </span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str); </span><br><span class="line"><span class="comment">// [&#x27;5&#x27;, index: 9, input: &#x27;JS314你知道么5呀&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/%25E5%258F%258D%25E5%2590%2591%25E6%2596%25AD%25E8%25A8%2580.jpg" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/%25E5%258F%258D%25E5%2590%2591%25E6%2596%25AD%25E8%25A8%2580.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://imagesfx.oss-cn-shanghai.aliyuncs.com/img/JavaScript/%E5%8F%8D%E5%90%91%E6%96%AD%E8%A8%80.jpg?x-oss-process=style/imagesfx"><br>反向断言（目标的前面）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;JS314你知道么5呀&quot;</span>; </span><br><span class="line"><span class="comment">// 反向断言 </span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/(?&lt;=么)\d+/</span>; </span><br><span class="line"><span class="keyword">const</span> result1 = reg1.<span class="title function_">exec</span>(str); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); </span><br><span class="line"><span class="comment">// [&#x27;5&#x27;, index: 9, input: &#x27;JS314你知道么5呀&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/%25E5%258F%258D%25E5%2590%2591%25E6%2596%25AD%25E8%25A8%2580.jpg" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/%25E5%258F%258D%25E5%2590%2591%25E6%2596%25AD%25E8%25A8%2580.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://imagesfx.oss-cn-shanghai.aliyuncs.com/img/JavaScript/%E5%8F%8D%E5%90%91%E6%96%AD%E8%A8%80.jpg?x-oss-process=style/imagesfx"></p><h3 id="3-dotAll-模式"><a href="#3-dotAll-模式" class="headerlink" title="(3) dotAll 模式"></a>(3) dotAll 模式</h3><p>dot就是. 元字符，表示除换行符之外的任意单个字符<br><strong>之前的写法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let str = `</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>b<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>c<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>d<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">`;</span><br><span class="line">const reg = /<span class="tag">&lt;<span class="name">li</span>&gt;</span>\s+<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>(.*?)&lt;\/a&gt;\s+<span class="tag">&lt;<span class="name">p</span>&gt;</span>(.*?)&lt;\/p&gt;/;</span><br><span class="line">console.log(reg.exec(str));</span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/dotAll%25E6%25A8%25A1%25E5%25BC%258F%25E5%2589%258D.jpg" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/dotAll%25E6%25A8%25A1%25E5%25BC%258F%25E5%2589%258D.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://imagesfx.oss-cn-shanghai.aliyuncs.com/img/JavaScript/dotAll%E6%A8%A1%E5%BC%8F%E5%89%8D.jpg?x-oss-process=style/imagesfx"><br><strong>使用dotAll后：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let str = `</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>b<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>c<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>d<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">`;</span><br><span class="line">// const reg = /<span class="tag">&lt;<span class="name">li</span>&gt;</span>\s+<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>(.*?)&lt;\/a&gt;\s+<span class="tag">&lt;<span class="name">p</span>&gt;</span>(.*?)&lt;\/p&gt;/g;</span><br><span class="line">const reg = /<span class="tag">&lt;<span class="name">li</span>&gt;</span>.*?<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>(.*?)&lt;\/a&gt;.*?<span class="tag">&lt;<span class="name">p</span>&gt;</span>(.*?)&lt;\/p&gt;/gs;</span><br><span class="line">// console.log(reg.exec(str));</span><br><span class="line">let result;</span><br><span class="line">while ((result = reg.exec(str))) console.log(result);</span><br></pre></td></tr></table></figure><p>g为全局匹配 匹配不到是返回null，结束循环<br><strong>结果：</strong><br><img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/dotAll%25E6%25A8%25A1%25E5%25BC%258F%25E5%2590%258E.jpg" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/dotAll%25E6%25A8%25A1%25E5%25BC%258F%25E5%2590%258E.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://imagesfx.oss-cn-shanghai.aliyuncs.com/img/JavaScript/dotAll%E6%A8%A1%E5%BC%8F%E5%90%8E.jpg?x-oss-process=style/imagesfx"></p><h2 id="八-案例"><a href="#八-案例" class="headerlink" title="八. 案例"></a>八. 案例</h2><p><strong>规则</strong>：</p><ul><li>6 ~ 12 位</li><li>只能包含数字字母下划线 \w</li><li>不能以 下划线开头<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[0-9a-zA-Z]\w&#123;5,11&#125;$/</span></span><br></pre></td></tr></table></figure><strong>案例二</strong>：书写正则验证邮箱<br><strong>规则</strong>：</li><li>@ 前面, 和用户名规则一致</li><li>邮箱类型只接受 163 qq sina</li><li>后缀只接受 com cn<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[0-9a-zA-Z]\w&#123;5,11&#125;@(163|qq|sina)\.(com|cn)$/</span></span><br></pre></td></tr></table></figure><strong>案例三</strong>：书写正则验证手机号<br><strong>规则</strong>：</li><li>前面有可能带有 +86 有可能没有 ? {0,1}</li><li>+86 和 电话号之间有可能有空格有可能没有</li><li>号段只接受 133 135 188<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\+86 ?)?(133|135|188)\d&#123;8&#125;$/</span></span><br></pre></td></tr></table></figure><strong>案例四</strong>：书写正则验证 0 ~ 255 的数字<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;1,2&#125;|1\d&#123;2&#125;|2[0-4]\d|25[0-5])$/</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 验证：<span class="number">0</span> ~ <span class="number">666</span> --&gt;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;1,2&#125;|[1-5]\d&#123;2&#125;|6[0-5]\d|66[0-6])$/</span></span><br></pre></td></tr></table></figure><strong>案例五</strong>：连字符和驼峰之间的转换<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连字符转驼峰</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;get-element-by-id&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">replace</span>(<span class="regexp">/-[a-z]/g</span>, <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// getElementById</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 驼峰转连字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;getElementById&#x27;</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">replace</span>(<span class="regexp">/[A-Z]/g</span>, <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span> + result.<span class="title function_">slice</span>(<span class="number">0</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// get-element-by-id</span></span><br></pre></td></tr></table></figure><strong>案例六</strong>：封装函数实现字符串首尾空格<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reTrim</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="comment">// 首先判断是不是一个字符串</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reTrim</span>(str));</span><br></pre></td></tr></table></figure><strong>案例七</strong>：敏感词替换<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: 批量替换敏感词</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;HH&#x27;</span>, <span class="string">&#x27;MM&#x27;</span>, <span class="string">&#x27;NN&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aHHdfasMMdfaNNdsfaNNsNNdffas&#x27;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(arr.<span class="title function_">join</span>(<span class="string">&quot;|&quot;</span>), <span class="string">&quot;g&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg, <span class="string">&#x27;**&#x27;</span>)); <span class="comment">// a**dfas**dfa**dsfa**s**dffas</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Promise 概念和方法</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/RequestData/Promise%20%E6%A6%82%E5%BF%B5%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/RequestData/Promise%20%E6%A6%82%E5%BF%B5%E5%92%8C%E6%96%B9%E6%B3%95/</id>
    <published>2023-12-14T13:58:00.000Z</published>
    <updated>2023-12-14T14:56:23.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-概念"><a href="#一-概念" class="headerlink" title="一. 概念"></a>一. 概念</h2><p>Promise是<strong>ES6 新增</strong>的特性<br><strong>目的</strong>：用来解决异步解决回调地狱问题<br>利用Promise类创建promise实例对象，类的参数是回调函数，回调函数又有两个参数(一般约定为resolve(成功)和reject(失败))<br><strong>Promise 的基本语法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 实例对象 = <span class="keyword">new</span> <span class="title class_">Promise</span>(回调函数)</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;&#125;);</span><br></pre></td></tr></table></figure><p>回调函数中的参数：</p><ul><li>resolve：表示**(成功的回调)**，直接去找then，并且执行then里面的代码，同时将resolve里面的参数传递给then里面的函数。</li><li>reject：表示**(失败的回调)**，直接去找catch，并且执行catch里面的代码，同时将reject里面的参数传递给catch里面的函数。<br>Promise 的三个状态：</li><li>持续：pending</li><li>成功：fulfilled</li><li>失败：rejected<br>Promise 的两种转换(三种状态变成两种可能)：</li><li>从持续状态转换到成功</li><li>从持续状态转换到失败<br>Promise 的实例原型方法：</li><li>then(函数)：成功状态的时候执行的方法</li><li>catch(函数)：失败状态的时候执行的方法</li><li>finally(函数) ：结束时执行的方法，不管状态是成功还是失败，finally都会执行<br><strong>Promise 的调用方式 (链式调用)</strong></li><li>当在第一个then里面返回 一个新的promise对象的时候</li><li>可以在第一个then后面继续第二个then<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(time);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (time &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 成功状态的时候执行</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">sa</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sa);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 失败状态的时候执行</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">sc</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sc);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>使用函数简单封装Promise代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fz</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1成功&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2成功&quot;</span>, num);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3成功&quot;</span>, num);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>, num);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;无论最终是成功还是失败，都会执行&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="二-Promise的静态方法"><a href="#二-Promise的静态方法" class="headerlink" title="二. Promise的静态方法"></a>二. Promise的静态方法</h2><h3 id="1-all"><a href="#1-all" class="headerlink" title="(1) all"></a>(1) all</h3><p><strong>语法</strong>：Promise.all([多个 Promise])<br><strong>作用</strong>：用于将多个 Promise 实例，包装成一个新的 Promise 实例，接受一个<strong>数组作为参数</strong>，只有数组里面的每个状态都变成resolve，则新的 Promise 实例状态才会变成resolve。</p><blockquote><p>如果结果都为resolve，所有成功结果以数组的方式返回。 只要有一个为reject，就返回reject</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fz1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time, <span class="string">&#x27;第一个请求&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">&#x27;成功1&#x27;</span> &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">2</span>, <span class="attr">message</span>: <span class="string">&#x27;失败1&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fz2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time, <span class="string">&#x27;第二个请求&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">&#x27;成功2&#x27;</span> &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">2</span>, <span class="attr">message</span>: <span class="string">&#x27;失败2&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fz3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time, <span class="string">&#x27;第三个请求&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">&#x27;成功3&#x27;</span> &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">2</span>, <span class="attr">message</span>: <span class="string">&#x27;失败3&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">    .<span class="title function_">all</span>([<span class="title function_">fz1</span>(), <span class="title function_">fz2</span>(), <span class="title function_">fz3</span>()])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>, res))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>, err))</span><br></pre></td></tr></table></figure><h3 id="2-race"><a href="#2-race" class="headerlink" title="(2) race"></a>(2) race</h3><p><strong>语法</strong>：Promise.race([多个promise])<br><strong>作用</strong>：将多个 Promise 实例，包装成一个新的 Promise 实例，接受一个数组作为参数，只要其中有一个实例率先改变状态，则整个的状态就跟着改变。</p><blockquote><p>返回最先改变状态的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fz1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time, <span class="string">&#x27;第一个请求&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">&#x27;成功1&#x27;</span> &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">2</span>, <span class="attr">message</span>: <span class="string">&#x27;失败1&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fz2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time, <span class="string">&#x27;第二个请求&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">&#x27;成功2&#x27;</span> &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">2</span>, <span class="attr">message</span>: <span class="string">&#x27;失败2&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fz3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time, <span class="string">&#x27;第三个请求&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">&#x27;成功3&#x27;</span> &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">2</span>, <span class="attr">message</span>: <span class="string">&#x27;失败3&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">    .<span class="title function_">race</span>([<span class="title function_">fz1</span>(), <span class="title function_">fz2</span>(), <span class="title function_">fz3</span>()])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>, res))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>, err))</span><br></pre></td></tr></table></figure><h3 id="3-allSettled-ES2020新增"><a href="#3-allSettled-ES2020新增" class="headerlink" title="(3) allSettled (ES2020新增)"></a>(3) allSettled (ES2020新增)</h3><p><strong>语法</strong>：Promise.allSettle([多个promise])<br><strong>作用</strong>：方法接受一个数组作为参数，数组的每个成员都是一个 Promise 对象，并返回一个新的 Promise 对象。只有等到参数数组的所有 Promise 对象都发生状态变更（不管是fulfilled还是rejected），返回的 Promise 对象才会发生状态变更。<br><strong>简单理解</strong>就是：不管是成功还是失败，都会触发，并会把结果用数组的形式返回，数组里面放着每一个promise的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allSettled = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2, p3]);</span><br><span class="line">allSettled.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then:&#x27;</span>, res); <span class="comment">// 返回数组，数组里面有三个对象，对象里面区分成功和失败的值，状态是正常的。</span></span><br><span class="line">    <span class="comment">//status:resolve  value  /  status:reject reason</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">0</span>].<span class="property">status</span>); <span class="comment">// fulfilled</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">0</span>].<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">1</span>].<span class="property">status</span>); <span class="comment">// rejected</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">1</span>].<span class="property">reason</span>); <span class="comment">// 2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-any-（ES2021新增）"><a href="#4-any-（ES2021新增）" class="headerlink" title="(4) any()（ES2021新增）"></a>(4) any()（ES2021新增）</h3><p><strong>语法</strong>：Promise.any([多个promise])<br><strong>作用</strong>：该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。Promise.any()不会因为某个 Promise 变成rejected状态而结束，必须等到所有参数 Promise 变成rejected状态才会结束。</p><blockquote><p>只要有一个成功就会返回成功，如果有多个成功值，返回最先成功的，如果全部都失败，返回：<code>AggregateError: All promises were rejected</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="comment">// resolve(&#x27;1&#x27;)</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// reject(&#x27;2&#x27;)</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析：</span></span><br><span class="line"><span class="comment">// 如果遇到成功的请求，通过then返回resolve传递给then对应的值，如果都是失败的状态，最终走catch输出默认的字符( All promises were rejected),执行catch里面的代码，无法获取reject里面传入的值。</span></span><br><span class="line"><span class="keyword">let</span> any = <span class="title class_">Promise</span>.<span class="title function_">any</span>([p1, p2, p3]);</span><br><span class="line">any.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then:&#x27;</span>, res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch代码&#x27;</span>); </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">//默认的字符All promises were rejected</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-Promise的其他方法"><a href="#5-Promise的其他方法" class="headerlink" title="(5) Promise的其他方法"></a>(5) Promise的其他方法</h3><p>以下两个方法主要是开发人员调试用的</p><ul><li>resolve()强行把promise的状态改为成功<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(num).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li>reject()强行把Promise的状态改为失败<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(num).<span class="title function_">then</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三-JavaScript容错处理"><a href="#三-JavaScript容错处理" class="headerlink" title="三. JavaScript容错处理"></a>三. JavaScript容错处理</h2><p>因为js代码如果出现错误，立刻停止，后续的代码不会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// referenceError:a is not defined  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>所以需要采用方法使js代码出现错误时，不会影响到后续代码</p><h3 id="try…catch…"><a href="#try…catch…" class="headerlink" title="try…catch…"></a>try…catch…</h3><p><strong>语法1</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;执行代码&#125; <span class="keyword">catch</span> (err) &#123;执行代码&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：<br>首先执行try里面的代码，如果不报错，catch不执行 如果报错，不会抛出错误，而是执行catch，把错误信息给到err。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">//e:try里面如果存在错误，e就是try里面的错误信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// referenceError:a is not defined  </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这里是catch的输出&#x27;</span>); <span class="comment">// 这里是catch的输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后面后续的代码输出&#x27;</span>); <span class="comment">// 后面后续的代码输出</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后面后续的代码输出&#x27;</span>); <span class="comment">// 后面后续的代码输出</span></span><br></pre></td></tr></table></figure><p><strong>语法2</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;执行代码&#125; <span class="keyword">catch</span> (err) &#123;执行代码&#125; <span class="keyword">finally</span>&#123;执行代码&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：finally里面的语法不管是执行try还是catch，finally里面的代码一定会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">//e:try里面如果存在错误，e就是try里面的错误信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// referenceError:a is not defined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这里是catch的输出&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123; <span class="comment">//收尾的工作，不再使用的对象，变量，设置null</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally一定会执行&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">    a</span></span><br><span class="line"><span class="comment">    finally一定会执行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>应用场景-案例</strong><br>随机生成一个数字，添加判断条件，最终输出成功或失败结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> + <span class="number">2000</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">2500</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">cs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">fz</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">fz</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cs</span>()</span><br></pre></td></tr></table></figure><h2 id="四-利用promise封装ajax"><a href="#四-利用promise封装ajax" class="headerlink" title="四. 利用promise封装ajax"></a>四. 利用promise封装ajax</h2><p>封装前的分析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        封装ajax </span></span><br><span class="line"><span class="comment">            function ajax(options)&#123;&#125;</span></span><br><span class="line"><span class="comment">        调用封装的ajax</span></span><br><span class="line"><span class="comment">            ajax(&#123;&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        分析</span></span><br><span class="line"><span class="comment">            封装方案</span></span><br><span class="line"><span class="comment">                1. 回调函数方式</span></span><br><span class="line"><span class="comment">                    - 将来使用的时候，可能会出现回调地狱</span></span><br><span class="line"><span class="comment">                2. promise </span></span><br><span class="line"><span class="comment">                    - 后面 then/catch</span></span><br><span class="line"><span class="comment">                    - 也可以用async/await</span></span><br><span class="line"><span class="comment">            参数</span></span><br><span class="line"><span class="comment">                1. 请求地址 url 必填</span></span><br><span class="line"><span class="comment">                2. 请求方式 method，选填（只允许 get post），要么不传，默认值 get</span></span><br><span class="line"><span class="comment">                3. 是否异步 async，选填  默认true</span></span><br><span class="line"><span class="comment">                4. 参数 data 选填，默认是&#x27;&#x27;, （允许传查询字符串 和 对象）</span></span><br><span class="line"><span class="comment">                5. 请求头headers 选填，默认&#123;content-type:&#x27;application/x-www-form-urlencoded&#x27;&#125;</span></span><br><span class="line"><span class="comment">                6. 是否解析响应的参数 dataType, 选填 默认是string,  选填 json</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>封装代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象格式转查询字符串格式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryString</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        str += <span class="string">`&amp;<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;obj[k]&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用闭包保存url基准地址</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAjax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置一个变量作为基准地址，并长期保存这个变量</span></span><br><span class="line">    <span class="keyword">let</span> baseUrl = url</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装ajax函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">        <span class="comment">// 1.验证参数格式</span></span><br><span class="line">        <span class="comment">// 1-1.验证url格式：必填</span></span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">url</span>) &#123;</span><br><span class="line">            <span class="comment">// 没填抛出错误：&#x27;url必填&#x27;</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;url必填&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1-2.验证method：要么不写，要么get或post</span></span><br><span class="line">        <span class="keyword">if</span> (!(options.<span class="property">method</span> === <span class="literal">undefined</span> || <span class="regexp">/^(get|post)$/i</span>.<span class="title function_">test</span>(options.<span class="property">method</span>))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求方式支持get 和 post&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1-3.验证async：要么不写，要么true/false ===&gt; 参数是布尔类型</span></span><br><span class="line">        <span class="keyword">if</span> (!(options.<span class="property">async</span> === <span class="literal">undefined</span> || <span class="keyword">typeof</span> options.<span class="property">async</span> === <span class="string">&#x27;boolean&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;async需要一个布尔值&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1-4.验证data：要么不写，支持字符串格式/对象格式</span></span><br><span class="line">        <span class="keyword">if</span> (!(options.<span class="property">data</span> === <span class="literal">undefined</span> || <span class="keyword">typeof</span> options.<span class="property">data</span> === <span class="string">&#x27;string&#x27;</span> || <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(options.<span class="property">data</span>) === <span class="string">&#x27;[object Object]&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;data需要一个字符串格式或者对象格式&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1-5.验证headers：要么不写，要么是对象格式</span></span><br><span class="line">        <span class="keyword">if</span> (!(options.<span class="property">headers</span> === <span class="literal">undefined</span> || <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(options.<span class="property">headers</span>) === <span class="string">&#x27;[object Object]&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;headers需要一个对象格式&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1-6.验证dataType参数：要么不写，要么是string 或者 json </span></span><br><span class="line">        <span class="keyword">if</span> (!(options.<span class="property">dataType</span> === <span class="literal">undefined</span> || <span class="regexp">/^(string|json)$/</span>.<span class="title function_">test</span>(options.<span class="property">dataType</span>))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;dataType 只能写 string json&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.准备一个默认值</span></span><br><span class="line">        <span class="keyword">const</span> _default = &#123;</span><br><span class="line">            <span class="comment">// 修改请求地址：基准地址+options.url</span></span><br><span class="line">            <span class="comment">// eg：options.url = /test/first</span></span><br><span class="line">            <span class="attr">url</span>: baseUrl + options.<span class="property">url</span>,</span><br><span class="line">            <span class="comment">// method只有三个选择（没写，get，post）</span></span><br><span class="line">            <span class="attr">method</span>: options.<span class="property">method</span> || <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            <span class="comment">// async只有三个选择（没写，true，false）并且没写：默认值是true</span></span><br><span class="line">            <span class="comment">// 一个ES2020新的操作符 ??</span></span><br><span class="line">            <span class="comment">// ?? 空值运算符: 只有左边的是undefined或者null, 才使用右边的</span></span><br><span class="line">            <span class="attr">async</span>: options.<span class="property">async</span> ?? <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// data只能有三个选择：字符串、对象、undefined，默认值是&#x27;&#x27;</span></span><br><span class="line">            <span class="attr">data</span>: options.<span class="property">data</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="comment">// headers只能是 undefined或者对象，默认是&#123;&#x27;content-type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;&#125;</span></span><br><span class="line">            <span class="attr">headers</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>, ...options.<span class="property">headers</span> &#125;,</span><br><span class="line">            <span class="comment">// 是否解析响应的参数 dataType, (选填) 默认是string,  (选填) json</span></span><br><span class="line">            <span class="attr">dataType</span>: options.<span class="property">dataType</span> || <span class="string">&#x27;string&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2-1.data可能是对象，如果是对象，需要转为查询字符串格式</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> _default.<span class="property">data</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            _default.<span class="property">data</span> = <span class="title function_">queryString</span>(_default.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2-2.请求方式是get并且data有值，url需要拼接上刚刚转换的data</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/^get$/i</span>.<span class="title function_">test</span>(_default.<span class="property">method</span>) &amp;&amp; _default.<span class="property">data</span>) &#123;</span><br><span class="line">            _default.<span class="property">url</span> = _default.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + _default.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 创建ajax对象 按照promise方式</span></span><br><span class="line">        <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">            xhr.<span class="title function_">open</span>(_default.<span class="property">method</span>, _default.<span class="property">url</span>, <span class="literal">false</span>)</span><br><span class="line">            xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 这里的xhr.readyState必然是4，onload是一个请求完成的事件</span></span><br><span class="line">                <span class="comment">// 如果请求成功，xhr状态码是4，http状态码是200-299 成功</span></span><br><span class="line">                <span class="comment">// 需求， 根据业务进一步封装，如果后端返回的内容中，code为1，成功，其他失败</span></span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">                    <span class="keyword">let</span> res = xhr.<span class="property">responseText</span></span><br><span class="line">                    <span class="comment">// 根据服务端返回的内容判断</span></span><br><span class="line">                    <span class="comment">// 首先代码进入到这里，http请求成功，可以成功从服务端拿到响应内容</span></span><br><span class="line">                    <span class="comment">// 响应内容分两种情况，</span></span><br><span class="line">                    <span class="comment">// 一个是正确的</span></span><br><span class="line">                    <span class="comment">// 一个是业务错误 （参数不正确，代码错误，其他....）</span></span><br><span class="line">                    <span class="comment">// 根据后端返回的内容判断, code:1 正确的 成功</span></span><br><span class="line">                    <span class="comment">// code 不是1 错误（用户密码错误，登录时间过期 ）</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// 正确的：成功返回正确的数据 </span></span><br><span class="line">                        <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">&quot;成功&quot;</span>, <span class="attr">data</span>: _default.<span class="property">dataType</span> === <span class="string">&#x27;string&#x27;</span> ? xhr.<span class="property">responseText</span> : res &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 错误：包括各种错误 </span></span><br><span class="line">                        <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">message</span>: <span class="string">&#x27;业务失败&#x27;</span>, <span class="attr">err</span>: res &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 请求不成功 -- 进入这里的代码必然是http状态码不是200-299的情况</span></span><br><span class="line">                    <span class="keyword">let</span> res = xhr.<span class="property">responseText</span></span><br><span class="line">                    <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">message</span>: <span class="string">&#x27;网络请求失败&#x27;</span>, <span class="attr">err</span>: res &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果post </span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/^post$/i</span>.<span class="title function_">test</span>(_default.<span class="property">method</span>)) &#123;</span><br><span class="line">                xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, _default.<span class="property">headers</span>[<span class="string">&#x27;content-type&#x27;</span>])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果有token </span></span><br><span class="line">            <span class="keyword">if</span> (_default.<span class="property">headers</span>.<span class="property">authorization</span>) &#123;</span><br><span class="line">                xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;authorization&#x27;</span>, _default.<span class="property">headers</span>[<span class="string">&#x27;authorization&#x27;</span>])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是post 需要发送data</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/^post$/i</span>.<span class="title function_">test</span>(_default.<span class="property">method</span>)) &#123;</span><br><span class="line">                xhr.<span class="title function_">send</span>(_default.<span class="property">data</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                xhr.<span class="title function_">send</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 把promise对象返回</span></span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回ajax函数</span></span><br><span class="line">    <span class="keyword">return</span> ajax</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置url基准地址</span></span><br><span class="line"><span class="keyword">let</span> ajax = <span class="title function_">createAjax</span>(<span class="string">&#x27;http://localhost:8888&#x27;</span>)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.利用Promise的then()方法测试封装的ajax</span></span><br><span class="line"><span class="comment">// ajax(&#123;</span></span><br><span class="line"><span class="comment">//     url: &#x27;/test/first&#x27;,</span></span><br><span class="line"><span class="comment">// &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(res);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.利用async await 测试封装的ajax</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">ajax</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/goods/list&#x27;</span>, <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span> &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p><strong>注</strong>：测试前需要开启本地服务器<br>本地服务器下载地址：<a href="https://download.csdn.net/download/qq_45867247/87420764?spm=1001.2014.3001.5503">Ajax案例测试本地服务器-Node.js文档类资源-CSDN文库</a></p><h2 id="五-async和await"><a href="#五-async和await" class="headerlink" title="五. async和await"></a>五. async和await</h2><ol><li>async其实就是promise的语法糖。函数前面加一个async，函数里面异步操作的方法前加一个await关键字。<br> 顾名思义，await就是让你等一下，执行完了再继续往下走。<br> <strong>注意</strong>：await只能在async函数中执行，否则会报错。<br> <strong>目的</strong>：让异步代码像同步代码一样执行。</li><li>async:异步的意思，作用是申明一个异步函数，函数的返回值是promise 对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn1</span>()); <span class="comment">//async函数隐式返回一个promise对象</span></span><br></pre></td></tr></table></figure></li><li>await:等待<br> await是async+wait的结合 即异步等待，async和await 二者必须是结合着使用。<br> <strong>注</strong>：匿名函数也可以使用async和await<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> h = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(h); <span class="comment">//hello  证明await就是promise里面then的语法糖。</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">Promise是**ES6 新增**的特性**目的**：用来解决异步解决回调地狱问题</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="RequestData" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/RequestData/"/>
    
    
    <category term="RequestData" scheme="https://fanxing28.github.io/tags/RequestData/"/>
    
  </entry>
  
  <entry>
    <title>Ajax 基础知识</title>
    <link href="https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/RequestData/Ajax%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://fanxing28.github.io/2023/12/14/%E5%89%8D%E7%AB%AF/RequestData/Ajax%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-12-14T13:55:00.000Z</published>
    <updated>2023-12-14T14:56:23.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-概念"><a href="#一-概念" class="headerlink" title="一. 概念"></a>一. 概念</h2><p>AJAX （ Asynchronous JavaScript and XML）是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br><strong>注</strong>：前后端交互只能使用字符串<br><strong>AJAX 的优势</strong></p><ol><li>不需要插件的支持，原生 js 就可以使用。</li><li>用户体验好（不需要刷新页面就可以更新数据）。</li><li>减轻服务端和带宽的负担。<br><strong>最大的优点</strong>是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。<br><strong>缺点</strong>： 搜索引擎的支持度不够，因为数据都不在页面上，搜索引擎搜索不到。</li></ol><h2 id="二-Ajax-请求的步骤"><a href="#二-Ajax-请求的步骤" class="headerlink" title="二. Ajax 请求的步骤"></a>二. Ajax 请求的步骤</h2><p><strong>Ajax 四部曲与后端进行交互</strong>：</p><ol><li>创建XMLHttpRequest实例对象;</li><li>配置请求信息，使用open方法与服务器建立链接;</li><li>向服务器发送数据，进行解析;</li><li>在回调函数中针对不同的响应状态进行处理;</li></ol><h3 id="1-创建XMLHttpRequest对象"><a href="#1-创建XMLHttpRequest对象" class="headerlink" title="1. 创建XMLHttpRequest对象"></a>1. 创建XMLHttpRequest对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr); <span class="comment">// XMLHttpRequest&amp;nbsp;&#123;onreadystatechange: null, readyState: 0, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload,&amp;nbsp;…&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置请求信息，使用open方法与服务器建立链接"><a href="#2-配置请求信息，使用open方法与服务器建立链接" class="headerlink" title="2. 配置请求信息，使用open方法与服务器建立链接"></a>2. 配置请求信息，使用open方法与服务器建立链接</h3><p><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(method, url, <span class="keyword">async</span>);</span><br></pre></td></tr></table></figure><ul><li>第一个参数：请求方式（get、post、put、delete…）常用的是get和post</li><li>第二个参数：请求地址</li><li>第三个参数：是否异步（<strong>true:异步（默认）</strong>，false:同步）<blockquote><p>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8888/test/first&#x27;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-向服务器发送数据，进行解析"><a href="#3-向服务器发送数据，进行解析" class="headerlink" title="3. 向服务器发送数据，进行解析"></a>3. 向服务器发送数据，进行解析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h3 id="4-在回调函数中针对不同的响应状态进行处理"><a href="#4-在回调函数中针对不同的响应状态进行处理" class="headerlink" title="4. 在回调函数中针对不同的响应状态进行处理"></a>4. 在回调函数中针对不同的响应状态进行处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// onload页面加载完成，相当于AJAX的状态码：readState === 4时</span></span><br></pre></td></tr></table></figure><p><strong>XMLHttpRequest.responseText</strong>： 在一个请求被发送后，从服务器端返回文本。<br><strong>readystatechange事件</strong>：当就绪状态码发生改变时触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-Ajax-状态码"><a href="#三-Ajax-状态码" class="headerlink" title="三. Ajax 状态码"></a>三. Ajax 状态码</h2><p><strong>语法</strong>：xhr.readyState：就绪状态码，通过数字表达解析过程是否完成。</p><ul><li><code>readyState === 0</code>：请求未初始化<blockquote><p>也就是XMLHttpRequest对象创建成功，但open()方法还没有执行</p></blockquote></li><li><code>readyState === 1</code>：配置本次请求信息成功<blockquote><p>也就是服务器连接已建立(已调用open方法，但还未调用send)</p></blockquote></li><li><code>readyState === 2</code>：请求已接收(已调用send方法)<blockquote><p>也就是请求已经成功，响应数据还没有解析好</p></blockquote></li><li><code>readyState === 3</code>：请求处理中(请求已到达服务端，正在处理)<blockquote><p>也就是浏览器正在解析本次响应，还没有完成</p></blockquote></li><li><code>readyState === 4</code>：请求已完成，且响应已就绪<blockquote><p>也就是浏览器解析响应完成，可以使用responseText（可以在客户端使用了）</p></blockquote></li></ul><p><strong>注</strong>：<code>readyState === 2\3\4</code> 都可以认为是请求成功</p><h2 id="四-Ajax-请求方式"><a href="#四-Ajax-请求方式" class="headerlink" title="四. Ajax 请求方式"></a>四. Ajax 请求方式</h2><h3 id="1-常见的请求方式"><a href="#1-常见的请求方式" class="headerlink" title="(1) 常见的请求方式"></a>(1) 常见的请求方式</h3><ul><li>GET 偏向于获取的语义</li><li>POST 偏向于发送的语义</li><li>PUT 偏向于提交的语义（提交保存）</li><li>PATCH 偏向于提交的语义（提交修改）</li><li>DELETE 偏向于删除的语义</li><li>HEAD 偏向于获取响应头信息</li><li>OPTIONS 偏向于获取服务器的信息</li><li>CONNECT 保留方式</li><li>…<br><strong>最常见的请求方式</strong>：</li><li>GET</li><li>POST</li></ul><h3 id="2-GET和POST区别"><a href="#2-GET和POST区别" class="headerlink" title="(2) GET和POST区别"></a>(2) GET和POST区别</h3><ol><li>携带参数的位置<blockquote><p>get：直接写地址栏后面<br>post：在请求体中书写</p></blockquote></li><li>携带参数的大小<blockquote><p>get：2kb左右<br>post：原则上没有大小限制，服务器可以限制</p></blockquote></li><li>携带参数的格式<blockquote><p>get：只允许携带查询字符串格式<br>post：原则上不限制格式，但是要在请求报文（content-type）中约定</p></blockquote></li><li>安全<blockquote><p>get：明文发送，相对不安全<br>post：暗文发送，相对安全</p></blockquote></li></ol><h3 id="3-使用GET请求发送数据"><a href="#3-使用GET请求发送数据" class="headerlink" title="(3) 使用GET请求发送数据"></a>(3) 使用GET请求发送数据</h3><p>使用GET请求发送数据时，将数据通 过 ? 和 &amp; 符号拼接在地址栏的后面（安全性不高，地址栏可见）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> 年龄：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    submit.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发送请求数据（使用get方式请求，数据用?拼接在地址栏后面）</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">`http://localhost:8888/test/third?name=<span class="subst">$&#123;username.value&#125;</span>&amp;age=<span class="subst">$&#123;age.value&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-使用POST请求发送数据"><a href="#4-使用POST请求发送数据" class="headerlink" title="(4) 使用POST请求发送数据"></a>(4) 使用POST请求发送数据</h3><p>使用POST方式请求数据时，将数据放置在send()方法里面发送给后端，多条数据通过&amp;符号进行拼接。并且必须设置请求头（固定格式）才能发送，安全性比较好。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> 年龄：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    submit.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">`http://localhost:8888/test/fourth`</span>);</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>); <span class="comment">// 设置请求头固定，发送内容类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用POST方式发送请求数据通过send()方法发送</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>(<span class="string">`name=<span class="subst">$&#123;username.value&#125;</span>&amp;age=<span class="subst">$&#123;age.value&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五-同步和异步"><a href="#五-同步和异步" class="headerlink" title="五. 同步和异步"></a>五. 同步和异步</h2><p>javascript是单线程的，只有一个主线程，一次只能执行一个任务，同步和异步指的就是在线程上面执行代码的顺序。</p><ol><li><strong>同步</strong>：阻塞模式，后一个任务必须等到前一个任务完成才执行，顺序执行，主线程上面的任务。</li><li><strong>异步</strong>：非阻塞模式，异步任务先进入队列等候，等到主线程上面的任务完成，才被通知执行。定时器就是异步的。<br><strong>Ajax的异步操作</strong><br>准确的说：定时器异步指的是定时器里面的回调函数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); <span class="comment">//同步</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">//同步</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:8888/goods/list&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>); <span class="comment">//同步</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>); <span class="comment">//同步</span></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//异步</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(xhr.responseText);</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>); <span class="comment">//同步</span></span><br><span class="line"><span class="comment">// 上述的代码依次输出的结果为：1 2 3 4 7 5 6</span></span><br><span class="line"><span class="comment">// 上面的代码证明ajax监听事情是异步的，第四步是异步的。</span></span><br></pre></td></tr></table></figure>所以在平时使用时经常将第三步和第四步进行位置的调换：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:8888/goods/list&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//异步,最后</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>这样交换之后就可以不用判断请求是异步还是同步了。</li></ol><h2 id="六-案例测试"><a href="#六-案例测试" class="headerlink" title="六. 案例测试"></a>六. 案例测试</h2><p><strong>接口文档</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.1</span> 测试请求<span class="number">1</span></span><br><span class="line">  <span class="number">2.1</span><span class="number">.1</span> 请求地址</span><br><span class="line">  &gt; <span class="string">`/test/first`</span></span><br><span class="line">  <span class="number">2.1</span><span class="number">.2</span> 请求方式</span><br><span class="line">  &gt; <span class="string">`get`</span></span><br><span class="line">  <span class="number">2.1</span><span class="number">.3</span> 携带参数</span><br><span class="line">  &gt; 无</span><br><span class="line">  <span class="number">2.1</span><span class="number">.4</span> 响应数据</span><br><span class="line">  &gt; 哇塞, 你已经成功使用 ajax 发送给我了一个请求, 这是我给你的回应, 我是一个字符串类型 ^_^ !</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&quot;http://localhost:8888/test/first&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态码&#x27;</span>, xhr.<span class="property">readyState</span>);</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(); <span class="comment">// 哇塞, 你已经成功使用 ajax 发送给我了一个请求, 这是我给你的回应, 我是一个字符串类型 ^_^ !</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">AJAX （ Asynchronous JavaScript and XML）是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="RequestData" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/RequestData/"/>
    
    
    <category term="RequestData" scheme="https://fanxing28.github.io/tags/RequestData/"/>
    
  </entry>
  
</feed>
