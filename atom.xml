<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FanXing28</title>
  
  
  <link href="https://fanxing28.github.io/atom.xml" rel="self"/>
  
  <link href="https://fanxing28.github.io/"/>
  <updated>2023-12-03T15:05:25.582Z</updated>
  <id>https://fanxing28.github.io/</id>
  
  <author>
    <name>繁星ツ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue 原理概念</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Vue/Vue%20%E5%8E%9F%E7%90%86%E6%A6%82%E5%BF%B5/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Vue/Vue%20%E5%8E%9F%E7%90%86%E6%A6%82%E5%BF%B5/</id>
    <published>2023-12-03T14:53:00.000Z</published>
    <updated>2023-12-03T15:05:25.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-服务器渲染"><a href="#一-服务器渲染" class="headerlink" title="一. 服务器渲染"></a>一. 服务器渲染</h2><p><strong>服务器渲染</strong>：前端的代码和后端的代码全在后端的框架上进行完成的<br><strong>后端渲染和前后端分离</strong></p><ul><li>后端渲染特点：速度快和更好的SEO优化（搜索引擎优化）</li><li>前后端分离：降低了开发人员的要求（只需要会前端或后端就可以了）和降低了服务端压力（处理是在每位用户的电脑中）<br>Vue 的后端渲染框架：nuxt React 的后端渲染框架：next</li></ul><h2 id="二-MVC-和-MVVM"><a href="#二-MVC-和-MVVM" class="headerlink" title="二. MVC 和 MVVM"></a>二. MVC 和 MVVM</h2><p>MVC 和 MVVM 都是常见的<strong>软件架构思想</strong><br>MVC 由三部分组成：</p><ul><li>model：数据层</li><li>view：视图层</li><li>controller：控制层</li><li>视图（View）：用户界面。</li><li>控制器（Controller）：业务逻辑</li><li>模型（Model）：数据保存<br>MVC 的通信方式：<blockquote><p>view -&gt; controller -&gt; model -&gt; view</p></blockquote></li></ul><p><img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/front/vue/VueMVC%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/front/vue/VueMVC%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="VueMVC通信方式.png"><br>MVVM 有三部分组成：</p><ul><li>model：数据层（指的是后端传递的数据）</li><li>view：视图层（指的是所看到的页面）</li><li>viewmodel：视图模型层（连接 view 和 model 的桥梁）<br>将模型(Model) 转化成视图(View)<blockquote><p>实现的方式是： 数据绑定</p></blockquote></li></ul><p>将视图(View)转化成模型(Model)</p><blockquote><p>DOM 事件监听</p></blockquote><p>MVVM 的通信方式：</p><blockquote><p>view &lt;-&gt; viewmodel -&gt;&lt;- model</p></blockquote><p><img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/front/vue/VueMVVM%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/front/vue/VueMVVM%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="VueMVVM通信方式.png"><br><strong>注</strong>：MVVM 主要解决了 MVC中大量的 DOM 操作使页面渲染性能降低，加载速度变慢</p><h2 id="三-diff算法"><a href="#三-diff算法" class="headerlink" title="三. diff算法"></a>三. diff算法</h2><ul><li>同级比较：减少比较次数</li><li>比较key：相同的元素直接复用，减少不必要的销毁和创建<br>在vue3的diff 算法做了更新</li><li>静态标记</li><li>静态提升</li><li>事件缓存</li></ul>]]></content>
    
    
    <summary type="html">Vue的一些原理概念（服务器渲染、Diff算法、Mvc和MVVM等）</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router (路由)</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Vue/Vue-Router%20(%E8%B7%AF%E7%94%B1)/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Vue/Vue-Router%20(%E8%B7%AF%E7%94%B1)/</id>
    <published>2023-12-03T14:47:00.000Z</published>
    <updated>2023-12-03T15:05:25.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-路由原理"><a href="#一-路由原理" class="headerlink" title="(一) 路由原理"></a>(一) 路由原理</h2><p>利用地址栏url的hash，就是常用的锚点（#）操作，类似页面中点击某小图标，返回页面顶部，JS通过<strong>hashChange事件</strong>来监听url的改变（知识监听hash值的变化，而不是直接切换页面）<br><strong>前端路由的工作方式</strong>：</p><ol><li>用户点击了页面上的路由链接</li><li>导致了 URL 地址栏中的 Hash 值发生了变化</li><li>前端路由通过hashChange事件来监听 Hash 地址的变化</li><li>前端路由把当前 Hash 地址对应的组件渲染到浏览器中<br>a标签中href的属性中加 # 和不加 #的<strong>区别</strong>：</li></ol><ul><li>加了 # 的<strong>不会刷新页面</strong></li><li>不加 # 的<strong>会刷新页面</strong><br><strong>结论</strong>：前端路由，指的是 Hash 地址与组件之间的对应关系！<br><code>this.$router</code> 和 <code>this.$route</code>的区别：</li><li>this.$router：表示整个路由实例</li><li>this.$route：表示当前页面的路由信息</li></ul><h2 id="二-实现路由切换"><a href="#二-实现路由切换" class="headerlink" title="(二) 实现路由切换"></a>(二) 实现路由切换</h2><p><strong>(1) 使用原生js实现路由切换</strong>的步骤：</p><ol><li>需要一些可以改变 url 的按钮，a标签<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#zs&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#ls&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>需要一个存放切换内容的容器<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>需要一个<strong>路由表</strong>：就是一个数组，里面每一项是对象（一般至少包含path，template）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;zs&quot;</span>,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`&lt;div&gt;我叫张三&lt;/div&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;ls&quot;</span>,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`&lt;div&gt;我叫李四&lt;/div&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li>监听url的改变<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;hashchange&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hash = location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    routes.<span class="title function_">forEach</span>(item,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hash === item.<span class="property">path</span>)&#123;</span><br><span class="line">            box.<span class="property">innerHTML</span> = item.<span class="property">template</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><strong>(2) 使用VueRouter实现路由切换</strong>的步骤：</li><li>首先引入Vue和VueRouter<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>可以通过引入CDN的方式加速加载：<a href="https://www.bootcdn.cn/">BootCDN - Bootstrap 中文网开源项目免费 CDN 加速服务</a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.1.6/vue-router.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用router-link组件（相当于html中的a标签）进行导航，并通过传递to（相当于a标签中href属性）来指定跳转的链接<blockquote><p>注：在使用的时候地址栏会在路径前面自动添加 # (eg：#&#x2F;about)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>to about<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用 router-view 标签作为路由的出口（路由匹配到的组件将渲染到这里）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>指定路由组件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;Home&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Movie</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;Movie&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;About&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>进行路由映射组件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/movie&quot;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>创建路由实例（自动监听url改变）并传递<code>routes</code>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>: routes, <span class="comment">// `routes: routes` 的缩写</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>创建并挂载实例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line"><span class="comment">// 使用 routes 配置</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><strong>(3) 在项目中使用路由</strong>的步骤：</li><li>安装VueRouter可以在项目创建的时候就添加，也可以后面需要使用的时候在添加，添加方式：<br> npm方式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>yarn方式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router@4</span><br></pre></td></tr></table></figure></li><li>在根组件使用 router-link 和 Router-view做路由的跳转和路由出口</li><li>在src目录下新建router目录及创建index.js文件存放所有路由<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createRouter和createWebHistory</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 引入每一个路由组件</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 创建了路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    history :<span class="title function_">createWebHistory</span>(&#123;<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>&#125;),</span><br><span class="line">    <span class="comment">// 创建路由表</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/zs&quot;</span></span><br><span class="line">            <span class="attr">component</span>: <span class="variable constant_">ZS</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 对外暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li>在main.js入口文件引入router目录，并使用路由 <code>app.use(router)</code><br> 可以通过 <code>this.$route.params.id</code> 拿到动态路由的id</li></ol><h2 id="三-动态路由匹配"><a href="#三-动态路由匹配" class="headerlink" title="(三) 动态路由匹配"></a>(三) 动态路由匹配</h2><h3 id="1-路由跳转传参"><a href="#1-路由跳转传参" class="headerlink" title="(1) 路由跳转传参"></a>(1) 路由跳转传参</h3><p>Vue中路由地址是精准匹配的，在路由路径后加 <code>/:id(或其他变量名)</code>，通过URL跳转传参<br><strong>注</strong>：动态参数也可以传递多个：<code>/:id/:num</code></p><h3 id="2-响应路由参数的变化"><a href="#2-响应路由参数的变化" class="headerlink" title="(2) 响应路由参数的变化"></a>(2) 响应路由参数的变化</h3><p>使用带有参数的路由时需要注意的是，当用户从 <code>/users/johnny</code> 导航到 <code>/users/jolyne</code> 时，<strong>相同的组件实例将被重复使用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。<strong>不过，这也意味着组件的生命周期钩子不会被调用</strong>。（这就意味着如果你需要从一个详情页跳转到另外一个详情页时，详情页组件会进行复用）<br>要对同一个组件中参数的变化做出响应的话，你可以简单地 watch <code>$route</code> 对象上的任意属性，在这个场景中，就是 <code>$route.params</code> （可以使用watch进行监听$route(url的改变)）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">    $route(to,<span class="keyword">from</span>)&#123;</span><br><span class="line">        <span class="comment">//  to：表示要去的页面的路由信息</span></span><br><span class="line">        <span class="comment">// from：表示来自的页面的路由信息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = to.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，使用 <code>beforeRouteUpdate</code> 导航守卫，它也可以取消导航：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 对路由变化做出响应...</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(to.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-404路由"><a href="#3-404路由" class="headerlink" title="(3) 404路由"></a>(3) 404路由</h3><p>创建一个404页面<br><strong>注</strong>：需要路由表的最下面加上404路由（因为Vue是排他性路由（从路由表上向下匹配：只要匹配到就不在往下匹配了），React的5版本是包容性路由（会将整个路由表中的路由都匹配一遍：所以有时会同时匹配到多个路由））</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/:pathMatch(.*)*&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">NotFound</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在参数中自定义正则</strong>：就是在动态路由中可以添加一些正则表达式进行更精准的匹配。（eg：<code>/:id(\\d+)</code> ：只匹配数字）<br>后面添加?表示：<strong>动态可选路由</strong>（就是:id可有可没有）（eg: <code>/:id?</code>）</p><h3 id="4-嵌套路由"><a href="#4-嵌套路由" class="headerlink" title="(4) 嵌套路由"></a>(4) 嵌套路由</h3><p>直接在路由表中要加下一级路由的位置添加children属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/hot&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Hot</span>,</span><br><span class="line">        <span class="comment">// children：表示的是下一级路由，语法和routes完全相同</span></span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;/hot/yesterday&quot;</span>,</span><br><span class="line">                <span class="comment">// 另外一种写法：</span></span><br><span class="line">                <span class="comment">// path: &quot;yesterday&quot;</span></span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Yesterday</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="四-编程式导航"><a href="#四-编程式导航" class="headerlink" title="(四) 编程式导航"></a>(四) 编程式导航</h2><p>编程式导航指的是通过js的方式做跳转<br><strong>路由跳转的三种方法</strong>：push()、replace()、go()</p><ul><li><strong>push() 方法</strong>是可以在历史记录里面追加，它是可以后退的</li><li><strong>replace() 方法</strong>是替换当前的历史记录，后退的时候回跳过当前页面</li><li><strong>go() 方法</strong>是用于前进或者后退，里面写整数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/users/eduardo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/eduardo&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><strong>声明式导航和编程式导航的使用场景</strong>：</li><li>多数情况下，router-link声明式导航和编程式导航是可以换着用</li><li>router-link在使用的过程中，被选中的那一项会自动router-link-active的类名，可以很方便的实现导航高亮（nav导航的时候用）</li><li>需要使用js进行跳转的时候，使用编程式导航</li></ul><h2 id="五-命名路由"><a href="#五-命名路由" class="headerlink" title="(五) 命名路由"></a>(五) 命名路由</h2><p>除了 <code>path</code> 之外，你还可以为任何路由提供 <code>name</code>。这有以下优点：</p><ul><li>没有硬编码的 URL</li><li><code>params</code> 的自动编码&#x2F;解码。</li><li>防止你在 url 中出现打字错误。</li><li>绕过路径排序（如显示一个）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>要链接到一个命名的路由，可以向 <code>router-link</code> 组件的 <code>to</code> 属性传递一个对象：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  User</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="六-命名视图"><a href="#六-命名视图" class="headerlink" title="(六) 命名视图"></a>(六) 命名视图</h2><p>有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 <code>sidebar</code> (侧导航) 和 <code>main</code> (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 <code>router-view</code> 没有设置名字，那么默认为 <code>default</code>。<br>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在路由出口标签上添加name属性 --&gt;</span><br><span class="line">&lt;router-view name=&quot;a&quot;&gt;&lt;router-view&gt;</span><br><span class="line">&lt;router-view name=&quot;h&quot;&gt;&lt;router-view&gt;</span><br><span class="line">&lt;!-- 在路由表中添加多个component --&gt;</span><br><span class="line">&#123;</span><br><span class="line">    path: &#x27;/about&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        a: about</span><br><span class="line">        h: home</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实在很多时候一般需要添加多个组件时可以将router-view将所有组件进行包裹就行，而命名组件的使用场景可以是在页面需要在不同的地方分别添加路由是使用。<br><strong>使用命名路由</strong>：</p><ol><li>要将component换成components</li><li>在页面里面需要给routerView组件添加name属性</li></ol><h2 id="七-重定向"><a href="#七-重定向" class="headerlink" title="(七) 重定向"></a>(七) 重定向</h2><p>重定向也是通过 <code>routes</code> 配置来完成，下面例子是从 <code>/home</code> 重定向到 <code>/</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/&#x27;</span> &#125;]</span><br></pre></td></tr></table></figure><p>重定向的目标也可以是一个命名的路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;homepage&#x27;</span> &#125; &#125;]</span><br></pre></td></tr></table></figure><h2 id="八-别名"><a href="#八-别名" class="headerlink" title="(八) 别名"></a>(八) 别名</h2><p>别名就是在路由表中添加一个属性alias，用法简单来说就是给一个页面或路由导航添加一个其他的名字。主要是用于取一个十分语义化的别名让其跳转。<br><strong>将props传递给路由组件</strong>：在路由表中添加 props: true 就可以在组件里面直接使用props来接收参数</p><h2 id="九-不同的历史模式"><a href="#九-不同的历史模式" class="headerlink" title="(九) 不同的历史模式"></a>(九) 不同的历史模式</h2><h3 id="1-Hash-模式"><a href="#1-Hash-模式" class="headerlink" title="(1) Hash 模式"></a>(1) Hash 模式</h3><p>引入代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br></pre></td></tr></table></figure><p>在创建路由实例时使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-history-模式"><a href="#2-history-模式" class="headerlink" title="(2) history 模式"></a>(2) history 模式</h3><p>引入代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br></pre></td></tr></table></figure><p>在创建路由实例时使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Hash模式和history模式的区别</strong>：</p><ul><li>Hash模式url带：”#” （优势：将项目打包放到服务器的时候不会出现问题）</li><li>history模式url不带：”#”（优势：美观，当生产模式的时候会出现页面刷新出现404）问题的解决方式：在后端进行一些配置</li></ul><h3 id="3-abstract-路由模式"><a href="#3-abstract-路由模式" class="headerlink" title="(3) abstract 路由模式"></a>(3) abstract 路由模式</h3><p>主要在app中运行<br>abstract 是vue路由中的第三种模式，本身是用来在不支持浏览器API的环境中，充当fallback，而不论是hash还是history模式都会对浏览器上的url产生作用，本文要实现的功能就是在已存在的路由页面中内嵌其他的路由页面，而保持在浏览器当中依旧显示当前页面的路由path，这就利用到了abstract这种与浏览器分离的路由模式</p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>主要是新增了两个方法：router.addRoute()<code>和</code>router.removeRoute()</p><blockquote><p>主要用于主动地添加和删除路由用的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">addRoute</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;)</span><br></pre></td></tr></table></figure><p>主要用于后台管理项目中的主要内容区（通过路由显示的）每中不同角色的人进入系统会根据不同的权限选择性的显示功能界面时可以使用这两个方法（并不是说你只要将功能菜单栏来控制不同权限显示不同的界面，但是这样会导致没有权限的人通过在地址栏进行操作也可以看到超出自身权限的内容）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">addRoute</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;)</span><br><span class="line"><span class="comment">// 删除路由</span></span><br><span class="line">router.<span class="title function_">removeRoute</span>(<span class="string">&#x27;about&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><h3 id="1-全局前置守卫-beforeEach"><a href="#1-全局前置守卫-beforeEach" class="headerlink" title="(1) 全局前置守卫(beforeEach)"></a>(1) 全局前置守卫(beforeEach)</h3><p><strong>触发时机</strong>：在进入路由页面之前，可以在这个函数中进行判断页面是否应该进入下一个路由<br>只要路由发生改变，那么这个函数（beforeEach）就会执行<br>beforeEach函数有三个参数：</p><ul><li>to：表示的是要去的那个页面的路由信息</li><li>from：表示的是来的那个页面的路由信息</li><li>next：表示放行（false：不放行；true：放行(默认值)）<blockquote><p>如果next()中是一个路由路径，则表示要重定向到那个路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; ... &#125;)</span><br><span class="line"><span class="comment">// 只要路由发生改变，那么这个函数就会执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 返回 false 以取消导航</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-全局解析守卫-beforeResolve"><a href="#2-全局解析守卫-beforeResolve" class="headerlink" title="(2) 全局解析守卫(beforeResolve)"></a>(2) 全局解析守卫(beforeResolve)</h3><p>执行时机和作用域以及参数与全局前置守卫几乎一致（执行会稍微慢于beforeEach）<br><strong>唯一区别</strong>：beforeEach和beforeResolve之间有一个<strong>解析异步路由组件</strong>的步骤，等同于在beforeEach的时候异步路由组件还没有解析，而beforeResolve时路由正在解析。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="keyword">async</span> to =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresCamera</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">askForCameraPermission</span>()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">                <span class="comment">// ... 处理错误，然后取消导航</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">                <span class="keyword">throw</span> error</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-全局后置钩子-afterEach"><a href="#3-全局后置钩子-afterEach" class="headerlink" title="(3) 全局后置钩子(afterEach)"></a>(3) 全局后置钩子(afterEach)</h3><p><strong>执行时机</strong>：在跳转路由完成之后触发<br>afterEach函数的参数只有to和from，它没有next</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-路由独享守卫-beforeEnter"><a href="#4-路由独享守卫-beforeEnter" class="headerlink" title="(4) 路由独享守卫(beforeEnter)"></a>(4) 路由独享守卫(beforeEnter)</h3><p><strong>触发时机</strong>：在指定的路由要跳进去的时候调用<br>路由独享守卫(beforeEnter)的作用与全局前置守卫一致，只是作用域不同，路由独享守卫(beforeEnter)是对单个路由进行操作，全局前置守卫是在全局进行操作。<br>beforeEnter函数的参数：to、from、next<br>可以直接在路由配置上定义 <code>beforeEnter</code> 守卫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">        <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// reject the navigation</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="5-组件内的守卫"><a href="#5-组件内的守卫" class="headerlink" title="(5) 组件内的守卫"></a>(5) 组件内的守卫</h3><p><strong>可用的配置 API</strong></p><ul><li><code>beforeRouteEnter</code>：路由进入前调用(先请求数据在跳转)：解决网速慢时切换页面白屏问题</li><li><code>beforeRouteUpdate</code>：当路由参数更新（比如猜你喜欢）</li><li><code>beforeRouteLeave</code>：路由离开时调用（阻止跳转）</li></ul><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><p>有时，你可能希望将任意信息附加到路由上，如过渡名称、谁可以访问路由等。这些事情可以通过接收属性对象的<code>meta</code>属性来实现，并且它可以在路由地址和导航守卫上都被访问到。定义路由的时候你可以这样配置 <code>meta</code> 字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PostsLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">PostsNew</span>,</span><br><span class="line">        <span class="comment">// 只有经过身份验证的用户才能创建帖子</span></span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">PostsDetail</span></span><br><span class="line">        <span class="comment">// 任何人都可以阅读文章</span></span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">false</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：</p><ol><li>有些页面进入时需要先判断是否登录了，如果登录了才能进入。（此时就可以利用元信息中的属性的属性值的布尔状态来判断是否登录）</li><li>路由切换时更换页面标题<br><strong>路由鉴权</strong>：判断有没有权限来判断你是否可以进入该路由页面</li></ol><h2 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h2><p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。<br><strong>注意: 这个功能只在支持 history.pushState 的浏览器中可用。</strong><br>当创建一个 Router 实例，你可以提供一个 <code>scrollBehavior</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [...],</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="comment">// return 期望滚动到哪个的位置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第三个参数 <code>savedPosition</code>，只有当这是一个 <code>popstate</code> 导航时才可用（由浏览器的后退&#x2F;前进按钮触发）。<br>该函数可以返回一个 <code>ScrollToOptions</code> 位置对象:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// 始终滚动到顶部</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">top</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果返回一个 falsy 的值，或者是一个空对象，那么不会发生滚动。<br>返回 <code>savedPosition</code>，在按下 后退&#x2F;前进 按钮时，就会像浏览器的原生表现那样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">        <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">top</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。<br>也就是说可以用<strong>动态导入代替静态导入</strong>，在需要该路由的时候在进行相应的加载，而不是在应用创建时全部加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将</span></span><br><span class="line"><span class="comment">// import UserDetails from &#x27;./views/UserDetails.vue&#x27;</span></span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span> &#125;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue Router 是 Vue.js 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。功能包括：嵌套路由映射动态路由选择模块化、基于组件的路由配置路由参数、查询、通配符展示由 Vue.js 的过渡系统提供的过渡效果细致的导航控制自动激活 CSS 类的链接HTML5 history 模式或 hash 模式可定制的滚动行为URL 的正确编码</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 基础知识</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Vue/Vue2%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Vue/Vue2%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-12-03T14:45:00.000Z</published>
    <updated>2023-12-03T15:05:25.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建一个Vue应用"><a href="#创建一个Vue应用" class="headerlink" title="创建一个Vue应用"></a>创建一个Vue应用</h2><h3 id="创建应用实例"><a href="#创建应用实例" class="headerlink" title="创建应用实例"></a>创建应用实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.从vue中引入createApp</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 2.创建应用实例App</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="comment">/* 根组件选项 */</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><h3 id="挂载应用"><a href="#挂载应用" class="headerlink" title="挂载应用"></a>挂载应用</h3><p>应用实例必须在调用了 <code>.mount()</code> 方法后才会渲染出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">// 挂载app应用</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。<br><strong>优势：有响应式，减少DOM操作</strong></p><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即<strong>双大括号</strong>)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;<span class="title class_">Message</span>: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="v-if、v-else、v-else-if"><a href="#v-if、v-else、v-else-if" class="headerlink" title="v-if、v-else、v-else-if"></a>v-if、v-else、v-else-if</h4><p>格式：<code>v-if=</code>、<code>v-else-if=</code>、<code>v-else</code></p><ul><li>v-if 指令后面添加变量或表达式来判断元素是否显示</li><li>v-else-if 指令必须和 v-if 相邻</li><li>v-else 指令必须和 v-if 相邻</li></ul><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><blockquote><p>v-show 的语法和作用和 v-if 几乎相同，都是用来控制元素显示和隐藏的，但是它不能和 v-else 以及 v-else 配合使用，也不能用在 template 上</p></blockquote><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><blockquote><p>循环渲染</p></blockquote><p><strong>格式</strong>：<code>v-for=</code></p><ul><li>v-for 可以遍历数组和对象（里面 in 和 of 可以换着用）</li><li>遍历数组时参数：（item,index）item 可以是解构</li><li>遍历对象时参数：（value,key,index）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">items</span>: [&#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; item.<span class="property">message</span> &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><h4 id="v-if与v-for一起使用的问题（面试题）"><a href="#v-if与v-for一起使用的问题（面试题）" class="headerlink" title="v-if与v-for一起使用的问题（面试题）"></a>v-if与v-for一起使用的问题（面试题）</h4><blockquote><p><strong>vue2 中 v-for 的优先级更高</strong> <strong>vue3 中 v-if 的优先级更高</strong></p></blockquote><p>当 v-if 和 v-for 使用在同一个标签中时：</p><ul><li><strong>vue2</strong> 中：当需要一开始就隐藏时，先通过 v-for 进行循环渲染后在去隐藏，会导致性能的浪费。</li><li><strong>vue3</strong> 中：v-if的优先级更高，所以当判断的条件和 item 有关的时候，会找不到item变量，就会报错<br><strong>Vue2和Vue3的共同解决方式</strong>：</li><li>当判断的条件和 item 有关的时候，先通过获取数据，在计算属性中过滤，在遍历计算属性过滤后的结果</li><li>当判断的条件和 item 无关的时候，可以将 v-if 放入当前标签的外层标签，在必要的时候添加 template 标签</li></ul><h4 id="v-if与v-show的区别（面试题）"><a href="#v-if与v-show的区别（面试题）" class="headerlink" title="v-if与v-show的区别（面试题）"></a>v-if与v-show的区别（面试题）</h4><ul><li>v-if 指令会动态地创建或移除 DOM 元素，从而控制元素在页面上的渲染与不渲染；</li><li>v-show&#x3D; 指令会动态为元素添加或移除 <code>style=&quot;display: none;&quot;</code> 样式，从而控制元素的显示与隐藏；<br><strong>两个的使用场景</strong></li><li>如果频繁切换，使用 v-show</li><li>如果初始状态是隐藏，并且切换频率不高，使用 v-if<br><strong>注</strong>：总的来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 v-show 较好；如果在运行时绑定条件很少改变，则 v-if 会更合适。</li></ul><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><blockquote><p>给属性添加变量或者表达式</p></blockquote><p>缩写：英文的 <code>:</code><br>格式：v-bind: 或 v-bind&#x3D;</p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><blockquote><p>给 input 等表单控件做数据双向绑定的</p></blockquote><p>格式：<code>v-model=</code><br>使用范围：</p><ul><li>普通文本框、多行文本框</li><li><strong>复选框、单选框</strong>：必须value、每个选项都要绑定同一个变量</li><li><strong>下拉框</strong>：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selectValue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>&gt;</span>请选择：<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;C&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;D&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><blockquote><p>将 html 字符串转成标签（可以解析html标签）</p></blockquote><p>格式：<code>v-html=</code></p><blockquote><p>安全警告</p><p>在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 漏洞</a>。请仅在内容安全可信时再使用 <code>v-html</code>，并且<strong>永远不要</strong>使用用户提供的 HTML 内容。</p></blockquote><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><blockquote><p>添加事件</p></blockquote><p>简写：@<br><strong>格式</strong>：<code>v-on:submit.prevent=&quot;onSubmit&quot;</code> <strong>参数</strong>：</p><ul><li>v-on:指令名称</li><li>submit:(事件类型)</li><li>.prevent:修饰符</li><li>.onSubmit:对应的值（一般为函数）<br><strong>在事件处理函数后面的()可加可不加</strong></li><li>加的时候可以用来传递参数</li><li>默认情况下，加了 () 就不能得到 event 事件对象</li><li>如果既要传递参数，又要拿到 event事件对象，可以主动传入$event<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@click=<span class="string">&quot;事件处理函数名(参数,$event)&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li>.stop：阻止冒泡</li><li>.prevent：阻止默认行为</li><li>.self：只有在 event.target 是当前元素自身时触发事件处理函数</li><li>.capture：以捕获模式触发当前的事件处理函数</li><li>.once：绑定的事件只触发 1 次</li><li>.passive：修饰符一般用于触摸事件的监听器，可以用来改善移动端设备的滚屏性能</li></ul><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul><li>.enter ： 捕获 enter 键</li></ul><h3 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h3><table><thead><tr><th>v-model修饰符</th><th>作用</th></tr></thead><tbody><tr><td>lazy修饰符</td><td>将input事件换成了change事件</td></tr><tr><td>number修饰符</td><td>使用parseFloat将字符串转成数字</td></tr><tr><td>trim修饰符</td><td>用于去掉<strong>首尾空格</strong></td></tr></tbody></table><ul><li>onchange：内容改变并且失去焦点</li><li>oninput：内容改变<br><strong>注</strong>：v-model中使用number修饰符的原理是：使用parseFloat将字符串转成数字，但是它只针对在原有的数据后面加内容有效，一旦是在原有内容的前面添加内容就无法起到排除非数字的作用</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><blockquote><p>响应式数据</p></blockquote><p><strong>格式</strong>：<code>data:function()&#123;&#125;</code>，简写：<code>data()&#123;&#125;</code></p><ul><li>当有一个变量后面要用的时候，应该一开始就给他一个初始值</li><li>并且自己定义的变量<strong>要避免使用$或者_</strong></li></ul><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><blockquote><p>函数</p></blockquote><p><strong>格式</strong>：<code>methods: &#123;&#125;</code></p><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><blockquote><p>计算属性：根据现有的 data 等，计算或过滤出一个我们想要的结果</p></blockquote><p><strong>格式</strong>：<code>computed: &#123;&#125;</code></p><ul><li>计算属性看似写的是函数，实际上就是这个<strong>函数的返回值</strong></li><li>计算属性是有缓存的，下一次调用的时候就可以直接使用这个结果</li><li>计算属性的值要依赖于响应式数据（可以同时依赖多个响应式数据）</li><li>只要依赖的响应式数据发送改变，那么计算属性就会重新求值<br><strong>注</strong>：</li><li>计算属性不能出现异步，必须要立即 return</li><li>计算属性是不能被主动修改的（只读），修改计算属性唯一的方式就是修改它的响应式依赖（被动的）<br><strong>计算属性和 methods 的使用场景</strong>：</li><li>事件处理函数一般使用 methods，其他可以优先考虑计算属性</li><li>Date.now()没有响应式数据</li></ul><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>作用：用来对数据进行监听，只要数据改变了，就会触发相应数据变量名的函数</p><ul><li>相应的函数可以接受<strong>两个参数</strong>，分别是<code>改变后的值</code>和<code>改变前的值</code></li><li><code>watch</code> 选项也支持把键设置成用 <code>.</code> 分隔的路径：使用时用 “”</li><li>函数里面<strong>允许使用异步(常见的有定时器、数据请求)和DOM操作</strong><br><strong>深度监听</strong><br>默认情况下无法做深度监听<br><code>watch</code> 默认是浅层的：被侦听的属性，仅在被赋新值时，才会触发回调函数——而嵌套属性的变化不会触发。如果想侦听所有嵌套的变更，需要深层侦听器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="attr">someObject</span>: &#123;</span><br><span class="line">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">           <span class="comment">// 注意：在嵌套的变更中，</span></span><br><span class="line">           <span class="comment">// 只要没有替换对象本身，</span></span><br><span class="line">           <span class="comment">// 那么这里的 `newValue` 和 `oldValue` 相同</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 深度监听</span></span><br><span class="line">            <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 强制立即执行回调</span></span><br><span class="line">            <span class="comment">// 进入页面先做一次</span></span><br><span class="line">            <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// handler函数就会在渲染页面完成以后在触发</span></span><br><span class="line">            <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>谨慎使用</strong>：<br>深度侦听需要遍历被侦听对象中的所有嵌套的属性，当用于大型数据结构时，开销很大。因此请只在必要时才使用它，并且要留意性能。<br><strong>Vue3新增的方法 <code>$watch</code></strong><br>作用：让我们可以开启和结束监听<br><strong>计算属性vs侦听器</strong></li><li>很多情况下，可能计算属性和侦听属性都能用绑定</li><li><strong>优先选择计算属性</strong>（计算属性缓存，计算属性允许同时依赖多个响应式数据更方便）</li><li>只有当出现<strong>异步</strong>的时候，只能选择侦听器</li></ul><h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><blockquote><p>注册局部子组件</p></blockquote><p>格式：<code>componrnts:&#123;&#125;</code></p><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><blockquote><p>组件的模板</p></blockquote><p>格式：<code>template : ``(字符串)</code></p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>格式：props:[]或{}<br><strong>作用</strong>：在子组件中接收来自父组件的数据（自定义属性名）<br><strong>注意</strong>：</p><ol><li>可以把数组的语法变成对象的语法：<blockquote><p>可以帮助我们做数据类型的检查</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组格式：</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&quot;count&quot;</span>,<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;bool&quot;</span>]</span><br><span class="line"><span class="comment">// 对象格式：</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">userName</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">bool</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>自定义属性的名字比较长，建议传的时候用连字符，接收的时候用小驼峰<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传的时候用连字符</span></span><br><span class="line"><span class="comment">// eg:  user-name=&quot;zs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收的时候用小驼峰</span></span><br><span class="line"><span class="comment">// userName: String,</span></span><br><span class="line"><span class="comment">// &lt;p&gt;name: &#123;&#123; userName &#125;&#125;&lt;/p&gt; </span></span><br></pre></td></tr></table></figure></li><li>如果要传递的值不是字符串，是对象、数组、布尔值等时可以在自定义属性前面添加 : 或v-bind （添加后””里面就会被看作是js表达式或变量）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:  :count = &quot;5&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><blockquote><p>数据流向只能<strong>从父组件流入到子组件</strong>，通过props只要修改父组件的值，子组件的props会<strong>同步更新</strong>在<strong>子组件不能去修改</strong>props的值</p></blockquote><ul><li>单向数据流的维度是<strong>组件和组件之间</strong>的单向数据流传递</li><li>双向数据绑定的维度是<strong>组件内部之间</strong>的双向数据流（双向数据绑定是通过v-model将组件中的变量和input里面的内容进行绑定）<br><strong>注</strong>：可以通过在父组件中的子组件中标签上新增一个自定义事件，它是通过在子组件中利用this.$emit()触发父组件中的事件方法来进行数据的传递。<br><strong>如果一定要改变props的值</strong>：可以将props的值作为data的初始值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>单向数据流2 - &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:count</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="title class_">Number</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">count</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div&gt;child子组件 - &#123;&#123; num &#125;&#125; - &lt;button @click=&quot;fn&quot;&gt;btn&lt;/button&gt; - &#123;&#123; abc &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">num</span>++;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="props的校验"><a href="#props的校验" class="headerlink" title="props的校验"></a>props的校验</h4><blockquote><p>用于校验props的数据类型</p></blockquote><ul><li><code>required: true</code> 表示必须传值</li><li><code>type: [String, Number]</code>：允许通过 [ ] 传递多种数据类型的值</li><li><code>default: 默认值</code>：表示props的默认值</li><li><code>validator(val) &#123; return [&quot;男&quot;, &quot;女&quot;].includes(val); &#125;</code>：自定义类型校验函数<blockquote><p>通过这个函数返回的 true 或者 false，来判断传入的内容是否符合要求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="comment">// name: String,</span></span><br><span class="line">    <span class="comment">// 等价于</span></span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// required: true 表示必须传值</span></span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 允许通过数组形式传递多种数据类型的值</span></span><br><span class="line">    <span class="attr">height</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// default表示props的默认值</span></span><br><span class="line">    <span class="attr">weight</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="number">200</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义的校验规则</span></span><br><span class="line">    <span class="attr">sex</span>: &#123;</span><br><span class="line">        <span class="comment">// type: String,</span></span><br><span class="line">        <span class="title function_">validator</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过这个函数返回的true或者false，来判断传入的内容是否符合要求</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>].<span class="title function_">includes</span>(val);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>props中允许写的所有数据类型</strong>：</li><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul><h2 id="绑定-1"><a href="#绑定-1" class="headerlink" title="绑定"></a>绑定</h2><h3 id="class-绑定"><a href="#class-绑定" class="headerlink" title="class 绑定"></a>class 绑定</h3><ul><li>Vue 允许我们在 <code>:class</code> 里面直接写对象</li><li>如果类名出现了连字符或者下划线，需要给类名添加引号</li><li>key 表示类名，value 表示变量或者表达式<br><strong>注</strong>：<code>:class</code> 可以和 <code>class</code> 一起连用，并且如果两者书写了不同的类名中存在同样的样式，写在后面的覆盖前面的</li></ul><h3 id="行内样式style-绑定"><a href="#行内样式style-绑定" class="headerlink" title="行内样式style 绑定"></a>行内样式style 绑定</h3><ul><li>style 也是做了特殊增强，允许使用对象的语法 <code>:style=&quot;&#123;&#125;&quot;</code></li><li>如果属性名出现了连字符或者下划线，需要给类名加引号或转成小驼峰</li><li>key 表示 css 属性，value表示变量或表达式<br><strong>注</strong>：<code>:style</code> 可以和 <code>style</code> 一起连用，并且如果两者书写了同样的样式，写在后面的覆盖前面的</li></ul><h2 id="key-管理状态"><a href="#key-管理状态" class="headerlink" title="key 管理状态"></a>key 管理状态</h2><p>为了给 Vue 一个提示，以便它可以跟踪每个节点的标识，从而重用和重新排序现有的元素，你需要为每个元素对应的块提供一个唯一的 <code>key</code> 属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标准的写法：<strong>只要写循环就必须加上 key 属性</strong><br>key 属性的作用：比对改变前后的 dom 树</p><ul><li>优先比较 key，如果 key 相同，不会对元素销毁和重新创建，可以直接复用，提高性能</li><li>key 是不能重复的（同一循环里面的 key 不能重复），key 只能是基本数据类型</li><li>key 不推荐使用 index，可能会导致没法复用</li></ul><h2 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h2><h3 id="DOM-更新时机​"><a href="#DOM-更新时机​" class="headerlink" title="DOM 更新时机​"></a>DOM 更新时机<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#dom-update-timing">​</a></h3><p>当你更改响应式状态后，DOM 会自动更新。然而，你得注意 DOM 的更新并不是同步的。相反，Vue 将缓冲它们直到更新周期的 “下个时机” 以确保无论你进行了多少次状态更改，每个组件都只更新一次。<br>若要等待一个状态改变后的 DOM 更新完成，你可以使用 <a href="https://cn.vuejs.org/api/general.html#nexttick">nextTick()</a> 这个全局 API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">      <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 访问更新后的 DOM</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick()"></a>nextTick()</h3><blockquote><p>它表示的是下一次事件轮询的时候再调用，等待页面渲染结束以后再调用</p></blockquote><p>在 vue 改变数据的时候，数据的改变和页面的渲染不是一起发生的(异步) &#x3D;&#x3D;&gt; 为了减少 DOM 的操作次数</p><h2 id="模板引用-ref"><a href="#模板引用-ref" class="headerlink" title="模板引用 ref"></a>模板引用 ref</h2><p>用ref属性，结合 <code>this.$refs.xxx</code> 的方式获取dom节点<br><strong>注</strong>：this.$refs.xxx的方式获取dom节点的时候<strong>要注意DOM是否已经在页面渲染了</strong>（beforeMount和mounted之间）</p><ul><li>ref 加在元素上面，可以用于获取dom节点</li><li>ref 加在组件上面，可以用来获取子组件的实例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;我是子组件&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Child</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">child</span>.<span class="title function_">add</span>(); <span class="comment">// </span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(this.$refs.child.count); // 10</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>官方生命周期视图：<br><img src="https://v2.cn.vuejs.org/images/lifecycle.png" class="lazyload placeholder" data-srcset="https://v2.cn.vuejs.org/images/lifecycle.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="_resources/Vue生命周期钩子.png"></p><p>生命周期钩子本身也是选项，写在和data并列的位置</p><h3 id="1-创建阶段"><a href="#1-创建阶段" class="headerlink" title="(1) 创建阶段"></a>(1) 创建阶段</h3><h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate(){}"></a>beforeCreate(){}</h4><blockquote><p>在beforeCreate的时候，是不能拿到data的数据以及methods的方法等</p></blockquote><p>一般认为不要在beforeCreate里面做数据请求<br><strong>问题</strong>：如果强行在beforeCreate中做数据请求可以吗？<br>答：可以，因为数据请求是异步操作，它会等待其他选项api执行完才请求数据完成。<br>beforeCreate(){}和created(){}中间会去初始化选项api</p><h4 id="created"><a href="#created" class="headerlink" title="created(){}"></a>created(){}</h4><blockquote><p>已经可以拿到data中的数据了，所以这里可以做数据请求</p></blockquote><h3 id="2-挂载阶段"><a href="#2-挂载阶段" class="headerlink" title="(2) 挂载阶段"></a>(2) 挂载阶段</h3><p>挂载前后，vue自己去初始化创建和插入dom节点</p><h4 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount(){}"></a>beforeMount(){}</h4><blockquote><p>在beforeMount的时候，页面还没有渲染</p></blockquote><p>初始化创建和插入dom节点</p><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted(){}"></a>mounted(){}</h4><blockquote><p>在mounted的时候，页面渲染结束</p></blockquote><h3 id="3-更新阶段"><a href="#3-更新阶段" class="headerlink" title="(3) 更新阶段"></a>(3) 更新阶段</h3><p>只要data的数据发生改变，这两个函数就会执行</p><h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate(){}"></a>beforeUpdate(){}</h4><blockquote><p>修改的数据还没有重新渲染到页面</p></blockquote><p>修改的数据开始重新渲染到页面</p><h4 id="updated"><a href="#updated" class="headerlink" title="updated(){}"></a>updated(){}</h4><blockquote><p>修改的数据已经重新渲染到页面</p></blockquote><p><strong>注</strong>：<strong>不能在updated里面修改数据，会造成死循环</strong></p><blockquote><p>因为在updated里面修改数据会在updated、mounted、beforeUpdate构成的圈中进行死循环</p></blockquote><h3 id="4-卸载阶段"><a href="#4-卸载阶段" class="headerlink" title="(4) 卸载阶段"></a>(4) 卸载阶段</h3><h4 id="beforeUnmount"><a href="#beforeUnmount" class="headerlink" title="beforeUnmount(){}"></a>beforeUnmount(){}</h4><p>在卸载前需要将一些无法通过unmounted卸载的东西关闭：</p><ul><li>如果页面存在定时器，需要在销毁的时候将定时器清掉</li><li>Websocket长连接，后端可以向前端推送内容,断开长连接</li><li>addEventListener原生的js事件监听，removeEventListener</li><li>eCharts或者地图等第三方插件的时候，卸载实例以释放内存</li></ul><h4 id="unmounted"><a href="#unmounted" class="headerlink" title="unmounted(){}"></a>unmounted(){}</h4><blockquote><p>unmounted中一般不在操作</p></blockquote><p><strong>注</strong>：</p><ul><li>创建阶段和挂载阶段的生命周期是会自动调用的</li><li>生命周期的执行顺序跟书写顺序无关，只和各阶段名字有关</li><li>数据请求可以在created、beforeMount、mounted里面调用</li></ul><h3 id="生命周期的各个阶段"><a href="#生命周期的各个阶段" class="headerlink" title="生命周期的各个阶段"></a>生命周期的各个阶段</h3><p>在vue实例的整个生命周期的各个阶段，会提供不同的钩子函数以供我们进行不同的操作。先列出vue官网上对各个钩子函数的详细解析。</p><table><thead><tr><th>生命周期钩子</th><th>详细</th></tr></thead><tbody><tr><td>beforeCreate</td><td>在实例初始化之后，数据观测(data observer) 和 event&#x2F;watcher 事件配置之前被调用。</td></tr><tr><td>created</td><td>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch&#x2F;event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用：相关的 render 函数首次被调用。</td></tr><tr><td>mounted</td><td>el 被新创建的 vm.el替换，并挂载到实例上去之后调用该钩子。如果root实例挂载了一个文档内元素，当mounted被调用时vm.el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.el替换，并挂载到实例上去之后调用该钩子。如果root实例挂载了一个文档内元素，当mounted被调用时vm.el 也在文档内。</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</td></tr><tr><td>activated</td><td>keep-alive 组件激活时调用。</td></tr><tr><td>deactivated</td><td>keep-alive 组件停用时调用。</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。</td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</td></tr></tbody></table><h2 id="插槽（内容分发）"><a href="#插槽（内容分发）" class="headerlink" title="插槽（内容分发）"></a>插槽（内容分发）</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p><strong>为什么要使用插槽？</strong><br>因为在小的子组件使用template时它相当于outerHTML直接替代整个子组件标签，此时我们需要保留子组件标签内的内容的时候就需要使用到插槽。 <strong>简单理解：就是在子组件中使用标签接收父组件中子组件标签上的内容</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;&lt;slot&gt;111&lt;/slot&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 直接替代整个子组件标签 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span>111<span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>作用</strong>：不仅可以传入js变量，还可以插入标签甚至组件。(和父传子的自定义属性功能非常接近)<br><strong>注意</strong>：谁的template里面就用谁的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Child&gt;&#123;&#123; count &#125;&#125;&lt;/Child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 这里的count是父组件中，但是组件的标签可以使用，此时就起到了父传子的效果 --&gt;</span><br></pre></td></tr></table></figure><p>格式：<code>&lt;slot&gt;&lt;/slot&gt;</code><br><strong>注</strong>：数据变量在谁的 template 里面就用谁的变量</p><h3 id="2-插槽默认值"><a href="#2-插槽默认值" class="headerlink" title="2. 插槽默认值"></a>2. 插槽默认值</h3><p><code>&lt;slot&gt;</code> 标签中间可以写内容，就会作为插槽的默认值（当子组件在父组件中使用中，子组件标签没有书写内容时使用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;&lt;slot&gt;111&lt;/slot&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时页面显示：111</span></span><br></pre></td></tr></table></figure><h3 id="3-具名插槽"><a href="#3-具名插槽" class="headerlink" title="3. 具名插槽"></a>3. 具名插槽</h3><p><strong>解决需求</strong>：调用子组件的时候，传入多个元素或者组件，要在子组件的不同位置渲染<br><strong>使用：</strong>在父组件中子组件内的不同标签上添加v-slot指令，子组件中利用标签接收时，添加对应的name属性的属性值<br><strong>注</strong>：必要时给要插入的内容<strong>外部包上template标签</strong>，并在标签中加上v-slot指令（v-slot可以缩写成 # ）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            v-slot可以缩写成 # ;</span></span><br><span class="line"><span class="comment">            需要给要插入的内容 外部包上template标签</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:be</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">af</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const &#123; createApp &#125; = Vue;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const Child = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 给每一个slot标签加上name属性 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;af&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>我是子组件<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;be&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    createApp(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            Child</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;).mount(&quot;#app&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-动态插槽名（了解）"><a href="#4-动态插槽名（了解）" class="headerlink" title="4. 动态插槽名（了解）"></a>4. 动态插槽名（了解）</h3><p>插入的内容在子组件里面的位置进行动态变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 标签的属性名和属性值都可以通过变量的形式进行动态的改变 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:</span>[<span class="attr">sti</span>]=<span class="string">&quot;str&quot;</span>&gt;</span>动态插槽名<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通过类似于对象的语法使用变量来进行插槽名动态改变 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #[<span class="attr">trends</span>]&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>拼接<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;&lt;slot name=&quot;be&quot;&gt;&lt;/slot&gt;我是子组件&lt;slot name=&quot;af&quot;&gt;&lt;/slot&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">trends</span>: <span class="string">&#x27;be&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">sti</span>: <span class="string">&#x27;title&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">str</span>: <span class="string">&#x27;home&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-作用域插槽（了解）"><a href="#5-作用域插槽（了解）" class="headerlink" title="5. 作用域插槽（了解）"></a>5. 作用域插槽（了解）</h3><p>作用域插槽的<strong>作用</strong>：让父组件插入的内容可以访问子组件的作用域<br><strong>使用作用域插槽</strong>：首先可以在slot标签上面添加自定义属性，然后给父组件的子组件标签上添加 <code>v-slot=&quot;slotProps&quot;</code>，slotProps是一个对象，变量就在这个对象下面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> #=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slotProps.count&#125;&#125; - &#123;&#123;slotProps.age&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 或者使用结构赋值的方式 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;child #=&quot;&#123;count,age&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;span&gt;&#123;&#123;count&#125;&#125; - &#123;&#123;age&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">        &lt;/child&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;我是子组件 - &lt;slot :count=&#x27;count&#x27; :age=&quot;age&quot;&gt;&lt;/slot&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Child</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>每个组件之间的数据和方法等等都是不共用的</p><h3 id="1-template"><a href="#1-template" class="headerlink" title="1. template"></a>1. template</h3><blockquote><p>template 是 vue 提供的标签，自带的组件，它是组件的模板</p></blockquote><p><strong>注</strong>：template 相当用于占位的空标签（可以充当一个大盒子但是不会在页面渲染）</p><h3 id="2-全局创建组件"><a href="#2-全局创建组件" class="headerlink" title="2. 全局创建组件"></a>2. 全局创建组件</h3><p>全局组件和根组件在同一层级<br>里面要传入两个参数，第一个是组件名称，第二个参数是个对象，之前的所有选项都可以放进来，<strong>必须要有一个template选项</strong><br>template选项写的是组件的模板（html片段）<br><strong>组件的取名规则</strong>：</p><ul><li><strong>见名知义</strong>，不能使用原生标签</li><li>既不能使用现有标签，也不能使用以后的标签</li><li>最好在加上至少一个连字符，或者使用大驼峰</li><li>但是使用的时候，只能<strong>使用连字符</strong>。（如起名时：<code>ListsHeader</code>，使用的时候：<code>lists-header</code>）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用全局组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">news-header</span>&gt;</span><span class="tag">&lt;/<span class="name">news-header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;NewsHeader&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;header&gt;头部&lt;/header&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-局部创建组件"><a href="#3-局部创建组件" class="headerlink" title="3. 局部创建组件"></a>3. 局部创建组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span><br><span class="line"><span class="comment">// 1.创建局部组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NewHeader</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;header&gt;头部&lt;/header&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NewContent</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;main&gt;内容&lt;/main&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NewFooter</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;footer&gt;底部&lt;/footer&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 2.注册局部组件（注意这里是compnents别忘了s）</span></span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="title class_">NewHeader</span>,</span><br><span class="line">        <span class="title class_">NewFooter</span>,</span><br><span class="line">        <span class="title class_">NewContent</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>注</strong>：使用局部创建组件时要在根组件注册创建的局部组件。</p><h3 id="4-组件中的通信"><a href="#4-组件中的通信" class="headerlink" title="4. 组件中的通信"></a>4. 组件中的通信</h3><h4 id="4-1-父传子"><a href="#4-1-父传子" class="headerlink" title="4.1 父传子"></a>4.1 父传子</h4><p><strong>原理</strong>：在父组件中的子组件标签上添加一个<strong>自定义属性</strong>，将要传递的数据当作属性值传入，在子组件里面通过使用<strong>props选项</strong>进行接收<br><strong>注</strong>：</p><ul><li>父组件data选项中要传递的<strong>数据变量名</strong>与<strong>自定义属性值</strong>相同</li><li>子组件props选项中的<strong>变量名</strong>与<strong>自定义属性名</strong>相同<br>事例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    - 我是父组件 -</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">son</span> <span class="attr">:name</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Son</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&quot;name&quot;</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;h1&gt;我是子组件,&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;我是父组件中的数据&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="title class_">Son</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2-子传父"><a href="#4-2-子传父" class="headerlink" title="4.2 子传父"></a>4.2 子传父</h4><p><strong>原理</strong>：在父组件的子组件标签上添加<strong>自定义事件</strong>，在子组件里面通过**this.$emit(“xxx”，…)**调用父组件中的事件<br>this.$emit()的两个参数:</p><ul><li>第一个参数：绑定的事件名</li><li>第二个参数：传递的数据变量名<br>事例：<br>父组件通过创建自定义事件绑定的函数里面的参数进行数据接收<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    - 我是父组件 - &#123;&#123;fatherValue&#125;&#125;</span><br><span class="line">        &lt;son @mit=<span class="string">&quot;fn&quot;</span>&gt;&lt;/son&gt;</span><br><span class="line">&lt;/div&gt;   </span><br><span class="line">&lt;!-- 分割线 --&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Son</span> = &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">sonValue</span>: <span class="string">&#x27;我是子组件中的数据&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;h1&gt;我是子组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&#x27;handleClick&#x27;&gt;向父组件传值&lt;/button&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;mit&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sonValue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// mounted() &#123;</span></span><br><span class="line">    <span class="comment">//     this.$emit(&quot;mit&quot;, this.sonValue);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">fatherValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fatherValue</span> = n</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="title class_">Son</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>动态组件（component）必须使用：is属性 is属性要写字符串，组件名称的字符串 在使用动态组件的时候，显示和隐藏组件的时候，会去加载和销毁组件<br><code>keep-alive</code>标签表示缓存组件</p><blockquote><p>当组件切走的时候，不会销毁和重新创建</p></blockquote><p><strong>新增的两个生命周期</strong></p><ol><li><p>activated(){}</p><blockquote><p>activated ：在缓存组件被激活时调用</p></blockquote></li><li><p>deactivated(){}</p><blockquote><p>deactivated ：在缓存组件被失活时调用</p></blockquote></li></ol><p><strong>注</strong>：这两个生命周期必须在<code>&lt;keep-alive&gt;</code>之后，才能生效<br><strong>应用场景</strong>：在路由进行Tabar二三级路由切换时，等在切换回来时从切换前状态（浏览位置，定时器停留位置，开始）<br><strong>小实例：点击不同的按钮切换组件</strong><br>以前做法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;show = &#x27;1&#x27;&quot;&gt;Child1&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;show = &#x27;2&#x27;&quot;&gt;Child2&lt;/button&gt;</span><br><span class="line">&lt;Child1 v-show=&quot;show === 1&quot; /&gt;</span><br><span class="line">&lt;Child2 v-show=&quot;show === 2&quot; /&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: &#x27;1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;子组件1&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;子组件1的内容&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;子组件2&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;子组件2的内容&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>加了动态组件和缓存组件，activated和deactivated生命周期和定时器<br><strong>实现效果</strong>：当进入子组件1时会count会每个一秒加一，并且在切换到子组件2时子组件1的count会停留，等到切换会Child1时重切换到子组件2时停留时的值开始继续每隔一秒count加一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;show = &#x27;child1&#x27;&quot;&gt;Child1&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;show = &#x27;child2&#x27;&quot;&gt;Child2&lt;/button&gt;</span><br><span class="line">&lt;KeepAlive&gt;</span><br><span class="line">  &lt;component :is=&quot;show&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/KeepAlive&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: &#x27;child1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;子组件1&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;子组件1的内容&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">let timer</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    timer = setInterval(() =&gt; &#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;,</span><br><span class="line">  deactivated() &#123;</span><br><span class="line">    clearInterval(timer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;子组件2&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;子组件2的内容&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>不要将 <strong>li元素、tr元素或者option元素</strong>作为组件的根元素</p><h3 id="组件中的事件"><a href="#组件中的事件" class="headerlink" title="组件中的事件"></a>组件中的事件</h3><p>组件可以显式地通过 emits 选项来声明它要触发的事件：</p><ul><li>如果emits写成数组的语法，那和不写是没有区别的：<code>emits: [&quot;abc&quot;],</code></li><li>写成对象是用来校验自定义事件的参数是否正确<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="title function_">abc</span>(<span class="params">v</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> type = <span class="keyword">typeof</span> v;</span><br><span class="line">        <span class="keyword">return</span> type === <span class="string">&quot;number&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="透传属性"><a href="#透传属性" class="headerlink" title="透传属性"></a>透传属性</h2><p><strong>官网解释</strong>：“透传 attribute”指的是传递给一个组件，却没有被该组件声明为 <code>props</code> 或 <code>emits</code> 的 attribute 或者 <code>v-on</code> 事件监听器。最常见的例子就是 <code>class</code>、<code>style</code> 和 <code>id</code>。当一个组件以单个元素为根作渲染时，透传的 attribute 会自动被添加到根元素上。<br>当父组件里面有传递自定义属性的时候，并且如果子组件没有使用props接受，那么这个属性就会直接加到<strong>子组件的根元素</strong>上面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eg: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>透传属性<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">name</span>=<span class="string">&quot;zs&quot;</span> <span class="attr">age</span>=<span class="string">&quot;39&quot;</span> <span class="attr">sex</span> =<span class="string">&quot;男&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const &#123; createApp &#125; = Vue;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const Child = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&#x27;name&#x27;, &#x27;age&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"> - </span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    createApp(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            Child</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;).mount(&quot;#app&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 针对上面的事例，此时效果应为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>透传属性<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>zs - 39<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>zs<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运用场景</strong>：大部分作用就是去修改第三方的组件的样式</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>父组件的数据，不管中间有多少层，直接传递给子孙组件<br>依赖注入解释是：给父组件加一个依赖（provide），给子组件加一个注入（inject）</p><h3 id="一-Provide（提供）"><a href="#一-Provide（提供）" class="headerlink" title="(一) Provide（提供）"></a>(一) Provide（提供）</h3><p>要为组件后代提供数据，需要使用到provide</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">provide</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;Hello!!!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们需要提供依赖当前组件实例的状态 (比如那些由 <code>data()</code> 定义的数据属性)，那么可以以函数形式使用 <code>provide</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">              <span class="attr">count</span>: <span class="number">10</span>      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 使用函数的形式，可以访问到 `this`</span></span><br><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            count : <span class="variable language_">this</span>.<span class="property">count</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-应用层-Provide"><a href="#二-应用层-Provide" class="headerlink" title="(二) 应用层 Provide"></a>(二) 应用层 Provide</h3><p>除了在一个组件中提供依赖，我们还可以在整个应用层面提供依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;注入名&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="三-Inject（注入）"><a href="#三-Inject（注入）" class="headerlink" title="(三) Inject（注入）"></a>(三) Inject（注入）</h3><p>要注入上层组件提供的数据，需使用 <code>inject</code> 选项来声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">inject</span>: [<span class="string">&#x27;msg&#x27;</span>],</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入会在组件自身的状态<strong>之前</strong>被解析，因此你可以在 <code>data()</code> 中访问到注入的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;message&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 基于注入值的初始数据</span></span><br><span class="line">      <span class="attr">fullMessage</span>: <span class="variable language_">this</span>.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-注入别名和默认值"><a href="#四-注入别名和默认值" class="headerlink" title="(四) 注入别名和默认值"></a>(四) 注入别名和默认值</h3><p>如果想要将注入的注入名进行修改，可以将 inject 写成对象的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">inject</span>:&#123;</span><br><span class="line">        <span class="attr">newMsg</span>:&#123;</span><br><span class="line">            <span class="attr">from</span>: <span class="string">&#x27;msg&#x27;</span>, <span class="comment">// 注入来源名</span></span><br><span class="line">            <span class="attr">default</span>: <span class="string">&#x27;default value&#x27;</span> <span class="comment">// 注入默认值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，选项式API中的依赖注入是没有响应式的。 如果希望有响应式，需要从vue里面引入computed方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 显式提供一个计算属性</span></span><br><span class="line">    <span class="attr">message</span>: <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>computed()</code> 函数常用于组合式 API 风格的组件中，但它同样还可以用于补充选项式 API<br>选项式API中实现响应式会有一个警告，需要在App.vue中使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">unwrapInjectedRef</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>vue2的依赖注入是没有响应式的，所有不推荐使用的</li><li>vue3的依赖注入解决了响应式的问题，推荐使用</li></ul><h3 id="五-使用-Symbol-作注入名"><a href="#五-使用-Symbol-作注入名" class="headerlink" title="(五) 使用 Symbol 作注入名"></a>(五) 使用 Symbol 作注入名</h3><p>至此，我们已经了解了如何使用字符串作为注入名。但如果你正在构建大型的应用，包含非常多的依赖提供，或者你正在编写提供给其他开发者使用的组件库，建议最好使用 Symbol 来作为注入名以避免潜在的冲突。<br>我们通常推荐在一个单独的文件中导出这些注入名 Symbol：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keys.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myInjectionKey = <span class="title class_">Symbol</span>()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在供给方组件中</span></span><br><span class="line"><span class="keyword">import</span> &#123; myInjectionKey &#125; <span class="keyword">from</span> <span class="string">&#x27;./keys.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      [myInjectionKey]: &#123;</span><br><span class="line">        <span class="comment">/* 要提供的数据 */</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入方组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; myInjectionKey &#125; <span class="keyword">from</span> <span class="string">&#x27;./keys.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">injected</span>: &#123; <span class="attr">from</span>: myInjectionKey &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><p>Vue 提供了两个内置组件，可以帮助你制作基于状态变化的<strong>过渡和动画</strong>：Transition和TransitionGroup</p><h3 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h3><p><code>&lt;Transition&gt;</code> 是一个内置组件，这意味着它在任意别的组件中都可以被使用，无需注册。它可以将进入和离开动画应用到通过默认插槽传递给它的元素或组件上。进入或离开可以由以下的条件之一触发：</p><ul><li>由 <code>v-if</code> 所触发的切换</li><li>由 <code>v-show</code> 所触发的切换</li><li>由特殊元素 <code>&lt;component&gt;</code> 切换的动态组件</li></ul><h3 id="TransitionGroup"><a href="#TransitionGroup" class="headerlink" title="TransitionGroup"></a>TransitionGroup</h3><h3 id="KeepAlive"><a href="#KeepAlive" class="headerlink" title="KeepAlive"></a>KeepAlive</h3><p><strong>作用：</strong> 在多个组件间动态切换时缓存被移除的组件实例。</p><h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><p><strong>作用：</strong> 可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;open = true&quot;&gt;Open Modal&lt;/button&gt;</span><br><span class="line">&lt;!-- Teleport:内置组件,通过to属性可以是teleport内置组件中的内容，渲染的时候放到指定的位置 --&gt;</span><br><span class="line">&lt;Teleport to=&quot;body&quot;&gt;</span><br><span class="line">  &lt;div v-if=&quot;open&quot; class=&quot;modal&quot;&gt;</span><br><span class="line">    &lt;p&gt;Hello from the modal!&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;open = false&quot;&gt;Close&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Teleport&gt;</span><br></pre></td></tr></table></figure><h3 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h3><h2 id="Vue2和Vue3的区别点"><a href="#Vue2和Vue3的区别点" class="headerlink" title="Vue2和Vue3的区别点"></a>Vue2和Vue3的区别点</h2><h3 id="一-Vue2-深层响应失效"><a href="#一-Vue2-深层响应失效" class="headerlink" title="(一) Vue2 深层响应失效"></a>(一) Vue2 深层响应失效</h3><p>响应式原理不同：</p><ul><li>vue2：Object.defineProperty</li><li>vue3：proxy<br>有三种情况在 vue2 里面响应式会失效:</li></ul><ol><li>在对象里面挂载新属性</li><li>直接修改数组的长度</li><li>通过索引改变数组项<br>vue3不存在响应式失效<br><strong>解决方法</strong>：</li><li><code>$forceUpdate()</code>：强制将该组件重新渲染</li><li>利用扩展运算符进行浅拷贝（重新创建新地址）、深拷贝</li><li><code>$set()</code></li></ol><h3 id="二-v-if与v-for一起使用的问题"><a href="#二-v-if与v-for一起使用的问题" class="headerlink" title="(二) v-if与v-for一起使用的问题"></a>(二) v-if与v-for一起使用的问题</h3><blockquote><p><strong>vue2 中 v-for 的优先级更高</strong> <strong>vue3 中 v-if 的优先级更高</strong></p></blockquote><p>当 v-if 和 v-for 使用在同一个标签中时：</p><ul><li><strong>vue2</strong> 中：当需要一开始就隐藏时，先通过 v-for 进行循环渲染后在去隐藏，会导致性能的浪费。</li><li><strong>vue3</strong> 中：v-if的优先级更高，所以当判断的条件和 item 有关的时候，会找不到item变量，就会报错<br><strong>Vue2和Vue3的共同解决方式</strong>：</li><li>当判断的条件和 item 有关的时候，先通过获取数据，在计算属性中过滤，在遍历计算属性过滤后的结果</li><li>当判断的条件和 item 无关的时候，可以将 v-if 放入当前标签的外层标签，在必要的时候添加 template 标签</li></ul><h3 id="三-按键修饰符"><a href="#三-按键修饰符" class="headerlink" title="(三) 按键修饰符"></a>(三) 按键修饰符</h3><ul><li>在vue2里面按键修饰符既可以使用 .enter 也可以使用 <strong>按键码</strong>（keyCode）但是最新的浏览器不一定有用（已经被废弃）</li><li>在vue3里面按键修饰符只可以使用 .enter</li></ul><h3 id="四-生命周期销毁阶段的名字"><a href="#四-生命周期销毁阶段的名字" class="headerlink" title="(四) 生命周期销毁阶段的名字"></a>(四) 生命周期销毁阶段的名字</h3><ul><li>vue2的销毁阶段的生命周期名字为<strong>beforeDestory 和 destoryed</strong></li><li>在vue3名字改成了<strong>beforeUnmount 和 unmounted</strong><br>其次在vue2中有一个<code>$destory()</code>（自动销毁的API）</li></ul><h3 id="五-this-watch"><a href="#五-this-watch" class="headerlink" title="(五) this.$watch()"></a>(五) this.$watch()</h3><p>vue3的侦听器添加了this.$watch()方法，可以开启和关闭监听</p><h3 id="六-唯一根元素"><a href="#六-唯一根元素" class="headerlink" title="(六) 唯一根元素"></a>(六) 唯一根元素</h3><blockquote><p>只会在指令的表达式返回真值时才被渲染</p></blockquote><h3 id="条件渲染-1"><a href="#条件渲染-1" class="headerlink" title="条件渲染"></a>条件渲染</h3><ul><li>在vue2中，需要保证每个组件都只有一个唯一的根元素<br>ts和js区别<br>nextTick<br>promise低版本浏览器兼容</li></ul>]]></content>
    
    
    <summary type="html">Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vuex(全局状态管理模式)</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Vue/Vuex(%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F)/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Vue/Vuex(%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F)/</id>
    <published>2023-12-03T14:42:00.000Z</published>
    <updated>2023-12-03T15:05:25.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-概念与场景"><a href="#一-概念与场景" class="headerlink" title="一. 概念与场景"></a>一. 概念与场景</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态。<br><strong>解决场景</strong>：</p><ul><li>多个视图依赖于同一状态。</li><li>来自不同视图的行为需要变更同一状态。<blockquote><p><strong>简单解释就是</strong>：多个组件使用同一组数据，不同的组件修改同一组数据</p></blockquote></li></ul><h2 id="二-安装"><a href="#二-安装" class="headerlink" title="二. 安装"></a>二. 安装</h2><ol><li>可以通过 <code>https://unpkg.com/vuex@4.0.0/dist/vuex.global.js</code> 这样的方式指定特定的版本。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/path/to/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/path/to/vuex.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>npm<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure></li><li>Yarn<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex@next --save</span><br></pre></td></tr></table></figure></li></ol><h2 id="三-使用"><a href="#三-使用" class="headerlink" title="三. 使用"></a>三. 使用</h2><p>Vuex 之后，让我们来创建一个 store。创建过程直截了当——仅需要提供一个初始 state 对象和一些 mutation：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从vuex中引入createStore</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 创建仓库实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="comment">// 仓库的state就是全局的数据，相当于组件的data</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是放函数的，mutations是唯一可以改变state的地方</span></span><br><span class="line">  <span class="comment">// 可以接受state作为参数</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 暴露仓库实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>在main.js入口文件中引入仓库实例并使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store/index.js&quot;</span></span><br><span class="line">app.<span class="title function_">use</span>(store);</span><br></pre></td></tr></table></figure><h2 id="四-核心概念"><a href="#四-核心概念" class="headerlink" title="四. 核心概念"></a>四. 核心概念</h2><p><strong>官方图</strong>：<br><img src="https://vuex.vuejs.org/vuex.png" class="lazyload placeholder" data-srcset="https://vuex.vuejs.org/vuex.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Vuex核心概念"></p><h3 id="一-State"><a href="#一-State" class="headerlink" title="(一) State"></a>(一) State</h3><h4 id="1-概念与使用"><a href="#1-概念与使用" class="headerlink" title="(1) 概念与使用"></a>(1) 概念与使用</h4><p>仓库的state就是全局的数据，相当于组件的data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>仓库的数据不能使用data来接收，会导致响应式失效</strong><br>Vuex 通过 Vue 的插件系统将 store 实例从根组件中“注入”到所有的子组件里。且子组件能通过 <code>this.$store</code> 访问到。<br><strong>仓库的数据必须使用计算属性去获取</strong></p><blockquote><p>在子组件中通过this.store.state.xxx访问store中的数据（this.store为仓库实例）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在子组件中通过this.$store.state.xxx访问store中的数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="comment">// 仓库的数据必须使用计算属性去获取</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-mapState-辅助函数"><a href="#2-mapState-辅助函数" class="headerlink" title="(2) mapState 辅助函数"></a>(2) mapState 辅助函数</h4><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从vuex中引入mapState辅助函数</span></span><br><span class="line"><span class="comment">// 将仓库的state的值映射到组件的计算属性中</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>mapState 的不同写法</strong></p><ol><li>数组写法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组写法</span></span><br><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>])</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">sex</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">sex</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">age</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对象写法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象写法：</span></span><br><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>(&#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;sex&#x27;</span>,</span><br><span class="line">    <span class="comment">// 重命名</span></span><br><span class="line">    <span class="attr">num</span>: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">    <span class="comment">// 函数写法用于做数据的改造（字符串拼接、条件判断等）</span></span><br><span class="line">    <span class="attr">age</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">name</span>,</span><br><span class="line">    <span class="comment">// 如果需要用到this，要把箭头函数转成普通函数</span></span><br><span class="line">    <span class="title function_">like</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">likes</span>.<span class="title function_">concat</span>(<span class="variable language_">this</span>.<span class="property">like</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>利用对象的写法进行拼接<blockquote><p>当我们想要使用store仓库中的数据的同时，组件自身也需要使用计算属性时，也是使用拓展运算符或者使用Object.assign()方法进行对象的的拼接。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">        num: &quot;count&quot;,</span><br><span class="line">        name: (state) =&gt; &quot;我叫&quot; + state.name,</span><br><span class="line">        sex: (state) =&gt; &#123;</span><br><span class="line">            return state.sex === 1 ? &quot;男&quot; : &quot;女&quot;;</span><br><span class="line">        &#125;,</span><br><span class="line">        likes(state) &#123;</span><br><span class="line">            return state.likes.concat(this.like);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    doubleNum() &#123;</span><br><span class="line">        return this.num2 * 2;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="二-Getter"><a href="#二-Getter" class="headerlink" title="(二) Getter"></a>(二) Getter</h3><h4 id="1-概念与使用-1"><a href="#1-概念与使用-1" class="headerlink" title="(1) 概念与使用"></a>(1) 概念与使用</h4><p>getters相当于是<strong>仓库的计算属性</strong><br><strong>应用场景</strong>：如果一个属性需要进行一些操作后被多个组件使用，此时就需要使用getters在仓库中进行操作后在让其他组件使用。<br>其他组件想要使用时，利用<code>this.$store.getters.xxx</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.仓库设置属性</span></span><br><span class="line"><span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">time</span>: <span class="number">1678085277207</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2.在仓库中使用getters对相关属性进行操作</span></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">timeStr</span>(<span class="params">state, getters</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(state.<span class="property">time</span>);</span><br><span class="line">        <span class="keyword">const</span> Y = date.<span class="title function_">getFullYear</span>() + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> M =</span><br><span class="line">              (date.<span class="title function_">getMonth</span>() + <span class="number">1</span> &lt; <span class="number">10</span></span><br><span class="line">               ? <span class="string">&quot;0&quot;</span> + (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span><br><span class="line">               : date.<span class="title function_">getMonth</span>() + <span class="number">1</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> D =</span><br><span class="line">              (date.<span class="title function_">getDate</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date.<span class="title function_">getDate</span>() : date.<span class="title function_">getDate</span>()) + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> h =</span><br><span class="line">              (date.<span class="title function_">getHours</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date.<span class="title function_">getHours</span>() : date.<span class="title function_">getHours</span>()) + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> m =</span><br><span class="line">              (date.<span class="title function_">getMinutes</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date.<span class="title function_">getMinutes</span>() : date.<span class="title function_">getMinutes</span>()) +</span><br><span class="line">              <span class="string">&quot;:&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> s =</span><br><span class="line">              date.<span class="title function_">getSeconds</span>() &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date.<span class="title function_">getSeconds</span>() : date.<span class="title function_">getSeconds</span>();</span><br><span class="line">        <span class="keyword">return</span> Y + M + D + h + m + s;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// 第二个参数依赖于其他的getters</span></span><br><span class="line">    <span class="title function_">timeStr2</span>(<span class="params">state, getters</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> getters.<span class="property">timeStr</span> + <span class="string">&quot;!!!&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="attr">count2</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">n</span>) =&gt;</span> state.<span class="property">count</span> * n,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 3.在组件中获取并使用</span></span><br><span class="line"><span class="title function_">count2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">count2</span>(<span class="number">5</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>count2: &#123;&#123; count2 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>getters可以传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中使用同时，传入参数</span></span><br><span class="line"><span class="title function_">count2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">count</span>(<span class="number">5</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 在store仓库中接收传递的值</span></span><br><span class="line"><span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">n</span>) =&gt;</span>&#123;</span><br><span class="line">        state.<span class="property">count</span> * n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-mapGetters辅助函数"><a href="#2-mapGetters辅助函数" class="headerlink" title="(2) mapGetters辅助函数"></a>(2) mapGetters辅助函数</h4><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中使用辅助函数mapGetters接收来自仓库中的getters计算之后的值</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 数组形式</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;timeStr&#x27;</span>])</span><br><span class="line">    <span class="comment">// 对象形式</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;</span><br><span class="line">      <span class="attr">timeStr</span>: <span class="string">&#x27;timeStr&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;div&gt;<span class="attr">timeStr</span>:&#123;&#123;timeStr&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapGetters</span>(&#123;</span><br><span class="line">    <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">    <span class="attr">doneCount</span>: <span class="string">&#x27;doneTodosCount&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="三-Mutation"><a href="#三-Mutation" class="headerlink" title="(三) Mutation"></a>(三) Mutation</h3><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="(1) 基本使用"></a>(1) 基本使用</h4><p>更改 Vuex 的 store 中的状态的<strong>唯一方法</strong>是提交 mutation 可以接受state作为参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store仓库中</span></span><br><span class="line"><span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        state.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 通过计算属性获取仓库中的count</span></span><br><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>]),</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 通过调用commit方法显示的提交increment</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child3 - &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="2-提交载荷（Payload）"><a href="#2-提交载荷（Payload）" class="headerlink" title="(2) 提交载荷（Payload）"></a>(2) 提交载荷（Payload）</h4><p>可以向 <code>store.commit()</code> 传入额外的参数，即 mutation 的<strong>载荷（payload）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store仓库中</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state,payload</span>) &#123;</span><br><span class="line">        state.<span class="property">count</span> = payload</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 组件中</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>]),</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child3 - &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>add(5)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store仓库中</span></span><br><span class="line"><span class="comment">// 可以接受第二个参数payload(载荷),表示参数</span></span><br><span class="line"><span class="comment">// 一般情况下payload建议写成对象的形式</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state,payload</span>) &#123;</span><br><span class="line">        state.<span class="property">count</span> = payload.<span class="property">num</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 组件中</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>]),</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">num</span>:n</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</span></span><br><span class="line"><span class="comment">// methods: &#123;</span></span><br><span class="line"><span class="comment">//     add(n) &#123;</span></span><br><span class="line"><span class="comment">//         this.$store.commit(&#123;</span></span><br><span class="line"><span class="comment">//             type: &#x27;increment&#x27;, </span></span><br><span class="line"><span class="comment">//             num : n,</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">--&gt;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Child3 - &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>add(5)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>使用常量替代 Mutation 事件类型</strong><br>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个mutation-types.js文件，并向文件中写入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">SOME_MUTATION</span> = <span class="string">&#x27;SOME_MUTATION&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">SOME_MUTATION</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能</span></span><br><span class="line">    <span class="comment">// 来使用一个常量作为函数名</span></span><br><span class="line">    [<span class="variable constant_">SOME_MUTATION</span>] (state) &#123;</span><br><span class="line">      <span class="comment">// 修改 state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用时</span></span><br><span class="line"><span class="comment">// 先引入mutation-types.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">SOME_MUTATION</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@store/mutation-types&#x27;</span></span><br><span class="line"><span class="comment">// 使用时，直接使用SOME_MUTATION常量</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">SOME_MUTATION</span>,</span><br><span class="line">    <span class="attr">num</span>: n,</span><br><span class="line">&#125;)              </span><br></pre></td></tr></table></figure><p><strong>官网文档表示</strong>：用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。<br><strong>mutation 必须是同步函数</strong>*<br>一条重要的原则就是要记住 <strong>mutation 必须是同步函数</strong>。为什么？请参考下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">addage</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            state.<span class="property">age</span>++;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutations必须是一个同步函数</p><ul><li>每一次调用mutation的函数的时候，在开发工具里面都会产生一条记录(快照)</li><li>产生快照的时机是mutation函数调用的时间，而不是数据在改变的时候</li><li>会让开发工具里面的快照的值出错</li></ul><h4 id="3-mapMutations辅助函数"><a href="#3-mapMutations辅助函数" class="headerlink" title="(3) mapMutations辅助函数"></a>(3) mapMutations辅助函数</h4><p>你可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 mutation，或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 数组形式</span></span><br><span class="line">    <span class="comment">// 将仓库的increment函数映射到了组件的methods里面，变成了methods里面有increment函数</span></span><br><span class="line">    <span class="comment">// ...mapMutations([&#x27;increment&#x27;]),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象形式</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;</span><br><span class="line">      <span class="comment">// 重命名</span></span><br><span class="line">      <span class="attr">adds</span>: <span class="string">&#x27;increment&#x27;</span> </span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 此时就可以在组件中直接调用increment函数了</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// this.increment()</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">adds</span>(&#123;<span class="attr">n</span>:<span class="number">4</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-action"><a href="#四-action" class="headerlink" title="(四) action"></a>(四) action</h3><h4 id="1-基本使用-1"><a href="#1-基本使用-1" class="headerlink" title="(1) 基本使用"></a>(1) 基本使用</h4><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;  </span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="comment">// 同步函数</span></span><br><span class="line">        <span class="title function_">syncAddAge</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">age</span> += <span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="comment">// 异步函数</span></span><br><span class="line">        <span class="comment">// 第一个参数：context</span></span><br><span class="line">        <span class="title function_">asyncAddAge</span>(<span class="params">context</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;syncAddAge&#x27;</span>)</span><br><span class="line">            &#125;, <span class="number">2000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 简洁写法（解构）：</span></span><br><span class="line">        <span class="comment">// asyncAddAge(&#123; commit &#125;) &#123;</span></span><br><span class="line">            <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">                <span class="comment">// commit(&#x27;syncAddAge&#x27;)</span></span><br><span class="line">            <span class="comment">// &#125;, 2000)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用：</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">&#x27;age&#x27;</span>]),</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 通过this.$store.dispatch(&#x27;asyncAddAge&#x27;)的方法来调用仓库的actions函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;asyncAddAge&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child4 - age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>asyncAdd<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>第二个参数：payload<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;  </span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="comment">// 同步函数</span></span><br><span class="line">        <span class="title function_">syncAddAge</span>(<span class="params">state,payload</span>) &#123;</span><br><span class="line">            state.<span class="property">age</span> += payload.<span class="property">n</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="comment">// 异步函数</span></span><br><span class="line">        <span class="comment">// 第一个参数：context</span></span><br><span class="line">        <span class="title function_">asyncAddAge</span>(<span class="params">context,payload</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;syncAddAge&#x27;</span>,payload)</span><br><span class="line">            &#125;, <span class="number">2000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 组件中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">&#x27;age&#x27;</span>]),</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 传递第二个参数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;asyncAddAge&#x27;</span>,&#123;<span class="attr">n</span>:<span class="number">4</span>&#125;)</span><br><span class="line">      <span class="comment">// 以对象形式分发</span></span><br><span class="line">      store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asyncAddAge&#x27;</span>,</span><br><span class="line">        <span class="attr">n</span>: <span class="number">4</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-辅助函数-mapActions"><a href="#2-辅助函数-mapActions" class="headerlink" title="(2) 辅助函数 mapActions"></a>(2) 辅助函数 mapActions</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 传递第二个参数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;asyncAddAge&#x27;</span>,&#123;<span class="attr">n</span>:<span class="number">4</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// this.asyncAddAge(&#123;n:4&#125;)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">adds</span>(&#123;<span class="attr">n</span>:<span class="number">4</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组形式</span></span><br><span class="line">    <span class="comment">// ...mapActions([&#x27;asyncAgeAdd&#x27;]),</span></span><br><span class="line">    <span class="comment">// 对象形式</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;</span><br><span class="line">        <span class="comment">// 重命名</span></span><br><span class="line">        <span class="attr">adds</span>: <span class="string">&#x27;asyncAgeAdd&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-Module"><a href="#五-Module" class="headerlink" title="(五) Module"></a>(五) Module</h3><p><strong>解决场景</strong>：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。 将 store 分割成 模块（module）。每个模块拥有自己的 state、mutation、action、getter <strong>命名空间</strong>：namespaced: true, <strong>优点</strong>：使用命名空间可以使模块具有更高的封装度和复用性 命名空间写在与state、getters等同层级中<br>注：</p><ul><li>加了命名空间就需要修改所有使用了辅助函数的地方</li><li>没加，只需要修改使用了mapState的地方<br>使用promise其他方法封装实现promise.all方法</li></ul>]]></content>
    
    
    <summary type="html">Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://fanxing28.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>【ES6】 新特性</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/JavaScript/%E3%80%90ES6%E3%80%91%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/JavaScript/%E3%80%90ES6%E3%80%91%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2023-12-03T06:04:00.000Z</published>
    <updated>2023-12-03T14:18:45.092Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ES6是对于ES2015+的俗称，也可以说是通常叫法。 ES 全称是ECAMScript，它是JavaScript基础构建的一种语言，JavaScript正是建立在ECAMScript语言的基础规范中建立</p></blockquote><h2 id="一-let、const和var"><a href="#一-let、const和var" class="headerlink" title="一. let、const和var"></a>一. let、const和var</h2><p>ES6新增了两种定义变量和常量的关键字let和const<br>目的：解决原有语法上的一些不足</p><blockquote><p>let：定义变量 const：定义常量</p></blockquote><p><strong>let&#x2F;const 和 var的区别</strong>：</p><ol><li><strong>预解析</strong><br> var 会进行预解析<br> let&#x2F;const 没有预解析，必须先声明后使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: 使用var声明</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// var 会进行预解析</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username); <span class="comment">// tom</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: 使用let声明</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: Cannot access &#x27;num&#x27; before initialization</span></span><br></pre></td></tr></table></figure></li><li><strong>重复变量名</strong><br> var 定义的变量可以重名<br> let&#x2F;const 不允许定义重复的变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg：使用var重复声明变量（后面的会覆盖前面的）</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg：使用let/const重复声明变量报错：（Uncaught SyntaxError: Identifier &#x27;num&#x27; has already been declared）</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> num = <span class="number">200</span>;</span><br></pre></td></tr></table></figure></li><li><strong>块级作用域</strong><br> var 没有块级作用域, 只有函数能限制变量的使用范围<br> let&#x2F;const 有块级作用域， 任何一个可以执行代码的 {} 都会限制变量的使用范围<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">10</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 100</span></span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">200</span>; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 报错：Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><strong>let 和 const区别</strong>：</li><li>变量值可以变<br> let 定义的变量可以修改值<br> const 定义的常量不可以修改值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">100</span>;</span><br><span class="line">num = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">100</span>;</span><br><span class="line">num = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 报错：Uncaught TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure><strong>注</strong>：const存的值是引用数据类型的时候，只要<strong>地址没变</strong>就可以<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">username</span> = <span class="string">&quot;jerry&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;&quot;username&quot;: &quot;jerry&quot;&#125;</span></span><br></pre></td></tr></table></figure>把const声明的常量的地址改变，就会报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// 报错：Uncaught TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure></li><li>初始化赋值<br> let 定义的时候可以不赋值<br> const 定义的时候必须赋值，而且一旦赋值不允许修改<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num;</span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num;</span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"><span class="comment">// 报错：Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二-this的指向和改变this的指向"><a href="#二-this的指向和改变this的指向" class="headerlink" title="二. this的指向和改变this的指向"></a>二. this的指向和改变this的指向</h2><p><strong>什么是this？</strong><br>它是一个js内的关键字，是一个使用在作用域内的关键字。</p><h3 id="1-this的指向"><a href="#1-this的指向" class="headerlink" title="(1) this的指向"></a>(1) this的指向</h3><ol><li>全局中的this &#x3D;&#x3D;&gt; window</li><li>函数中的this:<blockquote><p>不管函数怎么定义，不管函数在哪定义，只看函数调用方式</p></blockquote></li></ol><ul><li>普通调用 &#x3D;&#x3D;&gt; window</li><li>普通匿名函数 &#x3D;&#x3D;&gt; window</li><li>对象中的this &#x3D;&#x3D;&gt; .前面是谁就是谁</li><li>定时器中的this &#x3D;&#x3D;&gt; window</li><li>事件处理函数 &#x3D;&#x3D;&gt; 事件源</li><li>箭头函数中的this &#x3D;&#x3D;&gt; 该作用域外部作用域的this</li><li>构造函数中的this &#x3D;&#x3D;&gt; 本次调用 被自动创建的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在全局使用this指向window</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>); <span class="comment">// window</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span> === <span class="variable language_">this</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 函数中this指向</span></span><br><span class="line"><span class="comment">// 1. 普通调用  this===&gt; window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">// 2. 对象调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// &#123;name: &#x27;小花&#x27;, f: ƒ&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 小花</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把fn这个函数当做一个值存在对象中键名为f的位置</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">f</span>: fn,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">f</span>();</span><br><span class="line"><span class="comment">// 3. 定时器调用 this 指向window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(fn, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>); <span class="comment">// tom</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">f</span>: fn,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">f</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// 4. 事件处理函数 this指向事件源</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// #document</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = fn;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-如何改变this的指向方法"><a href="#2-如何改变this的指向方法" class="headerlink" title="(2) 如何改变this的指向方法"></a>(2) 如何改变this的指向方法</h3><ol><li><strong>call()方法</strong><br> 语法：<code>函数名.call(参数)</code><br> 参数：<br> ​ -&gt; 参数1：该函数内的this指向(新指向)<br> ​ -&gt; 参数2：依次给函数进行形参赋值<br> 特点：立即调用函数</li><li>apply()方法<br> 语法：<code>函数名.apply(参数1, 参数2)</code><br> 参数：<br> ​ -&gt; 参数1：该函数内的this指向(新指向)<br> ​ -&gt; 参数2：是一个数组，内部的每一项都是给函数形参赋值<br> 特点：立即调用函数</li><li>bind()方法<br> 语法：<code>函数名.bind(参数)</code><br> 参数：<br> ​ -&gt; 参数1：该函数内的this指向(新指向) ​ -&gt; 从参数2开始，依次给函数的形参赋值<br> 特点：</li></ol><ul><li>不会立即调用函数，而是返回一个新函数</li><li>有一个返回值，是一个和原始函数一模一样的新函数，只不过this被锁死了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;zjk&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="property">log</span> (<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj= &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jake&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fun</span>(); <span class="comment">// zjk</span></span><br><span class="line">fun.<span class="title function_">call</span>(obj); <span class="comment">//Jake</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-改变this指向的方法有什么区别"><a href="#3-改变this指向的方法有什么区别" class="headerlink" title="(3).改变this指向的方法有什么区别"></a>(3).改变this指向的方法有什么区别</h3><ol><li>三者都可以改变函数this对象的指向</li><li>三者第一个参数都是this要指向的对象，如果没有这个参数或参数为undefined或null，则默认指向全局window</li><li>三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入</li><li>bind是返回绑定this之后的函数，apply、call 则是立即执行</li></ol><h2 id="三-箭头函数"><a href="#三-箭头函数" class="headerlink" title="三. 箭头函数"></a>三. 箭头函数</h2><p>ES6 中 新增的书写函数的方式<br>(1) 语法：**() &#x3D;&gt; {}**</p><ul><li>() 书写形参的位置</li><li>&#x3D;&gt; 箭头函数的标志</li><li>{} 书写代码的位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 通用写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">arg1, arg2, arg3</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2 + arg3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>(2) 特点</li></ul><ol><li>可以省略小括号不写<blockquote><p>当形参只有一个的时候可以不写小括号</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = arg1 =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arg1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可以省略大括号不写<blockquote><p>当函数体只有一条语句的时候，可以不写大括号，会自动把这条语句的结果当做函数的返回值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = n =&gt; n*n; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">8</span>)); <span class="comment">// 64</span></span><br></pre></td></tr></table></figure></li><li>箭头函数没有arguments<blockquote><p>arguments: 是函数参数的默认集合，天生存在</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt;&#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 报错：arguments未定义</span></span><br></pre></td></tr></table></figure></li><li>箭头函数没有this<blockquote><p>箭头函数内的this 就是该作用域外部作用域的this<br>箭头函数外面的函数this是啥，箭头函数this就是啥</p></blockquote></li></ol><p>​<strong>注意</strong>: 事件处理函数不要用箭头函数，会改变this指向<br>5. 箭头函数不能当做构造函数使用</p><blockquote><p>不能和 new 关键字连用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name,age</span>) =&gt; &#123; </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name; </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;xiao&#x27;</span>,<span class="number">30</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me); <span class="comment">// 报错：Uncaught TypeError:Person is not a constructor</span></span><br></pre></td></tr></table></figure><h2 id="四-模板字符串"><a href="#四-模板字符串" class="headerlink" title="四. 模板字符串"></a>四. 模板字符串</h2><p>模板字符串（template string）是增强版的字符串，用反引号（&#96;&#96;）标识，特点：</p><ol><li>字符串中可以出现换行符</li><li>可以使用 ${变量} 形式输出变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义字符串 </span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt; </span></span><br><span class="line"><span class="string">&lt;li&gt;晴天&lt;/li&gt; </span></span><br><span class="line"><span class="string">&lt;li&gt;雨天&lt;/li&gt; </span></span><br><span class="line"><span class="string">&lt;li&gt;多云&lt;/li&gt; </span></span><br><span class="line"><span class="string">&lt;li&gt;大雪&lt;/li&gt; </span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>; </span><br><span class="line"><span class="comment">// 变量拼接 </span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;小雪&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`今天是<span class="subst">$&#123;star&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><strong>注意：</strong> 当遇到字符串与变量拼接的情况使用模板字符串</li></ol><h2 id="五-简化对象写法"><a href="#五-简化对象写法" class="headerlink" title="五. 简化对象写法"></a>五. 简化对象写法</h2><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。<br><strong>对象简写语法</strong>：</p><ol><li>当对象的key value 是一模一样的时候，</li></ol><ul><li>可以省略value不写</li><li>注意：value必须是一个变量</li></ul><ol start="2"><li>当对象内key对应的值是一个函数</li></ol><ul><li>可以省略 function 和 冒号不写</li><li><strong>箭头函数不可以省略</strong><br><strong>注</strong>：希望获取对象obj中键名为变量key的值<blockquote><p>key被引号包起来, 是一个字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;key&#x27;</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>key没有被引号包起来，表示一个变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> slogon = <span class="string">&#x27;追求变得更好&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> improve = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以提高你的技能&#x27;</span>); </span><br><span class="line">&#125; <span class="comment">//属性和方法简写 </span></span><br><span class="line"><span class="keyword">let</span> atguigu = &#123; </span><br><span class="line">name, </span><br><span class="line">slogon, </span><br><span class="line">improve, </span><br><span class="line"><span class="title function_">change</span>(<span class="params"></span>) &#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以改变你&#x27;</span>) </span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="六-变量的解构赋值"><a href="#六-变量的解构赋值" class="headerlink" title="六. 变量的解构赋值"></a>六. 变量的解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。<br><strong>作用</strong>：快速从对象或者数组中获取数据<br><strong>1.解构数组</strong></p><ul><li>语法  var [变量] &#x3D; 数组</li><li>特点: 按照索引位置，依次给变量进行赋值<br><strong>2.解构多维数组</strong></li><li>解构多维数组, 数组怎么写，解构怎么写，数组换成变量<br><strong>3.解构对象</strong></li><li>语法  var { key } &#x3D; 对象<blockquote><p>定义一个变量，获取的是该对象内 同名 key 的数据</p></blockquote></li></ul><p><strong>注</strong>：可以给同名key起一个别名</p><blockquote><p>语法：<code>var &#123; key: 别名 &#125; = obj</code></p></blockquote><p><strong>4.解构多维对象</strong><br>书写方式：对象怎么书写，解构就怎么书写，数据换成变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的解构赋值 </span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;刘化&#x27;</span>, <span class="string">&#x27;黎级&#x27;</span>, <span class="string">&#x27;郭纵&#x27;</span>]; </span><br><span class="line"><span class="keyword">let</span> [zhang, liu, li, guo] = arr; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhang); <span class="comment">// 张三&quot; </span></span><br><span class="line"><span class="comment">// 拿到对应索引的值 </span></span><br><span class="line"><span class="comment">//对象的解构赋值 </span></span><br><span class="line"><span class="keyword">const</span> lin = &#123; </span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;林豆&#x27;</span>, </span><br><span class="line"><span class="attr">tags</span>: [<span class="string">&#x27;车手&#x27;</span>, <span class="string">&#x27;歌手&#x27;</span>, <span class="string">&#x27;小旋风&#x27;</span>, <span class="string">&#x27;演员&#x27;</span>] </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">let</span> &#123;name, tags&#125; = lin;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构多维对象 </span></span><br><span class="line"><span class="keyword">let</span> info = &#123; </span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;tom&#x27;</span>, </span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>, </span><br><span class="line"><span class="attr">phone</span>: <span class="number">123456</span>, </span><br><span class="line"><span class="attr">like</span>: [<span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>, <span class="string">&#x27;rap&#x27;</span>, <span class="string">&#x27;篮球&#x27;</span>], </span><br><span class="line"><span class="attr">time</span>: <span class="string">&#x27;两年半&#x27;</span>, </span><br><span class="line"><span class="attr">score</span>: &#123; </span><br><span class="line"><span class="attr">chinese</span>: <span class="number">80</span>, </span><br><span class="line"><span class="attr">math</span>: <span class="number">100</span>, </span><br><span class="line"><span class="attr">english</span>: <span class="number">300</span>, </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> &#123; </span><br><span class="line">username, </span><br><span class="line">age, </span><br><span class="line"><span class="attr">like</span>: [a, b, c, d], </span><br><span class="line">time, </span><br><span class="line"><span class="attr">score</span>: &#123; </span><br><span class="line">chinese, </span><br><span class="line">math, </span><br><span class="line">english, </span><br><span class="line">&#125;, </span><br><span class="line"><span class="attr">phone</span>: tel </span><br><span class="line">&#125; = info </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(time , c, tel);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 频繁使用对象方法、数组元素，就可以使用解构赋值形式</p><h2 id="七-函数参数默认值"><a href="#七-函数参数默认值" class="headerlink" title="七. 函数参数默认值"></a>七. 函数参数默认值</h2><p>ES6允许给函数参数赋初始值<br>形参初始值具有默认的参数，一般靠后。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c=<span class="number">3</span></span>)&#123; </span><br><span class="line"><span class="comment">// 如果实参不传的话，默认c的值为3 </span></span><br><span class="line"><span class="keyword">return</span> a+b+c; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="八-spread-扩展运算符"><a href="#八-spread-扩展运算符" class="headerlink" title="八. spread 扩展运算符"></a>八. spread 扩展运算符</h2><p>扩展运算符（spread）也是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。<br><strong>作用</strong>：</p><ul><li>展开运算符<blockquote><p>把数据集合展开(数组，对象，Set, Map ….)</p></blockquote></li></ul><p>就是把数据最外面的符号去掉</p><ul><li>合并功能<blockquote><p>把多个数据合并成一个数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 展开数组</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">let</span> tfboys = [<span class="string">&#x27;德玛&#x27;</span>,<span class="string">&#x27;西亚&#x27;</span>,<span class="string">&#x27;皇子&#x27;</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(...tfboys)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 展开对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">One</span> = &#123;</span><br><span class="line">    <span class="attr">q</span>: <span class="string">&#x27;果敢&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Two</span> = &#123;</span><br><span class="line">    <span class="attr">w</span>: <span class="string">&#x27;勇气&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Three</span> = &#123;</span><br><span class="line">    <span class="attr">e</span>: <span class="string">&#x27;审判&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Four</span> = &#123;</span><br><span class="line">    <span class="attr">r</span>: <span class="string">&#x27;沉默&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> gailun = &#123;...<span class="title class_">One</span>, ...<span class="title class_">Two</span>,...<span class="title class_">Three</span>,...<span class="title class_">Four</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受两个参数，第一个参数表示[0]实参,第二个参数表示从[1] ~ [最后]</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, ...arg</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, ...arg); <span class="comment">// 100 200 300 400 500</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="九-rest-参数"><a href="#九-rest-参数" class="headerlink" title="九. rest 参数"></a>九. rest 参数</h2><p>ES6 引入 rest 参数（使用…args，结果为数组形式），用于获取函数的实参，用来代替 arguments（结果为对象形式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用与 arguments 类似</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 结果为：数组形式</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* rest 参数必须是最后一个形参</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">a,b,...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">minus</span>(<span class="number">100</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">19</span>);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> rest参数非常适合不定个数参数函数的场景</p><h2 id="十-模块化开发-js文件之间的导入和导出"><a href="#十-模块化开发-js文件之间的导入和导出" class="headerlink" title="十. 模块化开发(js文件之间的导入和导出)"></a>十. 模块化开发(js文件之间的导入和导出)</h2><blockquote><p>JavaScript中的导入导出方式有两对，并且是对应着使用的。</p></blockquote><p>import：静态的 <strong><code>import</code></strong> 语句用于导入由另一个模块导出的绑定。无论是否声明了 strict mode，导入的模块都运行在严格模式下。在浏览器中，<code>import</code> 语句只能在声明了 <code>type=&quot;module&quot;</code> 的 <code>script</code> 的标签中使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 导入文件中引入导出文件 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-第一组导入导出"><a href="#1-第一组导入导出" class="headerlink" title="(1) 第一组导入导出"></a>(1) 第一组导入导出</h3><p>导出方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> 要导出的数据 <span class="comment">// export default 导入模块的默认导出接口的引用名，一个页面只能写一个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;数据<span class="number">1</span>,数据<span class="number">2.</span>..&#125; <span class="comment">// 批量导出</span></span><br></pre></td></tr></table></figure><p>导入方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 变量 <span class="keyword">from</span> <span class="string">&quot;来源的文件&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="comment">// 导出文件： </span></span><br><span class="line"><span class="keyword">let</span> a </span><br><span class="line"><span class="keyword">let</span> b = <span class="number">200</span> </span><br><span class="line"><span class="keyword">let</span> c = <span class="number">300</span> </span><br><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line"><span class="attr">a</span>: a, </span><br><span class="line"><span class="attr">b</span>: b </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a = <span class="number">100</span> <span class="comment">// 对外暴露变量a的值</span></span><br><span class="line"><span class="comment">// 导入文件： </span></span><br><span class="line"><span class="keyword">import</span> headerModules <span class="keyword">from</span> <span class="string">&#x27;./header.js&#x27;</span> <span class="comment">// 引入导出文件 console.log(headerModules); // 100</span></span><br></pre></td></tr></table></figure><h3 id="2-第二组导入导出"><a href="#2-第二组导入导出" class="headerlink" title="(2) 第二组导入导出"></a>(2) 第二组导入导出</h3><p>导出方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> 要导出的数据 <span class="comment">// 可以同时使用多个export导出</span></span><br></pre></td></tr></table></figure><p>导入方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;变量<span class="number">1</span>,变量<span class="number">2</span>…&#125; <span class="keyword">from</span> <span class="string">&quot;来源的文件&quot;</span>; </span><br><span class="line"><span class="comment">// 或 </span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> 变量 <span class="keyword">from</span> <span class="string">&quot;来源文件&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="comment">// 导出文件： </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">3</span>; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">45</span>, <span class="string">&#x27;zs&#x27;</span>]; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> c = &#123; </span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, </span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入文件： </span></span><br><span class="line"><span class="keyword">import</span> &#123; b &#125; <span class="keyword">from</span> <span class="string">&#x27;./two.js&#x27;</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// [1, 45, &#x27;zs&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="十一-新的数据类型"><a href="#十一-新的数据类型" class="headerlink" title="十一. 新的数据类型"></a>十一. 新的数据类型</h2><p><strong>JavaScript中原来的数据类型</strong>：Number、Boolean、Unll、Undefined、String、object<br><strong>ES6新增的数据类型</strong>：Symbol、BigInt</p><h3 id="1-Symbol"><a href="#1-Symbol" class="headerlink" title="(1) Symbol"></a>(1) Symbol</h3><p><strong>symbol</strong> 是一种基本数据类型。<code>Symbol()</code> 函数会返回 <strong>symbol</strong> 类型的值，该类型具有静态属性和静态方法。<br>每个从 <code>Symbol()</code> 返回的 symbol 值都是唯一的。一个 symbol 值能作为对象属性的标识符；这是该数据类型<strong>仅有的目的</strong>。</p><ol><li>创建Symbol数据类型<br>语法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="title class_">Symbol</span>(数据)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">Symbol</span>(<span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Symbol</span>(<span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// Symbol(1) Symbol(1) </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b); <span class="comment">// false // 独一无二 的，无法比较</span></span><br></pre></td></tr></table></figure></li><li>Symbol作为对象的属性</li></ol><blockquote><p>不会覆盖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;tom&#x27;</span>)]:<span class="number">1</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;jerry&#x27;</span>)]:<span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj[<span class="title class_">Symbol</span>(<span class="string">&#x27;tom&#x27;</span>)] = <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// 不会覆盖，可以添加 // &#123;Symbol(tom): 1, Symbol(jerry): 2, Symbol(tom): 3&#125; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="title class_">Symbol</span>(<span class="string">&#x27;tom&#x27;</span>)]); <span class="comment">// undefined , Symbol(&#x27;tom&#x27;) 表示独一无二的值，获取的时候的Symbol(&#x27;tom&#x27;)，和设置的时候的Symbol(&#x27;tom&#x27;)， 不是同一个</span></span><br><span class="line"><span class="comment">// 无法通过对象语法获取symbol, 只能遍历</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;tom&#x27;</span>)]: <span class="number">1</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;jerry&#x27;</span>)]: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj[<span class="title class_">Symbol</span>(<span class="string">&#x27;tom&#x27;</span>)] = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)); <span class="comment">// [Symbol(tom), Symbol(jerry), Symbol(tom)]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj).<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取对象的symbol属性名对应的属性值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)[i], obj[<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)[i]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能通过对象语法获取，只能通过遍历的方式拿到<br><code>Object.getOwnPropertySymbols()</code>方式，可以获取到对象的所有Symbol属性名</p><h3 id="2-BigInt"><a href="#2-BigInt" class="headerlink" title="(2) BigInt"></a>(2) BigInt</h3><p><strong><code>BigInt</code></strong> 是一种内置对象，它提供了一种方法来表示大于 <code>2^53 - 1</code> 的整数。这原本是 Javascript 中可以用<code>Number</code> 表示的最大数字。**<code>BigInt</code>** 可以表示任意大的整数。<br>新增加这个数据类型的<strong>目的</strong>：js存储16位以上的数据会出现精度丢失的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>; </span><br><span class="line">num = <span class="number">100n</span>; <span class="comment">// 转为BigInt </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 100n </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// bigint</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100n</span> + <span class="number">100n</span>); <span class="comment">// 200n </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100n</span> + <span class="number">100</span>); <span class="comment">// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>将任意数字转为BigInt , 在数字后面添加n</li><li>bigInt只能和bigInt一起操作</li><li><code>BigInt</code> 和 <code>Number</code>不是严格相等的，但是宽松相等的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10n</span> == <span class="number">10</span>; <span class="comment">// true </span></span><br><span class="line"><span class="number">10n</span> === <span class="number">10</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="十二-class类"><a href="#十二-class类" class="headerlink" title="十二. class类"></a>十二. class类</h2><p><strong>ES6类的语法</strong>（就是构造函数的语法糖）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123; 构造器, 原型上的方法… &#125;</span><br></pre></td></tr></table></figure><p><code>constructor()方法</code>是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加。<br>class的实现只是一种改写方式，没有其他的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123; </span><br><span class="line"><span class="comment">// 构造器 --- 等价于 ES5 中在构造函数里面写的代码 </span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123; </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age &#125; </span><br><span class="line"><span class="title function_">sing</span>(<span class="params"></span>) &#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我喜欢的歌曲：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">dance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;练习时长：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;月&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">basketball</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;喜欢打篮球&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 实例化 </span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;青花瓷&#x27;</span>, <span class="number">18</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1); <span class="comment">// Person &#123;name: &#x27;青花瓷&#x27;, age: 18&#125; </span></span><br><span class="line">p1.<span class="title function_">sing</span>(); <span class="comment">// 我喜欢的歌曲：青花瓷 </span></span><br><span class="line">p1.<span class="title function_">dance</span>(); <span class="comment">// 练习时长：18月</span></span><br></pre></td></tr></table></figure><p><strong>详细讲解</strong>：<br>(1) 在之前的js中，我们会通过定义函数的方式进行构造函数的创建，在通过new 一个构造函数的类来实现一种独立的数据类型（Class）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个构造函数方法&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过定义在原型链上的方式来进行类之间数据共享</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;df&#x27;</span>);</span><br><span class="line">person.<span class="title function_">say</span>();</span><br><span class="line">person.<span class="property">property</span>.<span class="property">action</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原型链上的数据共享&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure><p>现在，ES6中，定义了一个class关键字来定义类，和java、php这些面向对象语言一样中类的功能类似（强调，JavaScript是面向函数式编程）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123; </span><br><span class="line"><span class="title function_">constructor</span> (name,age) &#123; <span class="comment">// 这是构造器，对象一经创建就立即执行的类，里面的参数就是new对象时候传入的参数 </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age </span><br><span class="line">&#125; </span><br><span class="line">say () &#123; <span class="comment">// 之前都是将方法放在原型上或者属性上，不能直接定义，现在可以了 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个calss创建的类&#x27;</span>, <span class="variable language_">this</span>) </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 通过静态方法来创建对象，静态方法只能函数自己来调用，它的实例对象不能调用，而实例方法只能通过它的实例对象来调用，它本身不能调用。实例方法都是定义在类原型上的，而通过关键字static修饰后，这个方法就变成了静态方法，只能通过类名去调用了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (name,age) &#123; <span class="comment">// 这是构造器，对象一经创建就立即执行的类，里面的参数就是new对象时候传入的参数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    say () &#123; <span class="comment">// 之前都是将方法放在原型上或者属性上，不能直接定义，现在可以了</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个calss创建的类&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> action (name,age) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是Dog类的静态方法&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(name, age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ha = <span class="title class_">Dog</span>.<span class="title function_">action</span>(<span class="string">&#x27;哈士奇&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ha);  <span class="comment">// 这是Dog类的静态方法    Dog &#123; name: &#x27;哈士奇&#x27;, age: 3 &#125;</span></span><br></pre></td></tr></table></figure><p>3、 静态方法中的<strong>this是是指向</strong>当前类型，而不是当前对象。<br>4、使用<strong>extends关键字</strong>来实现继承一个父类，通过super关键字来调用继承的父类的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (name,age) &#123; <span class="comment">// 这是构造器，对象一经创建就立即执行的类，里面的参数就是new对象时候传入的参数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    say () &#123; <span class="comment">// 之前都是将方法放在原型上或者属性上，不能直接定义，现在可以了</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个calss创建的类&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> action (name,age) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是Dog类的静态方法&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(name, age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinDog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dog</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (name,age,type) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name,age) <span class="comment">// super关键字是用来调用父类 的，这里相当于在调用父类的构造方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_type</span> = type</span><br><span class="line">    &#125;</span><br><span class="line">    hello () &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">say</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上一句是调用父类super打印出来的&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ha = <span class="keyword">new</span> <span class="title class_">MinDog</span>(<span class="string">&#x27;哈士奇&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;man&#x27;</span>)</span><br><span class="line">ha.<span class="title function_">hello</span>() <span class="comment">// 这是一个calss创建的类 MinDog &#123; name: &#x27;哈士奇&#x27;, age: 3, _type: &#x27;man&#x27; &#125;   // 上一句是调用父类super打印出来的</span></span><br></pre></td></tr></table></figure><h3 id="类的本质"><a href="#类的本质" class="headerlink" title="类的本质"></a>类的本质</h3><ol><li>类的本质还是函数，可以简单的认为类就是构造函数的另外一种写法。</li><li>类的所有方法都定义在类的prototype属性上。</li><li>类创建的实例,里面也有__ proto __ 指向类的prototype原型对象。</li><li>所以ES6的类它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</li><li>所以ES6的类其实就是语法糖。</li><li>语法糖:语法糖就是一种便捷写法。简单理解，有两种方法可以实现同样的功能，但是一种写法更加清晰、方便，那么这个方法就是语法糖。</li></ol><h2 id="十三-ES6新增数据结构"><a href="#十三-ES6新增数据结构" class="headerlink" title="十三. ES6新增数据结构"></a>十三. ES6新增数据结构</h2><h3 id="数据结构-Set"><a href="#数据结构-Set" class="headerlink" title="数据结构 Set"></a>数据结构 Set</h3><blockquote><p>ES6 提供了新的数据结构 Set。它类似于数组，但是<strong>成员的值都是唯一的</strong>，没有重复的值。</p></blockquote><p><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构。<br>由于Set是伪数组，并且伪数组里面的值都是唯一的，所以可以用在数组去重中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123; s.<span class="title function_">add</span>(item) &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Set(5) &#123;7, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...s]); <span class="comment">// (5) [7, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 简化为</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">[...set]<span class="comment">// [7, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="1-创建-Set-数据结构"><a href="#1-创建-Set-数据结构" class="headerlink" title="(1) 创建 Set 数据结构"></a>(1) 创建 Set 数据结构</h4><p><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>….])</span><br></pre></td></tr></table></figure><h4 id="2-Set-数据结构的属性和方法"><a href="#2-Set-数据结构的属性和方法" class="headerlink" title="(2) Set 数据结构的属性和方法"></a>(2) Set 数据结构的属性和方法</h4><p><strong>属性</strong>：size<br><strong>方法</strong>：add()、has()、delete()、clear()、forEach()</p><ol><li>size 属性<blockquote><p>该数据结构中有多少个数据</p></blockquote></li></ol><p>语法：数据结构.size</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">200</span>]); <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ol start="2"><li>add() 方法<blockquote><p>向该数据结构添加内容</p></blockquote></li></ol><p>  语法：数据结构.add(数据)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]); </span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">500</span>) </span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">100</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Set(4) &#123;100, 200, 300, 500&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>has() 方法<blockquote><p>查找Set中是否有该数据</p></blockquote></li></ol><p>语法：数据结构.has(数据)</p><blockquote><p>true     该数据结构内有该数据<br>false    该数据结构内没有该数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">100</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">500</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol start="4"><li>delete()方法<blockquote><p>删除数据</p></blockquote></li></ol><p>语法：数据结构.delete(数据)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]); </span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">100</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Set(2) &#123;200, 300&#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>clear() 方法<blockquote><p>清除该数据结构内所有内容</p></blockquote></li></ol><p>  语法：数据结构.clear()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]); </span><br><span class="line">s.<span class="title function_">clear</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Set(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>forEach() 方法<br>语法 ：数据结构.forEach(function(value, key, origin){})<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]);</span><br><span class="line">s.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Set(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-Set中判断两个值是否不同"><a href="#3-Set中判断两个值是否不同" class="headerlink" title="(3) Set中判断两个值是否不同"></a>(3) Set中判断两个值是否不同</h4><p>向 Set 加入值的时候，不会发生类型转换，所以<code>5</code>和<code>&quot;5&quot;</code>是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（ &#x3D;&#x3D;&#x3D; ），主要的区别是向 Set 加入值时认为<code>NaN</code>等于自身，而精确相等运算符认为<code>NaN</code>不等于自身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(); </span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span>; </span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">NaN</span>; </span><br><span class="line">set.<span class="title function_">add</span>(a); </span><br><span class="line">set.<span class="title function_">add</span>(b); </span><br><span class="line">set <span class="comment">// Set &#123;NaN&#125;</span></span><br></pre></td></tr></table></figure><p>上面代码向 Set 实例添加了两次<code>NaN</code>，但是只会加入一个。这表明，在 Set 内部，两个<code>NaN</code>是相等的。<br>另外，两个对象总是不相等的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(&#123;&#125;); </span><br><span class="line">set.<span class="property">size</span> <span class="comment">// 1</span></span><br><span class="line">set.<span class="title function_">add</span>(&#123;&#125;); </span><br><span class="line">set.<span class="property">size</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码表示，由于两个空对象不相等，所以它们被视为两个值。</p><h3 id="数据结构-Map"><a href="#数据结构-Map" class="headerlink" title="数据结构 Map"></a>数据结构 Map</h3><blockquote><p><strong>Map 数据结构</strong>：类似于对象的数据结构，它的key可以是任何数据类型，可以被看做为一个  值 &#x3D; 值 的数据结构</p></blockquote><h4 id="1-Map-基本概念"><a href="#1-Map-基本概念" class="headerlink" title="(1) Map 基本概念"></a>(1) Map 基本概念</h4><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><h4 id="2-Map-特征"><a href="#2-Map-特征" class="headerlink" title="(2) Map 特征"></a>(2) Map 特征</h4><ul><li>Map 对象保存键值对，并且能够记住键的原始插入顺序。</li><li>任何值(对象或者原始值) 都可以作为一个键或一个值。</li><li>Map 是 ES6 中引入的一种新的数据结构</li></ul><h4 id="3-Maps-和-Objects-的区别"><a href="#3-Maps-和-Objects-的区别" class="headerlink" title="(3) Maps 和 Objects 的区别"></a>(3) Maps 和 Objects 的区别</h4><ul><li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li><li>Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。</li><li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li><li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</li></ul><h4 id="4-创建一个-Map数据结构"><a href="#4-创建一个-Map数据结构" class="headerlink" title="(4) 创建一个 Map数据结构"></a>(4) 创建一个 Map数据结构</h4><p><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>( [ [key, value], [key, value] ] )</span><br></pre></td></tr></table></figure><h4 id="5-Map-数据结构的属性和方法"><a href="#5-Map-数据结构的属性和方法" class="headerlink" title="(5) Map 数据结构的属性和方法"></a>(5) Map 数据结构的属性和方法</h4><p><strong>属性</strong>：size</p><p><strong>方法</strong>：set()、get()、has()、delete()、clear()、forEach()</p><ol><li>size 属性<blockquote><p>该数据结构内有多少个数据</p></blockquote></li></ol><p>语法：数据结构.size</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ol start="2"><li>set() 方法<blockquote><p>向该数据结构添加内容</p></blockquote></li></ol><p>语法：数据结构.set(key, value)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]]); </span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;两年半&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m); <span class="comment">// Map(3) &#123;&#x27;name&#x27; =&gt; &#x27;zs&#x27;, &#x27;age&#x27; =&gt; 18, &#x27;time&#x27; =&gt; &#x27;两年半&#x27;&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>get() 方法<br>语法：数据结构.get(key)<br>返回值：该数据结构内key对应的value<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]]); <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// zs</span></span><br></pre></td></tr></table></figure></li><li>has() 方法<blockquote><p>该数据结构中是否有该数据</p></blockquote></li></ol><p>语法：数据结构.has(key)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]]); <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="5"><li>delete() 方法<blockquote><p>删除该数据结构内某一个数据</p></blockquote></li></ol><p>语法：数据结构.delete(key)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]]); </span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m); <span class="comment">// Map(1) &#123;&#x27;age&#x27; =&gt; 18&#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>clear() 方法<blockquote><p>清除该数据结构里面的所有内容</p></blockquote></li></ol><p>语法：数据结构.clear()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: </span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]]); </span><br><span class="line">m.<span class="title function_">clear</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m); <span class="comment">// Map(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>forEach()<br>语法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据结构.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key, origin</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]]);</span><br><span class="line">m.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, key, origin</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value, key, origin); <span class="comment">// zs name Map(2) &#123;&#x27;name&#x27; =&gt; &#x27;zs&#x27;, &#x27;age&#x27; =&gt; 18&#125;</span></span><br><span class="line"><span class="comment">// 18 &#x27;age&#x27; Map(2) &#123;&#x27;name&#x27; =&gt; &#x27;zs&#x27;, &#x27;age&#x27; =&gt; 18&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><strong>参考文章</strong>：<a href="https://es6.ruanyifeng.com/#docs/set-map">Set 和 Map 数据结构 - ECMAScript 6入门 (ruanyifeng.com)</a></li></ol><h2 id="十四-Iterator-和-for…of"><a href="#十四-Iterator-和-for…of" class="headerlink" title="十四. Iterator 和 for…of"></a>十四. Iterator 和 for…of</h2><p><strong>Iterator(遍历器)</strong></p><ul><li>是一个接口，为不同的数据结构提供了同一个的访问机制</li><li>ES6中提供了Symbol.iterator接口(属性)，只要数据有这个接口，就可以用for…of遍历数据<br><strong>Iterator 的作用有三个</strong>：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令<code>for...of</code>循环，Iterator 接口主要供<code>for...of</code>消费。<br><strong>Iterator 的遍历过程</strong>：</li></ul><ol><li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</li><li>第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</li><li>第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员。</li><li>不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置。<br>每一次调用<code>next</code>方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含<code>value</code>和<code>done</code>两个属性的对象。其中，<code>value</code>属性是当前成员的值，<code>done</code>属性是一个布尔值，表示遍历是否结束。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我们创建一个数组 </span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line"><span class="keyword">const</span> t = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() </span><br><span class="line"><span class="comment">//调用iterator方法可以得到该方法的执行体，里面有一个next()方法，这个方法就是循环中指向下一个地址的指针 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="title function_">next</span>()) <span class="comment">// &#123;value: &#x27;1&#x27;, done: false&#125; // 这里得到的对象就是每次循环的对象值（value）和是否完成循环（done）</span></span><br></pre></td></tr></table></figure><strong>for…of… 遍历</strong></li></ol><p><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> 变量名 <span class="keyword">of</span> 数据) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>]; </span><br><span class="line">arr.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">/* 100 200 300 400 500 */</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十五-生成器"><a href="#十五-生成器" class="headerlink" title="十五. 生成器"></a>十五. 生成器</h2><p><strong>生成器</strong>：允许你定义一个包含自有迭代算法的函数，同时它可以自动维护自己的状态。生成器函数使用 <code>function*</code>语法编写。最初调用时，生成器函数不执行任何代码，而是返回一种称为 Generator 的迭代器。通过调用生成器的下一个方法消耗值时，Generator 函数将执行，直到遇到 yield 关键字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg:</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">makeRangeIterator</span>(<span class="params">start = <span class="number">0</span>, end = <span class="literal">Infinity</span>, step = <span class="number">1</span></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i += step) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">makeRangeIterator</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// &#123;value: 3, done: false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// &#123;value: 5, done: false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// &#123;value: 7, done: false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// &#123;value: 9, done: false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：虽然自定义的迭代器是一个有用的工具，但由于需要显式地维护其内部状态，因此需要谨慎地创建。它可以根据需要多次调用该函数，并且每次都返回一个新的 Generator，但每个 Generator 只能迭代一次。</p><h2 id="十六-新增数组API和对象API"><a href="#十六-新增数组API和对象API" class="headerlink" title="十六. 新增数组API和对象API"></a>十六. 新增数组API和对象API</h2><h3 id="1-新增数组API"><a href="#1-新增数组API" class="headerlink" title="(1) 新增数组API"></a>(1) 新增数组API</h3><ol><li>arr.flat 数组扁平化</li><li>Array.from() 将数组、类数组转为数组</li><li>Array.of 将数值转为数组</li><li>find() 找到符合要求的第一个元素值</li><li>findIndex() 找到符合要求的第一个元素的下标</li><li>fill() 填充一个数组</li><li>includes() 数组是否包含某特定值</li><li>Array.isArray() 判断是否是数组</li></ol><h3 id="2-新增对象API"><a href="#2-新增对象API" class="headerlink" title="(2) 新增对象API"></a>(2) 新增对象API</h3><ol><li>Object.assign() 将可枚举属性从一个对象复制到另一个对象，浅拷贝,redux中使用</li><li>Object.freeze(obj) 冻结对象</li><li>Object.keys 返回自身可枚举属性，不包括原型链上的</li><li>Object.entries() 返回对象可枚举键值对</li></ol>]]></content>
    
    
    <summary type="html">ES6是对于ES2015+的俗称，也可以说是通常叫法。 ES 全称是ECAMScript，它是JavaScript基础构建的一种语言，JavaScript正是建立在ECAMScript语言的基础规范中建立</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Uniapp 功能实现</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Uniapp/Uniapp%20%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Uniapp/Uniapp%20%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-12-03T05:50:00.000Z</published>
    <updated>2023-12-03T06:23:19.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><p><strong>代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;scroll-view class=&quot;time-line-wrap&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;time-line&quot;&gt;</span><br><span class="line">            &lt;!-- 标题 --&gt;</span><br><span class="line">            &lt;view class=&quot;time-line-title&quot;&gt;</span><br><span class="line">                &#123;&#123;title&#125;&#125;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">            &lt;!-- 时间轴 --&gt;</span><br><span class="line">            &lt;view class=&quot;time-line-container&quot; :class=&quot;addTypeClass&quot;&gt;</span><br><span class="line">                &lt;!-- 时间轴内容块列表 --&gt;</span><br><span class="line">                &lt;view class=&quot;time-line-list&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 时间轴内容块 --&gt;</span><br><span class="line">                    &lt;view class=&quot;time-line-info&quot; :key=&quot;index&quot; :class=&quot;[layoutClass(index)]&quot; :id=&quot;&#x27;timeline&#x27;+index&quot; v-for=&quot;(item,index) of time_line_list&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        &lt;!-- 内容块内容 --&gt;</span><br><span class="line">                        &lt;view class=&quot;line-info-content&quot; &gt;</span><br><span class="line"></span><br><span class="line">                            &lt;!-- 时间轴圆点 --&gt;</span><br><span class="line">                            &lt;view class=&quot;line-on-round&quot; :style=&quot;&#123; opacity: current[index]&amp;&amp;current[index].is==&#x27;ok&#x27;?1:0,top:&#x27;50px&#x27;&#125;&quot; :class=&quot;current[index]&amp;&amp;current[index].is==&#x27;ok&#x27;?comeani:&#x27;&#x27;&quot;&gt;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;view class=&quot;info-content-wrap&quot; :style=&quot;&#123; opacity: current[index]&amp;&amp;current[index].is==&#x27;ok&#x27;?1:0&#125;&quot; :class=&quot;current[index]&amp;&amp;current[index].is==&#x27;ok&#x27;?comeani:&#x27;&#x27;&quot;&gt;</span><br><span class="line">                                &lt;!-- 标题 --&gt;</span><br><span class="line">                                &lt;view class=&quot;info-title&quot;&gt;</span><br><span class="line">                                    &#123;&#123;item.title&#125;&#125;&lt;span&gt;&#123;&#123;item.title_span&#125;&#125;&lt;/span&gt;</span><br><span class="line">                                &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">                                &lt;!-- 内容 --&gt;</span><br><span class="line">                                &lt;view class=&quot;info-content&quot;&gt;</span><br><span class="line">                                    &lt;!-- 内容 --&gt;</span><br><span class="line">                                    &lt;view class=&quot;info-txt&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/view&gt;</span><br><span class="line">                                &lt;/view&gt;</span><br><span class="line">                            &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;/view&gt;</span><br><span class="line">                    &lt;/view&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/scroll-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                // 数据</span><br><span class="line">                time_line_list:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2015.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;匆匆&#x27;,</span><br><span class="line">                        content:&#x27;燕子去了，有再来的时候；杨柳枯了，有再青的时候；桃花谢了，有再开的时候。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2016.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;日子&#x27;,</span><br><span class="line">                        content:&#x27;我不知道他们给了我多少日子，但我的手确乎是渐渐空虚了。我不禁头涔涔而泪潸潸了。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2017.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;时间就像海绵里的水，只要愿挤，总还是有的。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2018.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;倘只看书，便变成书橱。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2019.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;不满是向上的车轮，能够载着不自满的人前进。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2020.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;小的时候，不把他当人，大了以后也做不了人。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2021.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;无情未必真豪杰，怜子如何不丈夫。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2022.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;凡事总须研究，才会明白。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2023.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;哪里有天才，我是把别人喝咖啡的工夫都用在了工作上了。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2024.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;让别人过得舒服些，自己没有幸福不要紧，看见别人得到幸福生活也是舒服的。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2024.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;我觉察他去的匆匆了，伸出手遮挽时，他又从遮挽着的手边过去，天黑时，我躺在床上，他便伶伶俐俐地从我身上跨过，从我脚边飞去了。等我睁开眼和太阳再见，这算又溜走了一日。我掩着面叹息。但是新来的日子的影儿又开始在叹息里闪过了。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:&#x27;2024.11.11&#x27;,</span><br><span class="line">                        title_span:&#x27;你好&#x27;,</span><br><span class="line">                        content:&#x27;我觉察他去的匆匆了，伸出手遮挽时，他又从遮挽着的手边过去，天黑时，我躺在床上，他便伶伶俐俐地从我身上跨过，从我脚边飞去了。等我睁开眼和太阳再见，这算又溜走了一日。我掩着面叹息。但是新来的日子的影儿又开始在叹息里闪过了。&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                HEIGHT:0,//屏幕高度</span><br><span class="line">                result:[],//监听的结果</span><br><span class="line">                current:[],//当前在屏幕内的</span><br><span class="line">                sum:0,//加载完成个数</span><br><span class="line">                comeani:&#x27;come-ani&#x27;,//入场动画</span><br><span class="line">                isScroll:true,//是否加载动画</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        props:&#123;</span><br><span class="line">            location:&#123;</span><br><span class="line">                type:String,</span><br><span class="line">                default:&#x27;center&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            title:&#123;</span><br><span class="line">                type:String,</span><br><span class="line">                default:&#x27;时间轴&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            addTypeClass()&#123;</span><br><span class="line">                let _class=&quot;&quot;;</span><br><span class="line">                let arrType =[&quot;left&quot;,&quot;right&quot;,&quot;center&quot;];</span><br><span class="line">                if (arrType.indexOf(this.location)!==-1&amp;&amp;this.location!==&#x27;center&#x27;) &#123;</span><br><span class="line">                    _class+=this.location+&quot;-time-line&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                return _class;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            this.init();</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            init()&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    // 获取屏幕高度</span><br><span class="line">                    const res = uni.getSystemInfoSync();</span><br><span class="line">                    this.HEIGHT=res.screenHeight;</span><br><span class="line">                    // 添加标志位</span><br><span class="line">                    for(let i=0;i&lt;this.time_line_list.length;i++)&#123;</span><br><span class="line">                        this.current.push(&#123;tag:&#x27;timeline&#x27;+i,is:&#x27;no&#x27;&#125;);</span><br><span class="line">                    &#125;   </span><br><span class="line">                    // 开始获取位置信息</span><br><span class="line">                    this.getScroll();       </span><br><span class="line">                &#125; catch (e) &#123;</span><br><span class="line">                    // error</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            loadani()&#123;</span><br><span class="line">                for(let i=0;i&lt;this.result.length;i++)&#123;</span><br><span class="line">                    for(let j=0;j&lt;this.result[i].info.length;j++)&#123;</span><br><span class="line">                        // 是否没加载动画</span><br><span class="line">                        if(this.current[j].is!=&#x27;ok&#x27;)&#123;</span><br><span class="line">                            // 是否进入视野</span><br><span class="line">                            if(this.current[j].tag==this.result[i].info[j].tag &amp;&amp;</span><br><span class="line">                               this.result[i].info[j].domTop+90&lt;this.HEIGHT)&#123;</span><br><span class="line">                                // 加载动画</span><br><span class="line">                                this.current[j].is=&#x27;ok&#x27;;</span><br><span class="line">                                this.sum=j+1;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 移除当前</span><br><span class="line">                    this.result.splice(i,1);</span><br><span class="line">                &#125;</span><br><span class="line">                // 是否全部加载完成</span><br><span class="line">                if(this.sum==this.time_line_list.length)&#123;this.isScroll=false;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            async getScroll()&#123;</span><br><span class="line">                if(!this.isScroll)&#123;return;&#125;</span><br><span class="line">                let info=[];</span><br><span class="line">                // 返回位置信息加入数组</span><br><span class="line">                for(let i=0;i&lt;this.time_line_list.length;i++)&#123;</span><br><span class="line">                    await this.getNodeList(&#x27;timeline&#x27;+i,i).then(res =&gt; &#123;</span><br><span class="line">                        info.push(res);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                this.result.push(&#123;info:info&#125;);</span><br><span class="line">                // 加载动画</span><br><span class="line">                this.loadani();</span><br><span class="line">            &#125;,</span><br><span class="line">            getNodeList(id,i)&#123;</span><br><span class="line">                // 获取位置信息并返回</span><br><span class="line">                return new Promise(resolve=&gt;&#123;</span><br><span class="line">                    const query = uni.createSelectorQuery().in(this);</span><br><span class="line">                    query.select(&#x27;#&#x27;+id).boundingClientRect(data =&gt; &#123;</span><br><span class="line">                      // console.log(&quot;得到布局位置信息&quot; + JSON.stringify(data));</span><br><span class="line">                      // console.log(&quot;节点离页面顶部的距离为&quot; + data.top);</span><br><span class="line">                      resolve(&#123;domInfo:data.height,domTop:data.top,tag:id&#125;)</span><br><span class="line">                    &#125;).exec();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            // 添加动画</span><br><span class="line">            layoutClass(index)&#123;</span><br><span class="line">                let _class=&quot;&quot;;</span><br><span class="line">                if(this.location==&#x27;center&#x27;&amp;&amp;index%2!=0)&#123;</span><br><span class="line">                    _class=&#x27;right-info&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">                return _class;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">    .time-line-wrap&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        overflow-x: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    .time-line-wrap&#123;</span><br><span class="line">        font-family: sans-serif;</span><br><span class="line">        .time-line&#123;</span><br><span class="line">            padding: 4% 1%;</span><br><span class="line">            .time-line-title&#123;</span><br><span class="line">                font-size: 25px;</span><br><span class="line">                font-weight: 800;</span><br><span class="line">                text-align: center;</span><br><span class="line">                margin-bottom: 15px;</span><br><span class="line">            &#125;</span><br><span class="line">            // 中间的轴</span><br><span class="line">            .time-line-container&#123;</span><br><span class="line">                padding: 3% 1%;</span><br><span class="line">                position: relative;</span><br><span class="line">                &amp;::before&#123;</span><br><span class="line">                    content: &#x27;&#x27;;</span><br><span class="line">                    position: absolute;</span><br><span class="line">                    top: 0;</span><br><span class="line">                    left: 0;</span><br><span class="line">                    right: 0;</span><br><span class="line">                    margin: 0 auto;</span><br><span class="line">                    height: 100%;</span><br><span class="line">                    width: 4px;</span><br><span class="line">                    background: #1177dd;</span><br><span class="line">                &#125;</span><br><span class="line">                .time-line-list&#123;</span><br><span class="line">                    width: 100%;</span><br><span class="line">                    .time-line-info&#123;    </span><br><span class="line">                        position: relative;</span><br><span class="line">                        .line-info-content&#123;</span><br><span class="line">                            will-change: auto;</span><br><span class="line">                            width: 43%;</span><br><span class="line">                            display: flex;</span><br><span class="line">                            flex-direction: column;</span><br><span class="line">                            .line-on-round&#123;</span><br><span class="line">                                height: 20px;</span><br><span class="line">                                width: 20px;</span><br><span class="line">                                border: 4px solid #1177dd;</span><br><span class="line">                                border-radius: 50%;</span><br><span class="line">                                background: #fff;</span><br><span class="line">                                position: absolute;</span><br><span class="line">                                left: 0;</span><br><span class="line">                                right: 0;</span><br><span class="line">                                margin: 0 auto;</span><br><span class="line">                                top: 50px;</span><br><span class="line">                                box-shadow: 0px 2px 1px 1px rgba(0,0,0,.1);</span><br><span class="line">                                z-index: 10;</span><br><span class="line">                                &amp;.come-ani&#123;</span><br><span class="line">                                    animation: come-round .8s ease-in-out;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            .info-content-wrap&#123;</span><br><span class="line">                                position: relative;</span><br><span class="line">                                .info-title&#123;</span><br><span class="line">                                    min-height: 30px;</span><br><span class="line">                                    word-break: break-word;</span><br><span class="line">                                    text-align: right;</span><br><span class="line">                                    margin: 5px 0;</span><br><span class="line">                                    font-size: 34rpx;</span><br><span class="line">                                    font-weight: 500;</span><br><span class="line">                                    span&#123;color: #1177dd;font-size: 38rpx;font-weight: 600;padding-left: 3px;&#125;</span><br><span class="line"></span><br><span class="line">                                &#125;</span><br><span class="line">                                .info-content&#123;</span><br><span class="line">                                    box-shadow: 1px 1px 1px 1px #d7e4ed;</span><br><span class="line">                                    border-radius: 8px;</span><br><span class="line">                                    padding: 5px;</span><br><span class="line">                                    min-height: 40px;</span><br><span class="line">                                    position: relative; </span><br><span class="line">                                    .info-txt&#123;&#125;</span><br><span class="line">                                    &amp;::before&#123;</span><br><span class="line">                                        content: &#x27;&#x27;;</span><br><span class="line">                                        border: 7px solid;</span><br><span class="line">                                        border-color: transparent transparent transparent #aaa;</span><br><span class="line">                                        position: absolute;</span><br><span class="line">                                        left: 100%;</span><br><span class="line">                                        top: 18px;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                &amp;.come-ani&#123;</span><br><span class="line">                                    animation: come-in-left .6s ease-in-out;</span><br><span class="line">                                &#125;       </span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .right-info&#123;</span><br><span class="line">                        transform: rotateY(180deg);</span><br><span class="line">                        .line-info-content&#123;</span><br><span class="line">                            .info-content-wrap&#123;</span><br><span class="line">                                .info-title&#123;</span><br><span class="line">                                    transform: rotateY(180deg);</span><br><span class="line">                                    text-align: left;</span><br><span class="line">                                &#125;</span><br><span class="line">                                .info-content&#123;</span><br><span class="line">                                    .info-txt&#123;transform: rotateY(180deg)&#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 轴在左边</span><br><span class="line">            .left-time-line&#123;</span><br><span class="line">                &amp;::before&#123;</span><br><span class="line">                    margin: 0;</span><br><span class="line">                    left: 15px;</span><br><span class="line">                &#125;</span><br><span class="line">                .time-line-list&#123;</span><br><span class="line">                    .time-line-info&#123;    </span><br><span class="line">                        .line-info-content&#123;</span><br><span class="line">                            width: auto;</span><br><span class="line">                            .line-on-round&#123;</span><br><span class="line">                                left: 0;</span><br><span class="line">                                margin: 0;</span><br><span class="line">                            &#125;</span><br><span class="line">                            .info-content-wrap&#123;</span><br><span class="line">                                margin-left: 45px;</span><br><span class="line">                                margin-bottom: 15px;</span><br><span class="line">                                .info-title&#123;</span><br><span class="line">                                    text-align: left;   </span><br><span class="line">                                &#125;</span><br><span class="line">                                .info-content&#123;</span><br><span class="line">                                    &amp;::before&#123;</span><br><span class="line">                                        border-color: transparent #aaa transparent transparent;</span><br><span class="line">                                        left: -15px;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                &amp;.come-ani&#123;</span><br><span class="line">                                    animation: come-in-right .6s ease-in-out;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 轴在右边</span><br><span class="line">            .right-time-line&#123;</span><br><span class="line">                &amp;::before&#123;</span><br><span class="line">                    margin: 0;</span><br><span class="line">                    left: 92.8%;</span><br><span class="line">                &#125;</span><br><span class="line">                .time-line-list&#123;</span><br><span class="line">                    .time-line-info&#123;    </span><br><span class="line">                        .line-info-content&#123;</span><br><span class="line">                            width: auto;</span><br><span class="line">                            .line-on-round&#123;</span><br><span class="line">                                left: 90%;</span><br><span class="line">                                margin: 0;</span><br><span class="line">                            &#125;</span><br><span class="line">                            .info-content-wrap&#123;</span><br><span class="line">                                margin-right: 55px;</span><br><span class="line">                                margin-bottom: 15px;</span><br><span class="line">                                .info-content&#123;</span><br><span class="line">                                    &amp;::before&#123;</span><br><span class="line">                                        border-color: transparent transparent transparent #aaa;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @keyframes come-in-left &#123;</span><br><span class="line">        0% &#123;</span><br><span class="line">            transform: translateX(-120%);</span><br><span class="line">        &#125;</span><br><span class="line">        70% &#123;</span><br><span class="line">            transform: translateX(8%);</span><br><span class="line">        &#125;</span><br><span class="line">        100% &#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @keyframes come-in-right &#123;</span><br><span class="line">        0% &#123;</span><br><span class="line">            transform: translateX(120%);</span><br><span class="line">        &#125;</span><br><span class="line">        70% &#123;</span><br><span class="line">            transform: translateX(-8%);</span><br><span class="line">        &#125;</span><br><span class="line">        100% &#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @keyframes come-round &#123;</span><br><span class="line">        0% &#123;</span><br><span class="line">            transform: scale(0);</span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        40% &#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        60% &#123;</span><br><span class="line">            transform: scale(1.2);</span><br><span class="line">        &#125;</span><br><span class="line">        100% &#123;</span><br><span class="line">            transform: scale(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>参数列表：</strong></p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>time_line_list</td><td>时间轴数据</td></tr><tr><td>HEIGHT</td><td>屏幕高度</td></tr><tr><td>result</td><td>监听的结果</td></tr><tr><td>current</td><td>当前在屏幕内的</td></tr><tr><td>sum</td><td>加载完成个数</td></tr><tr><td>comeani</td><td>入场动画</td></tr><tr><td>isScroll</td><td>是否加载动画</td></tr><tr><td>location</td><td>时间轴位置：left：左边；center：中间；right：右边；</td></tr><tr><td>title</td><td>主文本</td></tr><tr><td><strong>效果图：</strong></td><td></td></tr><tr><td><img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/front/wexx/uniapp/Uniapp%E6%97%B6%E9%97%B4%E8%BD%B4.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/front/wexx/uniapp/Uniapp%E6%97%B6%E9%97%B4%E8%BD%B4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Uniapp时间轴.png"></td><td></td></tr></tbody></table><h2 id="文件预览"><a href="#文件预览" class="headerlink" title="文件预览"></a>文件预览</h2><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">filPereview</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fileName = <span class="string">&#x27;test.pdf&#x27;</span></span><br><span class="line">    uni.<span class="title function_">downloadFile</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://eirmv2.zjdzcg.com/2023-10-13.pdf&quot;</span>,</span><br><span class="line">        <span class="attr">filePath</span>: wx.<span class="property">env</span>.<span class="property">USER_DATA_PATH</span> + <span class="string">&#x27;/&#x27;</span> + fileName,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> filePath = res.<span class="property">tempFilePath</span>;</span><br><span class="line">            uni.<span class="title function_">openDocument</span>(&#123;</span><br><span class="line">                <span class="attr">filePath</span>: wx.<span class="property">env</span>.<span class="property">USER_DATA_PATH</span> + <span class="string">&#x27;/&#x27;</span> + fileName,</span><br><span class="line">                fileName,</span><br><span class="line">                <span class="attr">showMenu</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开文档成功&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件分享"><a href="#文件分享" class="headerlink" title="文件分享"></a>文件分享</h2><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fileShare</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> downloadUrl = <span class="string">&#x27;http://eirmv2.zjdzcg.com/2023-10-13.pdf&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> fileName = <span class="string">&#x27;test.pdf&#x27;</span>﻿;</span><br><span class="line">    uni.<span class="title function_">downloadFile</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: downloadUrl,</span><br><span class="line">      <span class="attr">filePath</span>: wx.<span class="property">env</span>.<span class="property">USER_DATA_PATH</span> + <span class="string">&#x27;/&#x27;</span> + fileName,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;            </span><br><span class="line">        uni.<span class="title function_">shareFileMessage</span>(&#123;</span><br><span class="line">          <span class="attr">filePath</span>: wx.<span class="property">env</span>.<span class="property">USER_DATA_PATH</span> + <span class="string">&#x27;/&#x27;</span> + fileName,</span><br><span class="line">          fileName</span><br><span class="line">        &#125;)    </span><br><span class="line">      &#125;   </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客服"><a href="#客服" class="headerlink" title="客服"></a>客服</h2><p><strong>代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button style=&quot;height: 40px; width: 33.3%; font-size: 14px; line-height: 40px;&quot; open-type=&quot;contact&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><strong>描述：uniapp中button自带属性：</strong> open-type&#x3D;”contact”时启动客服功能（<strong>注：</strong> 客服人员需在微信开放平台添加）</p><h2 id="仿朋友圈发布"><a href="#仿朋友圈发布" class="headerlink" title="仿朋友圈发布"></a>仿朋友圈发布</h2><p><strong>代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;!-- 输入框 --&gt;</span><br><span class="line">            &lt;textarea placeholder=&quot;想说什么...&quot; @blur=&quot;inputBlur&quot; :focus=&quot;inputFocus&quot; :auto-height=&quot;true&quot;</span><br><span class="line">                :show-confirm-bar=&quot;false&quot; maxlength=&quot;1500&quot; v-model=&quot;form.content&quot; class=&quot;post-txt&quot;&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 上传图片or视频 --&gt;</span><br><span class="line">            &lt;view class=&quot;img-list&quot;&gt;</span><br><span class="line">                &lt;view v-for=&quot;(item,index) in form.imageList&quot; :key=&#x27;index&#x27; class=&quot;img-list-box&quot;&gt;</span><br><span class="line">                    &lt;image v-if=&quot;!form.video&quot; :src=&quot;item&quot; class=&quot;img-item&quot; @tap=&quot;imgTypeSelect(item)&quot;&gt;&lt;/image&gt;</span><br><span class="line">                    &lt;video v-else :src=&quot;item&quot; @longpress=&quot;videoTypeSelect(item)&quot;&gt;&lt;/video&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">                &lt;view v-if=&quot;form.imageList.length &lt; 9 &amp;&amp; !form.video&quot; class=&quot;icon-camera&quot; @tap=&quot;selectType&quot;&gt;</span><br><span class="line">                    &lt;uni-icons type=&quot;camera&quot; size=&quot;27&quot; color=#D3D4D6&gt;&lt;/uni-icons&gt;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 选择位置 --&gt;</span><br><span class="line">            &lt;view @click=&quot;chooseLocation&quot; class=&quot;choose-location&quot;&gt;</span><br><span class="line">                &lt;u-icon name=&quot;map&quot; size=&quot;30rpx&quot;&gt;&lt;/u-icon&gt;</span><br><span class="line">                &lt;text class=&quot;txt&quot;&gt;&#123;&#123; form.address || &#x27;你在哪里?&#x27; &#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;!-- 选择板块 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 底部确定按钮 --&gt;</span><br><span class="line">        &lt;view @click=&quot;clickCreate&quot; class=&quot;yue-base-button&quot;&gt;</span><br><span class="line">            &lt;view&gt;确定发布&lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                // 默认输入框获得焦点</span><br><span class="line">                inputFocus: true,</span><br><span class="line">                form: &#123;</span><br><span class="line">                    content: &#x27;&#x27;,</span><br><span class="line">                    address: &#x27;&#x27;,</span><br><span class="line">                    imageList: [],</span><br><span class="line">                    saveSize: [], </span><br><span class="line">                    video: &#x27;&#x27;,</span><br><span class="line">                &#125;,      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // 选择媒体类型</span><br><span class="line">            selectType() &#123;</span><br><span class="line">                let that = this</span><br><span class="line">                let itemL = that.form.imageList.length!=0 ? !that.form.imageList.video ? [&#x27;拍照&#x27;, &#x27;从相册选择照片&#x27;]: &#x27;&#x27; : [&#x27;拍照&#x27;, &#x27;从相册选择照片&#x27;, &#x27;从相册选择视频&#x27;]</span><br><span class="line">                uni.showActionSheet(&#123;</span><br><span class="line">                    itemList: itemL,</span><br><span class="line">                    success: function(res) &#123;</span><br><span class="line">                        if (res.tapIndex == 0) &#123;</span><br><span class="line">                            uni.chooseImage(&#123;</span><br><span class="line">                                sourceType: [&#x27;camera&#x27;], // 拍照选择</span><br><span class="line">                                success: function(res) &#123;</span><br><span class="line">                                    that.form.imageList.push(res.tempFilePaths)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (res.tapIndex == 1) &#123;</span><br><span class="line">                            uni.chooseImage(&#123;</span><br><span class="line">                                count: 9 - that.form.imageList.length,</span><br><span class="line">                                sourceType: [&#x27;album&#x27;], //从相册选择</span><br><span class="line">                                success: function(res) &#123;</span><br><span class="line">                                    res.tempFilePaths.forEach((path,index) =&gt; &#123;</span><br><span class="line">                                        res.tempFiles.forEach((item,idx) =&gt; &#123;</span><br><span class="line">                                            if(that.form.saveSize.includes(item.size))&#123;</span><br><span class="line">                                                console.log(&#x27;size已经存在！！！&#x27;);</span><br><span class="line">                                            &#125;else if(index == idx)&#123;</span><br><span class="line">                                                    that.form.imageList.push(path);</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;)</span><br><span class="line"></span><br><span class="line">                                    &#125;)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (res.tapIndex == 2) &#123;</span><br><span class="line">                            uni.chooseVideo(&#123;</span><br><span class="line">                                sourceType: [&#x27;album&#x27;], // 从相册选择视频</span><br><span class="line">                                success: function(res) &#123;</span><br><span class="line">                                    if (res.size &gt; 20971520) &#123;</span><br><span class="line">                                        uni.showToast(&#123;</span><br><span class="line">                                            title: &quot;视频文件过大&quot;,</span><br><span class="line">                                            duration: 2000</span><br><span class="line">                                        &#125;);</span><br><span class="line">                                        return;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    that.form.video = true;</span><br><span class="line">                                    that.form.imageList.push(res.tempFilePath)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // 图片状态选择</span><br><span class="line">            imgTypeSelect(item) &#123;</span><br><span class="line">                let that = this</span><br><span class="line">                uni.showActionSheet(&#123;</span><br><span class="line">                    itemList: [&#x27;预览&#x27;, &#x27;删除&#x27;],</span><br><span class="line">                    success: function(res) &#123;</span><br><span class="line">                        if (res.tapIndex == 0) &#123;</span><br><span class="line">                            uni.previewImage(&#123;</span><br><span class="line">                                current: item,</span><br><span class="line">                                urls: that.form.imageList</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (res.tapIndex == 1) &#123;</span><br><span class="line">                            let index = that.form.imageList.findIndex(url =&gt; url === item);</span><br><span class="line">                            if (index !== -1) &#123;</span><br><span class="line">                                that.form.imageList.splice(index, 1);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // 视频状态选择</span><br><span class="line">            videoTypeSelect()&#123;</span><br><span class="line">                uni.showActionSheet(&#123;</span><br><span class="line">                    itemList: [&#x27;删除&#x27;],</span><br><span class="line">                    success: function(res) &#123;</span><br><span class="line">                        if (res.tapIndex == 0) &#123;</span><br><span class="line">                            let index = that.form.imageList.findIndex(url =&gt; url === item);</span><br><span class="line">                            if (index !== -1) &#123;</span><br><span class="line">                                that.form.imageList.splice(index, 1);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // 文字内容</span><br><span class="line">            inputBlur(event) &#123;</span><br><span class="line">                this.inputCursor = event.detail.cursor;</span><br><span class="line">                this.inputFocus = false;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // 位置选择</span><br><span class="line">            chooseLocation() &#123;</span><br><span class="line">                let that = this;</span><br><span class="line">                uni.chooseLocation(&#123;</span><br><span class="line">                    success: function(res) &#123;</span><br><span class="line">                        that.form.address = res.name;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // 发布</span><br><span class="line">            clickCreate() &#123;</span><br><span class="line">                // console.log(this.form); </span><br><span class="line">                console.log(this.form.saveSize);</span><br><span class="line">                if (!this.form.content) &#123;</span><br><span class="line">                    uni.showToast(&#123;</span><br><span class="line">                        title: &quot;请输入内容&quot;,</span><br><span class="line">                        icon: &quot;error&quot;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                this.$request.post(&quot;/api/article/save&quot;, &#123;</span><br><span class="line">                    &quot;type&quot;: 1,</span><br><span class="line">                    &quot;content&quot;: this.form.content,</span><br><span class="line">                &#125;).then((res) =&gt; &#123;</span><br><span class="line">                    if (res.message == &#x27;保存成功&#x27;) &#123;</span><br><span class="line">                        uni.showToast(&#123;</span><br><span class="line">                            title: &#x27;发布成功&#x27;,</span><br><span class="line">                            duration: 1500,</span><br><span class="line">                            mask: true</span><br><span class="line">                        &#125;);</span><br><span class="line">                        setTimeout(() =&gt; &#123;</span><br><span class="line">                            uni.redirectTo(&#123;</span><br><span class="line">                                url: &#x27;/pages/community/community&#x27;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;, 1500)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    .content &#123;</span><br><span class="line">        height: 100vh;</span><br><span class="line">        background-color: #FFFFFF;</span><br><span class="line">        border-radius: 30upx 30upx 0upx 0upx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .container &#123;</span><br><span class="line">        padding: 20rpx 40rpx;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .post-txt &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        min-height: 300rpx;</span><br><span class="line">        line-height: 1rpx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 选择位置 */</span><br><span class="line">    .choose-location &#123;</span><br><span class="line">        display: inline-flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">        font-size: 28rpx;</span><br><span class="line">        border-radius: 100rpx;</span><br><span class="line">        padding: 10rpx 20rpx;</span><br><span class="line">        margin-left: 5rpx;</span><br><span class="line">        line-height: 1;</span><br><span class="line">        color: #616161;</span><br><span class="line"></span><br><span class="line">        .txt &#123;</span><br><span class="line">            margin-left: 10rpx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .yue-base-button &#123;</span><br><span class="line">        position: fixed;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        padding: 40rpx 0;</span><br><span class="line">        z-index: 3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .yue-base-button view &#123;</span><br><span class="line">        width: 560rpx;</span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 96rpx;</span><br><span class="line">        line-height: 96rpx;</span><br><span class="line">        border-radius: 96rpx;</span><br><span class="line">        font-size: 32rpx;</span><br><span class="line">        font-weight: 400;</span><br><span class="line">        color: #FFFFFF;</span><br><span class="line">        background: #07C062;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 相机icon</span><br><span class="line">    .icon-camera &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        width: 210rpx;</span><br><span class="line">        height: 210rpx;</span><br><span class="line">        border-radius: 6rpx;</span><br><span class="line">        margin: 5rpx 0rpx 0rpx 5rpx;</span><br><span class="line">        background-color: #f4f5f7;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 媒体列表</span><br><span class="line">    .img-list &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        margin-bottom: 20rpx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .img-list-box &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .img-item &#123;</span><br><span class="line">        width: 210rpx;</span><br><span class="line">        height: 210rpx;</span><br><span class="line">        margin: 5rpx;</span><br><span class="line">        border-radius: 6rpx</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果图：</strong><br>    <img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/front/wexx/uniapp/Uniapp%E4%BB%BF%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%8F%91%E5%B8%83%E7%95%8C%E9%9D%A2.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/front/wexx/uniapp/Uniapp%E4%BB%BF%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%8F%91%E5%B8%83%E7%95%8C%E9%9D%A2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Uniapp仿朋友圈发布界面.png"></p><h2 id="自定义导航栏"><a href="#自定义导航栏" class="headerlink" title="自定义导航栏"></a>自定义导航栏</h2><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;nav-box&quot; @click=&quot;getHeadHeight&quot; :style=&quot;&#123;&#x27;height&#x27;: height + &#x27;px&#x27;, &#x27;background&#x27; : bgColor&#125;&quot;&gt;</span><br><span class="line">        &lt;!-- 状态栏占位 --&gt;</span><br><span class="line">        &lt;view class=&quot;status_bar&quot; :style=&quot;&#123;&#x27;height&#x27;: statusBarHeight + &#x27;px&#x27;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">        &lt;!-- 导航内容 --&gt;</span><br><span class="line">        &lt;view class=&quot;nav-main&quot; :style=&quot;&#123;&#x27;height&#x27;: navBarHeight + &#x27;px&#x27;&#125;&quot;&gt;</span><br><span class="line">            &lt;!-- 回退图标 --&gt;</span><br><span class="line">            &lt;image src=&quot;../static/images/back.png&quot; mode=&quot;&quot; class=&quot;back&quot; @click=&quot;back(path)&quot; v-if=&quot;backIcon == true&quot;&gt;</span><br><span class="line">            &lt;image src=&quot;../static/images/back.png&quot; mode=&quot;&quot; class=&quot;back&quot; @click=&quot;backInfo()&quot; v-if=&quot;loginbackIcon == true&quot;&gt;</span><br><span class="line">            &lt;/image&gt;</span><br><span class="line">            &lt;!-- 标题 --&gt;</span><br><span class="line">            &lt;text class=&quot;nav-main-title&quot; :style=&quot;!backIcon ? &#x27;display: block; padding-right: 20rpx;&#x27; : &#x27;&#x27;&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;!-- &lt;text class=&quot;nav-main-title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/text&gt; --&gt;</span><br><span class="line">            &lt;!-- 弹性盒占位 --&gt;</span><br><span class="line">            &lt;view v-if=&quot;backIcon&quot;&gt;&lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            bgColor: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &quot;#fff&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            backIcon: &#123;</span><br><span class="line">                type: Boolean,</span><br><span class="line">                default: false</span><br><span class="line">            &#125;,</span><br><span class="line">            loginbackIcon: &#123;</span><br><span class="line">                type: Boolean,</span><br><span class="line">                default: false</span><br><span class="line">            &#125;,</span><br><span class="line">            title: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &quot;我的&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            path: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                height: 0,</span><br><span class="line">                menuButtonRect: &#123;&#125;,</span><br><span class="line">                statusBarHeight: 0,</span><br><span class="line">                navBarHeight: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.getHeight();</span><br><span class="line">            this.getHeadHeight()</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getHeadHeight() &#123;</span><br><span class="line">                this.$emit(&#x27;getHeadHeight&#x27;, this.height)</span><br><span class="line">            &#125;,</span><br><span class="line">            //计算导航栏总高度</span><br><span class="line">            getHeight() &#123;</span><br><span class="line">                // 判断获取微信小程序胶囊API是否可用</span><br><span class="line">                if (uni.canIUse(&#x27;getMenuButtonBoundingClientRect&#x27;)) &#123;</span><br><span class="line">                    let sysInfo = uni.getSystemInfoSync();</span><br><span class="line">                    this.statusBarHeight = sysInfo.statusBarHeight;</span><br><span class="line">                    let rect = uni.getMenuButtonBoundingClientRect();</span><br><span class="line">                    this.menuButtonRect = JSON.parse(JSON.stringify(rect));</span><br><span class="line">                    let navBarHeight = (rect.top - sysInfo.statusBarHeight) * 2 + rect.height;</span><br><span class="line">                    this.navBarHeight = navBarHeight;</span><br><span class="line">                    this.height = sysInfo.statusBarHeight + navBarHeight;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    uni.showToast(&#123;</span><br><span class="line">                        title: &#x27;您的微信版本过低，界面可能会显示不正常&#x27;,</span><br><span class="line">                        icon: &#x27;none&#x27;,</span><br><span class="line">                        duration: 4000</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //返回上一级</span><br><span class="line">            back(path) &#123;</span><br><span class="line">                uni.navigateBack()</span><br><span class="line">            &#125;,</span><br><span class="line">            // 返回首页</span><br><span class="line">            backInfo()&#123;</span><br><span class="line">                uni.switchTab(&#123;</span><br><span class="line">                    url: &#x27;/pages/info/info&#x27;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    .nav-box&#123;</span><br><span class="line">        width: 100vw;</span><br><span class="line">        .status_bar &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .nav-main &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            padding: 0 40rpx 0 20rpx;</span><br><span class="line"></span><br><span class="line">            .back &#123;</span><br><span class="line">                width: 50rpx;</span><br><span class="line">                height: 50rpx;</span><br><span class="line">                margin-right: 20rpx;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .nav-main-title &#123;</span><br><span class="line">                color: #000;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">                font-size: 36rpx;</span><br><span class="line">                width: 100%;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="底部"><a href="#底部" class="headerlink" title="底部"></a>底部</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;tabBar&quot;&gt;</span><br><span class="line">        &lt;view v-for=&quot;(item,index) in tabBar&quot; :key=&quot;item.url&quot; class=&quot;tabbar_item&quot;</span><br><span class="line">            :class=&quot;&#123;&#x27;active&#x27;:item.url == currentPage&#125;&quot; @click=&quot;navTo(item)&quot;&gt;</span><br><span class="line">            &lt;image v-if=&quot;item.url == currentPage&quot; :src=&quot;item.imgClick&quot; mode=&quot;&quot;&gt;&lt;/image&gt;</span><br><span class="line">            &lt;image v-else :src=&quot;item.imgNormal&quot; mode=&quot;&quot;&gt;&lt;/image&gt;</span><br><span class="line">            &lt;view class=&quot;text&quot;&gt;&#123;&#123;item.text&#125;&#125;&lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            currentPage: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &#x27;index&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                tabBar: [&#123;</span><br><span class="line">                        url: &#x27;info&#x27;,</span><br><span class="line">                        // text:&#x27;资料&#x27;,</span><br><span class="line">                        imgNormal: &#x27;/static/tabBar/infoNoSelect.png&#x27;,</span><br><span class="line">                        imgClick: &#x27;/static/tabBar/infoSelected.png&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        url: &#x27;project&#x27;,</span><br><span class="line">                        // text:&#x27;项目&#x27;,</span><br><span class="line">                        imgNormal: &#x27;/static/tabBar/projectNoSelect.png&#x27;,</span><br><span class="line">                        imgClick: &#x27;/static/tabBar/projectSelected.png&#x27;</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        url: &#x27;mine&#x27;,</span><br><span class="line">                        // text:&#x27;我的&#x27;,</span><br><span class="line">                        imgNormal: &#x27;/static/tabBar/mineNoSelect.png&#x27;,</span><br><span class="line">                        imgClick: &#x27;/static/tabBar/mineSelected.png&#x27;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            uni.hideTabBar(&#123;&#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            navTo(item) &#123;</span><br><span class="line">                if (item.url !== this.currentPage) &#123;</span><br><span class="line">                    var isUrl = `/pages/$&#123;item.url&#125;/$&#123;item.url&#125;`</span><br><span class="line">                    const that = this</span><br><span class="line">                    uni.switchTab(&#123;</span><br><span class="line">                        url: isUrl</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.$parent.toTop()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    // 导航栏设置</span><br><span class="line">    $isRadius: 20upx; </span><br><span class="line">    $isWidth: 100vw; </span><br><span class="line">    $isBorder: 0px solid white; </span><br><span class="line">    $isBg: white; </span><br><span class="line">    $chooseTextColor: #000; </span><br><span class="line">    $chooseBgColor: transparent; </span><br><span class="line">    $normalTextColor: #999;</span><br><span class="line"></span><br><span class="line">    .tabBar &#123;</span><br><span class="line">        width: $isWidth;</span><br><span class="line">        height: 70px;</span><br><span class="line">        position: fixed;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        z-index: 998;</span><br><span class="line">        background-color: $isBg;</span><br><span class="line">        color: $normalTextColor;</span><br><span class="line">        border-left: $isBorder;</span><br><span class="line">        border-top: $isBorder;</span><br><span class="line">        border-right: $isBorder;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        overflow: hidden;</span><br><span class="line"></span><br><span class="line">        .tabbar_item &#123;</span><br><span class="line">            width: 25%;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line"></span><br><span class="line">            &amp;.active &#123;</span><br><span class="line">                border-left: $isBorder;</span><br><span class="line">                border-top: $isBorder;</span><br><span class="line">                background: $chooseBgColor;</span><br><span class="line">                color: $chooseTextColor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        image &#123;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 31px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>注：使用的使用直接引入注册使用组件就行</strong></p><h2 id="滚动区域设置"><a href="#滚动区域设置" class="headerlink" title="滚动区域设置"></a>滚动区域设置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;scroll-view scroll-y=&quot;true&quot; :style=&quot;&#x27;height: calc(100vh - &#x27; + (HeadNavHeight + 184) + &#x27;px);&#x27;&quot;</span><br><span class="line">    @scrolltolower=&quot;loadingPulldown&quot;&gt;</span><br><span class="line">    &lt;!-- 项目项 --&gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">        &lt;view class=&quot;proItem&quot; v-for=&quot;(item, index) in searchResult&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;!-- 序号 --&gt;</span><br><span class="line">            &lt;view class=&quot;proItemNum&quot;&gt;</span><br><span class="line">                &#123;&#123;index + 1&#125;&#125;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">            &lt;view class=&quot;proItemCenter&quot;&gt;</span><br><span class="line">                &lt;view class=&quot;proItemName&quot;&gt;</span><br><span class="line">                    项目名称：&#123;&#123;item.project_name&#125;&#125;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">                &lt;view class=&quot;proItemcTime&quot;&gt;</span><br><span class="line">                    创建时间：&#123;&#123;item.create_time&#125;&#125;</span><br><span class="line">                &lt;/view&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">            &lt;view class=&quot;proItemRight&quot; @tap=&quot;toDetail(index)&quot;&gt;</span><br><span class="line">                查看详情</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure><p><strong>描述：</strong> 使用<code>&lt;scroll-view&gt;</code>标签，并使用calc设置可滚动区域高度、加上<code>scroll-y=&quot;true&quot;</code>属性使其在Y轴上出现滚动条即可。</p><h2 id="携带参数跳转详情界面"><a href="#携带参数跳转详情界面" class="headerlink" title="携带参数跳转详情界面"></a>携带参数跳转详情界面</h2><p>跳转页代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toDetail</span>(<span class="params">index</span>)&#123;</span><br><span class="line">    uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/pages/projectDetail/projectDetail?id=&#x27;</span> + index,</span><br><span class="line">        <span class="comment">// url: &#x27;/pages/projectDetail/projectDetail?id=&#x27; + index + &quot;&amp;name&quot; + name,</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>详情页代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onLoad</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = e.<span class="property">id</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = e.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>描述：</strong> 在触发跳转详情界面的方法时，使用uni.navigateTo();进行详情路由跳转，在跳转的路径后面<strong>使用?携带要传递的参数</strong>（需要携带多个参数时使用&amp;拼接）即可，而<strong>详情界面</strong>的onLoad()生命周期中使用参数e进行接收。<br><strong>注：</strong> 使用uni.navigateTo();的url中的路由需在pages.json中进行路由添加。</p>]]></content>
    
    
    <summary type="html">Uniapp 小程序开发过程中使用到的功能实现总结</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Uniapp" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Uniapp/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Uniapp" scheme="https://fanxing28.github.io/tags/Uniapp/"/>
    
  </entry>
  
  <entry>
    <title>Uniapp 基础知识</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Uniapp/Uniapp%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%89%8D%E7%AB%AF/Uniapp/Uniapp%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-12-03T05:45:00.000Z</published>
    <updated>2023-12-03T06:23:19.430Z</updated>
    
    <content type="html"><![CDATA[<p><strong>官网介绍：</strong> <code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;飞书&#x2F;QQ&#x2F;快手&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台。</p><h1 id="底部导航栏（tabBar）"><a href="#底部导航栏（tabBar）" class="headerlink" title="底部导航栏（tabBar）"></a>底部导航栏（tabBar）</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;borderStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;black&quot;</span><span class="punctuation">,</span><span class="comment">//边框颜色</span></span><br><span class="line">    <span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span><span class="string">&quot;#F7F7F7&quot;</span><span class="punctuation">,</span><span class="comment">//背景颜色</span></span><br><span class="line">    <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span><span class="string">&quot;#dbdbdb&quot;</span><span class="punctuation">,</span><span class="comment">//默认颜色</span></span><br><span class="line">    <span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span><span class="string">&quot;#1296db&quot;</span><span class="punctuation">,</span><span class="comment">//选中的颜色</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/home_act.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span><span class="string">&quot;pages/home/index&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/community.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/community_act.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;社区&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span><span class="string">&quot;pages/community/index&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/publish.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/publish_act.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;发布&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span><span class="string">&quot;pages/publish/index&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/message.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/message_act.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;信息&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span><span class="string">&quot;pages/message/index&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/my.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;static/tabBar/my_act.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;我的&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span><span class="string">&quot;pages/my/index&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><strong>底部导航栏参数及描述：</strong></p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>tabBar</td><td>底部导航栏</td></tr><tr><td>borderStyle</td><td>边框颜色</td></tr><tr><td>backgroundColor</td><td>背景颜色</td></tr><tr><td>color</td><td>默认颜色</td></tr><tr><td>selectedColor</td><td>选中的颜色</td></tr><tr><td>list</td><td>导航栏列表</td></tr><tr><td>iconPath</td><td>未选择图标</td></tr><tr><td>selectedIconPath</td><td>选中图标</td></tr><tr><td>text</td><td>列表项文本</td></tr><tr><td>pagePath</td><td>列表项路径</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Uniapp" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/Uniapp/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Uniapp" scheme="https://fanxing28.github.io/tags/Uniapp/"/>
    
  </entry>
  
  <entry>
    <title>Github 绑定自己的域名(无须备案）</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%85%B6%E4%BB%96/Hexo/Github%20%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D(%E6%97%A0%E9%A1%BB%E5%A4%87%E6%A1%88%EF%BC%89/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%85%B6%E4%BB%96/Hexo/Github%20%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D(%E6%97%A0%E9%A1%BB%E5%A4%87%E6%A1%88%EF%BC%89/</id>
    <published>2023-12-03T05:23:00.000Z</published>
    <updated>2023-12-10T14:23:33.547Z</updated>
    
    <content type="html"><![CDATA[<p>现在常用的在阿里云购买的域名或者在腾讯云购买的域名。<br>下面以腾讯云购买的域名为列子详细介绍一下如何用github绑定自己域名<br>本文前提是你已经搭建好了博客，已经可以通过类似：<a href="https://fanxing28.github.io/%E7%9A%84%E6%96%B9%E6%B3%95%E8%AE%BF%E9%97%AE%E3%80%82">https://fanxing28.github.io/的方法访问。</a><br>具体步骤：</p><ol><li><strong>注册一个域名</strong><br> 如果你没有域名的话，可以先到阿里云：<code>https://mi.aliyun.com/</code> 购买一个域名，购买完成之后不用备案就可以。或者到腾讯云<code>https://buy.cloud.tencent.com/domain</code>等其他平台购买域名</li><li>在github仓库里<strong>添加CNAME文件</strong>并在文件中填写绑定的域名<br> <img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="github项目域名绑定创建CNAME文件.png"><br> 文件内容如下：（文件里填写要绑定的域名且不要包含Http:&#x2F;&#x2F;和www）就是直接填写购买的(例如：fanxing28.top)域名<br> <img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6%E5%A1%AB%E5%86%99.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6%E5%A1%AB%E5%86%99.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="github项目域名绑定创建CNAME文件填写.png"><br> 进入设置，找到 Custom domain添加域名后保存即可（添加CNAME文件并在文件中填写绑定的域名后应该会自动保存，看看有没有自动保存）<br> <img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6%E5%9F%9F%E5%90%8D%E4%BF%9D%E5%AD%98.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6%E5%9F%9F%E5%90%8D%E4%BF%9D%E5%AD%98.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="github项目域名绑定创建CNAME文件域名保存.png"></li><li><strong>添加域名解析</strong><br> ping你的<a href="http://github.io域名,得到一个ip;/">http://github.io域名，得到一个IP；</a><br> <img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6ping%E8%87%AA%E5%B7%B1%E7%9A%84githubio.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6ping%E8%87%AA%E5%B7%B1%E7%9A%84githubio.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="github项目域名绑定创建CNAME文件ping自己的githubio.png"></li><li><strong>修改你的域名解析记录</strong><br> 添加两个A记录，用得到的IP：<br> 一个主机记录为：“www”，一个为“@”，这样通过fanxing28.top和<a href="http://www.fanxing.top都能访问到你的博客了./">www.fanxing.top都能访问到你的博客了。</a><br> <img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0%E8%AE%B0%E5%BD%95.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/github%E9%A1%B9%E7%9B%AE%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0%E8%AE%B0%E5%BD%95.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="github项目域名绑定创建CNAME文件域名添加记录.png"></li><li><strong>等待你的 DNS 配置生效</strong><br>对DNS的配置不是立即生效的，<u>过10分钟</u>再去访问你的域名看看有没有配置成功 : )</li><li><strong>启用 HTTPS</strong><br>自 2018 年 5 月 1 日，Github 支持自定义域名的 HTTPS 请求了。<br>配置也相当简单，<u>只需要更新 DNS 配置里的 A 记录</u>，将其指向以下4个 IP 地址中的至少一个。</li></ol><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153<br>HTTPS 让你的网站和网站访客更安全，并且 Github 提供的这些 IP 地址自动将你的站点加入了 CDN，提高了访问速度。<br>并且还可以在 GiHub Pages 仓库的设置里勾选 **’Enforce HTTPS’**，这样<u>所有访问你站点的请求都会走 HTTPS</u>。<br><strong>最后访问你的域名：</strong> <a href="https://fanxing28.top/">https://fanxing28.top</a></li></ul>]]></content>
    
    
    <summary type="html">Github 绑定自己的域名(无须备案）</summary>
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Hexo" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/Hexo/"/>
    
    
    <category term="Github" scheme="https://fanxing28.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法 添加emoji表情</title>
    <link href="https://fanxing28.github.io/2023/12/03/%E5%85%B6%E4%BB%96/MarkDown/MarkDown%E8%AF%AD%E6%B3%95%20%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85/"/>
    <id>https://fanxing28.github.io/2023/12/03/%E5%85%B6%E4%BB%96/MarkDown/MarkDown%E8%AF%AD%E6%B3%95%20%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85/</id>
    <published>2023-12-03T03:31:00.000Z</published>
    <updated>2023-12-03T03:33:46.085Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown语法支持添加 <code>emoji</code> 表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情<br><strong>使用方式</strong>：<br>直接书写下方提供的相关表情的语法即可</p><blockquote><p>例：书写<code>:blush:</code>得到：:blush: </p></blockquote><h2 id="常用emoji表情推荐"><a href="#常用emoji表情推荐" class="headerlink" title="常用emoji表情推荐"></a>常用emoji表情推荐</h2><h3 id="一-人物"><a href="#一-人物" class="headerlink" title="一. 人物"></a>一. 人物</h3><table><thead><tr><th align="left">:blush: <code>:blush:</code></th><th align="left">:smiley: <code>:smiley:</code></th><th align="left">:relaxed: <code>:relaxed:</code></th></tr></thead><tbody><tr><td align="left">:smirk: <code>:smirk:</code></td><td align="left">:heart_eyes: <code>:heart_eyes:</code></td><td align="left">:kissing_heart: <code>:kissing_heart:</code></td></tr><tr><td align="left">:kissing_closed_eyes: <code>:kissing_closed_eyes:</code></td><td align="left">:flushed: <code>:flushed:</code></td><td align="left">:relieved: <code>:relieved:</code></td></tr><tr><td align="left">:satisfied: <code>:satisfied:</code></td><td align="left">:grin: <code>:grin:</code></td><td align="left">:wink: <code>:wink:</code></td></tr><tr><td align="left">:stuck_out_tongue_winking_eye: <code>:stuck_out_tongue_winking_eye:</code></td><td align="left">:stuck_out_tongue_closed_eyes: <code>:stuck_out_tongue_closed_eyes:</code></td><td align="left">:grinning: <code>:grinning:</code></td></tr><tr><td align="left">:kissing: <code>:kissing:</code></td><td align="left">:kissing_smiling_eyes: <code>:kissing_smiling_eyes:</code></td><td align="left">:stuck_out_tongue: <code>:stuck_out_tongue:</code></td></tr><tr><td align="left">:sleeping: <code>:sleeping:</code></td><td align="left">:worried: <code>:worried:</code></td><td align="left">:frowning: <code>:frowning:</code></td></tr><tr><td align="left">:anguished: <code>:anguished:</code></td><td align="left">:open_mouth: <code>:open_mouth:</code></td><td align="left">:grimacing: <code>:grimacing:</code></td></tr><tr><td align="left">:confused: <code>:confused:</code></td><td align="left">:hushed: <code>:hushed:</code></td><td align="left">:expressionless: <code>:expressionless:</code></td></tr><tr><td align="left">:unamused: <code>:unamused:</code></td><td align="left">:sweat_smile: <code>:sweat_smile:</code></td><td align="left">:sweat: <code>:sweat:</code></td></tr><tr><td align="left">:disappointed_relieved: <code>:disappointed_relieved:</code></td><td align="left">:weary: <code>:weary:</code></td><td align="left">:pensive: <code>:pensive:</code></td></tr><tr><td align="left">:disappointed: <code>:disappointed:</code></td><td align="left">:confounded: <code>:confounded:</code></td><td align="left">:fearful: <code>:fearful:</code></td></tr><tr><td align="left">:cold_sweat: <code>:cold_sweat:</code></td><td align="left">:persevere: <code>:persevere:</code></td><td align="left">:cry: <code>:cry:</code></td></tr><tr><td align="left">:sob: <code>:sob:</code></td><td align="left">:joy: <code>:joy:</code></td><td align="left">:astonished: <code>:astonished:</code></td></tr><tr><td align="left">:scream: <code>:scream:</code></td><td align="left">:smile: <code>:smile:</code></td><td align="left">:tired_face: <code>:tired_face:</code></td></tr><tr><td align="left">:angry: <code>:angry:</code></td><td align="left">:rage: <code>:rage:</code></td><td align="left">:triumph: <code>:triumph:</code></td></tr><tr><td align="left">:sleepy: <code>:sleepy:</code></td><td align="left">:yum: <code>:yum:</code></td><td align="left">:mask: <code>:mask:</code></td></tr><tr><td align="left">:sunglasses: <code>:sunglasses:</code></td><td align="left">:dizzy_face: <code>:dizzy_face:</code></td><td align="left">:imp: <code>:imp:</code></td></tr><tr><td align="left">:smiling_imp: <code>:smiling_imp:</code></td><td align="left">:neutral_face: <code>:neutral_face:</code></td><td align="left">:no_mouth: <code>:no_mouth:</code></td></tr><tr><td align="left">:innocent: <code>:innocent:</code></td><td align="left">:alien: <code>:alien:</code></td><td align="left">:yellow_heart: <code>:yellow_heart:</code></td></tr><tr><td align="left">:blue_heart: <code>:blue_heart:</code></td><td align="left">:purple_heart: <code>:purple_heart:</code></td><td align="left">:heart: <code>:heart:</code></td></tr><tr><td align="left">:green_heart: <code>:green_heart:</code></td><td align="left">:broken_heart: <code>:broken_heart:</code></td><td align="left">:heartbeat: <code>:heartbeat:</code></td></tr><tr><td align="left">:heartpulse: <code>:heartpulse:</code></td><td align="left">:two_hearts: <code>:two_hearts:</code></td><td align="left">:revolving_hearts: <code>:revolving_hearts:</code></td></tr><tr><td align="left">:cupid: <code>:cupid:</code></td><td align="left">:sparkling_heart: <code>:sparkling_heart:</code></td><td align="left">:sparkles: <code>:sparkles:</code></td></tr><tr><td align="left">:star: <code>:star:</code></td><td align="left">:star2: <code>:star2:</code></td><td align="left">:dizzy: <code>:dizzy:</code></td></tr><tr><td align="left">:boom: <code>:boom:</code></td><td align="left">:collision: <code>:collision:</code></td><td align="left">:anger: <code>:anger:</code></td></tr><tr><td align="left">:exclamation: <code>:exclamation:</code></td><td align="left">:question: <code>:question:</code></td><td align="left">:grey_exclamation: <code>:grey_exclamation:</code></td></tr><tr><td align="left">:grey_question: <code>:grey_question:</code></td><td align="left">:zzz: <code>:zzz:</code></td><td align="left">:dash: <code>:dash:</code></td></tr><tr><td align="left">:sweat_drops: <code>:sweat_drops:</code></td><td align="left">:notes: <code>:notes:</code></td><td align="left">:musical_note: <code>:musical_note:</code></td></tr><tr><td align="left">:fire: <code>:fire:</code></td><td align="left">:hankey: <code>:hankey:</code></td><td align="left">:poop: <code>:poop:</code></td></tr><tr><td align="left">:shit: <code>:shit:</code></td><td align="left">:+1: <code>:+1:</code></td><td align="left">:thumbsup: <code>:thumbsup:</code></td></tr><tr><td align="left">:-1: <code>:-1:</code></td><td align="left">:thumbsdown: <code>:thumbsdown:</code></td><td align="left">:ok_hand: <code>:ok_hand:</code></td></tr><tr><td align="left">:punch: <code>:punch:</code></td><td align="left">:facepunch: <code>:facepunch:</code></td><td align="left">:fist: <code>:fist:</code></td></tr><tr><td align="left">:v: <code>:v:</code></td><td align="left">:wave: <code>:wave:</code></td><td align="left">:hand: <code>:hand:</code></td></tr><tr><td align="left">:raised_hand: <code>:raised_hand:</code></td><td align="left">:open_hands: <code>:open_hands:</code></td><td align="left">:point_up: <code>:point_up:</code></td></tr><tr><td align="left">:point_down: <code>:point_down:</code></td><td align="left">:point_left: <code>:point_left:</code></td><td align="left">:point_right: <code>:point_right:</code></td></tr><tr><td align="left">:raised_hands: <code>:raised_hands:</code></td><td align="left">:pray: <code>:pray:</code></td><td align="left">:point_up_2: <code>:point_up_2:</code></td></tr><tr><td align="left">:clap: <code>:clap:</code></td><td align="left">:muscle: <code>:muscle:</code></td><td align="left">:metal: <code>:metal:</code></td></tr><tr><td align="left">:fu: <code>:fu:</code></td><td align="left">:walking: <code>:walking:</code></td><td align="left">:runner: <code>:runner:</code></td></tr><tr><td align="left">:running: <code>:running:</code></td><td align="left">:couple: <code>:couple:</code></td><td align="left">:family: <code>:family:</code></td></tr><tr><td align="left">:two_men_holding_hands: <code>:two_men_holding_hands:</code></td><td align="left">:two_women_holding_hands: <code>:two_women_holding_hands:</code></td><td align="left">:dancer: <code>:dancer:</code></td></tr><tr><td align="left">:dancers: <code>:dancers:</code></td><td align="left">:ok_woman: <code>:ok_woman:</code></td><td align="left">:no_good: <code>:no_good:</code></td></tr><tr><td align="left">:information_desk_person: <code>:information_desk_person:</code></td><td align="left">:raising_hand: <code>:raising_hand:</code></td><td align="left">:bride_with_veil: <code>:bride_with_veil:</code></td></tr><tr><td align="left">:person_with_pouting_face: <code>:person_with_pouting_face:</code></td><td align="left">:person_frowning: <code>:person_frowning:</code></td><td align="left">:bow: <code>:bow:</code></td></tr><tr><td align="left">:laughing: <code>:laughing:</code></td><td align="left">:couple_with_heart: <code>:couple_with_heart:</code></td><td align="left">:massage: <code>:massage:</code></td></tr><tr><td align="left">:haircut: <code>:haircut:</code></td><td align="left">:nail_care: <code>:nail_care:</code></td><td align="left">:boy: <code>:boy:</code></td></tr><tr><td align="left">:girl: <code>:girl:</code></td><td align="left">:woman: <code>:woman:</code></td><td align="left">:man: <code>:man:</code></td></tr><tr><td align="left">:baby: <code>:baby:</code></td><td align="left">:older_woman: <code>:older_woman:</code></td><td align="left">:older_man: <code>:older_man:</code></td></tr><tr><td align="left">:person_with_blond_hair: <code>:person_with_blond_hair:</code></td><td align="left">:man_with_gua_pi_mao: <code>:man_with_gua_pi_mao:</code></td><td align="left">:man_with_turban: <code>:man_with_turban:</code></td></tr><tr><td align="left">:construction_worker: <code>:construction_worker:</code></td><td align="left">:cop: <code>:cop:</code></td><td align="left">:angel: <code>:angel:</code></td></tr><tr><td align="left">:princess: <code>:princess:</code></td><td align="left">:smiley_cat: <code>:smiley_cat:</code></td><td align="left">:smile_cat: <code>:smile_cat:</code></td></tr><tr><td align="left">:heart_eyes_cat: <code>:heart_eyes_cat:</code></td><td align="left">:kissing_cat: <code>:kissing_cat:</code></td><td align="left">:smirk_cat: <code>:smirk_cat:</code></td></tr><tr><td align="left">:scream_cat: <code>:scream_cat:</code></td><td align="left">:crying_cat_face: <code>:crying_cat_face:</code></td><td align="left">:joy_cat: <code>:joy_cat:</code></td></tr><tr><td align="left">:pouting_cat: <code>:pouting_cat:</code></td><td align="left">:japanese_ogre: <code>:japanese_ogre:</code></td><td align="left">:japanese_goblin: <code>:japanese_goblin:</code></td></tr><tr><td align="left">:see_no_evil: <code>:see_no_evil:</code></td><td align="left">:hear_no_evil: <code>:hear_no_evil:</code></td><td align="left">:speak_no_evil: <code>:speak_no_evil:</code></td></tr><tr><td align="left">:guardsman: <code>:guardsman:</code></td><td align="left">:skull: <code>:skull:</code></td><td align="left">:feet: <code>:feet:</code></td></tr><tr><td align="left">:lips: <code>:lips:</code></td><td align="left">:kiss: <code>:kiss:</code></td><td align="left">:droplet: <code>:droplet:</code></td></tr><tr><td align="left">:ear: <code>:ear:</code></td><td align="left">:eyes: <code>:eyes:</code></td><td align="left">:nose: <code>:nose:</code></td></tr><tr><td align="left">:tongue: <code>:tongue:</code></td><td align="left">:love_letter: <code>:love_letter:</code></td><td align="left">:bust_in_silhouette: <code>:bust_in_silhouette:</code></td></tr><tr><td align="left">:busts_in_silhouette: <code>:busts_in_silhouette:</code></td><td align="left">:speech_balloon: <code>:speech_balloon:</code></td><td align="left">:thought_balloon: <code>:thought_balloon:</code></td></tr></tbody></table><h3 id="二-自然"><a href="#二-自然" class="headerlink" title="二. 自然"></a>二. 自然</h3><table><thead><tr><th align="left">:sunny: <code>:sunny:</code></th><th align="left">:umbrella: <code>:umbrella:</code></th><th align="left">:cloud: <code>:cloud:</code></th></tr></thead><tbody><tr><td align="left">:snowflake: <code>:snowflake:</code></td><td align="left">:snowman: <code>:snowman:</code></td><td align="left">:zap: <code>:zap:</code></td></tr><tr><td align="left">:cyclone: <code>:cyclone:</code></td><td align="left">:foggy: <code>:foggy:</code></td><td align="left">:ocean: <code>:ocean:</code></td></tr><tr><td align="left">:cat: <code>:cat:</code></td><td align="left">:dog: <code>:dog:</code></td><td align="left">:mouse: <code>:mouse:</code></td></tr><tr><td align="left">:hamster: <code>:hamster:</code></td><td align="left">:rabbit: <code>:rabbit:</code></td><td align="left">:wolf: <code>:wolf:</code></td></tr><tr><td align="left">:frog: <code>:frog:</code></td><td align="left">:tiger: <code>:tiger:</code></td><td align="left">:koala: <code>:koala:</code></td></tr><tr><td align="left">:bear: <code>:bear:</code></td><td align="left">:pig: <code>:pig:</code></td><td align="left">:pig_nose: <code>:pig_nose:</code></td></tr><tr><td align="left">:cow: <code>:cow:</code></td><td align="left">:boar: <code>:boar:</code></td><td align="left">:monkey_face: <code>:monkey_face:</code></td></tr><tr><td align="left">:monkey: <code>:monkey:</code></td><td align="left">:horse: <code>:horse:</code></td><td align="left">:racehorse: <code>:racehorse:</code></td></tr><tr><td align="left">:camel: <code>:camel:</code></td><td align="left">:sheep: <code>:sheep:</code></td><td align="left">:elephant: <code>:elephant:</code></td></tr><tr><td align="left">:panda_face: <code>:panda_face:</code></td><td align="left">:snake: <code>:snake:</code></td><td align="left">:bird: <code>:bird:</code></td></tr><tr><td align="left">:baby_chick: <code>:baby_chick:</code></td><td align="left">:hatched_chick: <code>:hatched_chick:</code></td><td align="left">:hatching_chick: <code>:hatching_chick:</code></td></tr><tr><td align="left">:chicken: <code>:chicken:</code></td><td align="left">:penguin: <code>:penguin:</code></td><td align="left">:turtle: <code>:turtle:</code></td></tr><tr><td align="left">:bug: <code>:bug:</code></td><td align="left">:honeybee: <code>:honeybee:</code></td><td align="left">:ant: <code>:ant:</code></td></tr><tr><td align="left">:beetle: <code>:beetle:</code></td><td align="left">:snail: <code>:snail:</code></td><td align="left">:octopus: <code>:octopus:</code></td></tr><tr><td align="left">:tropical_fish: <code>:tropical_fish:</code></td><td align="left">:fish: <code>:fish:</code></td><td align="left">:whale: <code>:whale:</code></td></tr><tr><td align="left">:whale2: <code>:whale2:</code></td><td align="left">:dolphin: <code>:dolphin:</code></td><td align="left">:cow2: <code>:cow2:</code></td></tr><tr><td align="left">:ram: <code>:ram:</code></td><td align="left">:rat: <code>:rat:</code></td><td align="left">:water_buffalo: <code>:water_buffalo:</code></td></tr><tr><td align="left">:tiger2: <code>:tiger2:</code></td><td align="left">:rabbit2: <code>:rabbit2:</code></td><td align="left">:dragon: <code>:dragon:</code></td></tr><tr><td align="left">:goat: <code>:goat:</code></td><td align="left">:rooster: <code>:rooster:</code></td><td align="left">:dog2: <code>:dog2:</code></td></tr><tr><td align="left">:pig2: <code>:pig2:</code></td><td align="left">:mouse2: <code>:mouse2:</code></td><td align="left">:ox: <code>:ox:</code></td></tr><tr><td align="left">:dragon_face: <code>:dragon_face:</code></td><td align="left">:blowfish: <code>:blowfish:</code></td><td align="left">:crocodile: <code>:crocodile:</code></td></tr><tr><td align="left">:dromedary_camel: <code>:dromedary_camel:</code></td><td align="left">:leopard: <code>:leopard:</code></td><td align="left">:cat2: <code>:cat2:</code></td></tr><tr><td align="left">:poodle: <code>:poodle:</code></td><td align="left">:paw_prints: <code>:paw_prints:</code></td><td align="left">:bouquet: <code>:bouquet:</code></td></tr><tr><td align="left">:cherry_blossom: <code>:cherry_blossom:</code></td><td align="left">:tulip: <code>:tulip:</code></td><td align="left">:four_leaf_clover: <code>:four_leaf_clover:</code></td></tr><tr><td align="left">:rose: <code>:rose:</code></td><td align="left">:sunflower: <code>:sunflower:</code></td><td align="left">:hibiscus: <code>:hibiscus:</code></td></tr><tr><td align="left">:maple_leaf: <code>:maple_leaf:</code></td><td align="left">:leaves: <code>:leaves:</code></td><td align="left">:fallen_leaf: <code>:fallen_leaf:</code></td></tr><tr><td align="left">:herb: <code>:herb:</code></td><td align="left">:mushroom: <code>:mushroom:</code></td><td align="left">:cactus: <code>:cactus:</code></td></tr><tr><td align="left">:palm_tree: <code>:palm_tree:</code></td><td align="left">:evergreen_tree: <code>:evergreen_tree:</code></td><td align="left">:deciduous_tree: <code>:deciduous_tree:</code></td></tr><tr><td align="left">:chestnut: <code>:chestnut:</code></td><td align="left">:seedling: <code>:seedling:</code></td><td align="left">:blossom: <code>:blossom:</code></td></tr><tr><td align="left">:ear_of_rice: <code>:ear_of_rice:</code></td><td align="left">:shell: <code>:shell:</code></td><td align="left">:globe_with_meridians: <code>:globe_with_meridians:</code></td></tr><tr><td align="left">:sun_with_face: <code>:sun_with_face:</code></td><td align="left">:full_moon_with_face: <code>:full_moon_with_face:</code></td><td align="left">:new_moon_with_face: <code>:new_moon_with_face:</code></td></tr><tr><td align="left">:new_moon: <code>:new_moon:</code></td><td align="left">:waxing_crescent_moon: <code>:waxing_crescent_moon:</code></td><td align="left">:first_quarter_moon: <code>:first_quarter_moon:</code></td></tr><tr><td align="left">:waxing_gibbous_moon: <code>:waxing_gibbous_moon:</code></td><td align="left">:full_moon: <code>:full_moon:</code></td><td align="left">:waning_gibbous_moon: <code>:waning_gibbous_moon:</code></td></tr><tr><td align="left">:last_quarter_moon: <code>:last_quarter_moon:</code></td><td align="left">:waning_crescent_moon: <code>:waning_crescent_moon:</code></td><td align="left">:last_quarter_moon_with_face: <code>:last_quarter_moon_with_face:</code></td></tr><tr><td align="left">:first_quarter_moon_with_face: <code>:first_quarter_moon_with_face:</code></td><td align="left">:moon: <code>:moon:</code></td><td align="left">:earth_africa: <code>:earth_africa:</code></td></tr><tr><td align="left">:earth_americas: <code>:earth_americas:</code></td><td align="left">:earth_asia: <code>:earth_asia:</code></td><td align="left">:volcano: <code>:volcano:</code></td></tr><tr><td align="left">:milky_way: <code>:milky_way:</code></td><td align="left">:partly_sunny: <code>:partly_sunny:</code></td><td align="left"></td></tr></tbody></table><h3 id="三-事物"><a href="#三-事物" class="headerlink" title="三. 事物"></a>三. 事物</h3><table><thead><tr><th align="left">:bamboo: <code>:bamboo:</code></th><th align="left">:gift_heart: <code>:gift_heart:</code></th><th align="left">:dolls: <code>:dolls:</code></th></tr></thead><tbody><tr><td align="left">:school_satchel: <code>:school_satchel:</code></td><td align="left">:mortar_board: <code>:mortar_board:</code></td><td align="left">:flags: <code>:flags:</code></td></tr><tr><td align="left">:fireworks: <code>:fireworks:</code></td><td align="left">:sparkler: <code>:sparkler:</code></td><td align="left">:wind_chime: <code>:wind_chime:</code></td></tr><tr><td align="left">:rice_scene: <code>:rice_scene:</code></td><td align="left">:jack_o_lantern: <code>:jack_o_lantern:</code></td><td align="left">:ghost: <code>:ghost:</code></td></tr><tr><td align="left">:santa: <code>:santa:</code></td><td align="left">:christmas_tree: <code>:christmas_tree:</code></td><td align="left">:gift: <code>:gift:</code></td></tr><tr><td align="left">:bell: <code>:bell:</code></td><td align="left">:no_bell: <code>:no_bell:</code></td><td align="left">:tanabata_tree: <code>:tanabata_tree:</code></td></tr><tr><td align="left">:tada: <code>:tada:</code></td><td align="left">:confetti_ball: <code>:confetti_ball:</code></td><td align="left">:balloon: <code>:balloon:</code></td></tr><tr><td align="left">:crystal_ball: <code>:crystal_ball:</code></td><td align="left">:cd: <code>:cd:</code></td><td align="left">:dvd: <code>:dvd:</code></td></tr><tr><td align="left">:floppy_disk: <code>:floppy_disk:</code></td><td align="left">:camera: <code>:camera:</code></td><td align="left">:video_camera: <code>:video_camera:</code></td></tr><tr><td align="left">:movie_camera: <code>:movie_camera:</code></td><td align="left">:computer: <code>:computer:</code></td><td align="left">:tv: <code>:tv:</code></td></tr><tr><td align="left">:iphone: <code>:iphone:</code></td><td align="left">:phone: <code>:phone:</code></td><td align="left">:telephone: <code>:telephone:</code></td></tr><tr><td align="left">:telephone_receiver: <code>:telephone_receiver:</code></td><td align="left">:pager: <code>:pager:</code></td><td align="left">:fax: <code>:fax:</code></td></tr><tr><td align="left">:minidisc: <code>:minidisc:</code></td><td align="left">:vhs: <code>:vhs:</code></td><td align="left">:sound: <code>:sound:</code></td></tr><tr><td align="left">:speaker: <code>:speaker:</code></td><td align="left">:mute: <code>:mute:</code></td><td align="left">:loudspeaker: <code>:loudspeaker:</code></td></tr><tr><td align="left">:mega: <code>:mega:</code></td><td align="left">:hourglass: <code>:hourglass:</code></td><td align="left">:hourglass_flowing_sand: <code>:hourglass_flowing_sand:</code></td></tr><tr><td align="left">:alarm_clock: <code>:alarm_clock:</code></td><td align="left">:watch: <code>:watch:</code></td><td align="left">:radio: <code>:radio:</code></td></tr><tr><td align="left">:satellite: <code>:satellite:</code></td><td align="left">:loop: <code>:loop:</code></td><td align="left">:mag: <code>:mag:</code></td></tr><tr><td align="left">:mag_right: <code>:mag_right:</code></td><td align="left">:unlock: <code>:unlock:</code></td><td align="left">:lock: <code>:lock:</code></td></tr><tr><td align="left">:lock_with_ink_pen: <code>:lock_with_ink_pen:</code></td><td align="left">:closed_lock_with_key: <code>:closed_lock_with_key:</code></td><td align="left">:key: <code>:key:</code></td></tr><tr><td align="left">:bulb: <code>:bulb:</code></td><td align="left">:flashlight: <code>:flashlight:</code></td><td align="left">:high_brightness: <code>:high_brightness:</code></td></tr><tr><td align="left">:low_brightness: <code>:low_brightness:</code></td><td align="left">:electric_plug: <code>:electric_plug:</code></td><td align="left">:battery: <code>:battery:</code></td></tr><tr><td align="left">:calling: <code>:calling:</code></td><td align="left">:email: <code>:email:</code></td><td align="left">:mailbox: <code>:mailbox:</code></td></tr><tr><td align="left">:postbox: <code>:postbox:</code></td><td align="left">:bath: <code>:bath:</code></td><td align="left">:bathtub: <code>:bathtub:</code></td></tr><tr><td align="left">:shower: <code>:shower:</code></td><td align="left">:toilet: <code>:toilet:</code></td><td align="left">:wrench: <code>:wrench:</code></td></tr><tr><td align="left">:nut_and_bolt: <code>:nut_and_bolt:</code></td><td align="left">:hammer: <code>:hammer:</code></td><td align="left">:seat: <code>:seat:</code></td></tr><tr><td align="left">:moneybag: <code>:moneybag:</code></td><td align="left">:yen: <code>:yen:</code></td><td align="left">:dollar: <code>:dollar:</code></td></tr><tr><td align="left">:pound: <code>:pound:</code></td><td align="left">:euro: <code>:euro:</code></td><td align="left">:credit_card: <code>:credit_card:</code></td></tr><tr><td align="left">:money_with_wings: <code>:money_with_wings:</code></td><td align="left">:e-mail: <code>:e-mail:</code></td><td align="left">:inbox_tray: <code>:inbox_tray:</code></td></tr><tr><td align="left">:outbox_tray: <code>:outbox_tray:</code></td><td align="left">:envelope: <code>:envelope:</code></td><td align="left">:incoming_envelope: <code>:incoming_envelope:</code></td></tr><tr><td align="left">:postal_horn: <code>:postal_horn:</code></td><td align="left">:mailbox_closed: <code>:mailbox_closed:</code></td><td align="left">:mailbox_with_mail: <code>:mailbox_with_mail:</code></td></tr><tr><td align="left">:mailbox_with_no_mail: <code>:mailbox_with_no_mail:</code></td><td align="left">:door: <code>:door:</code></td><td align="left">:smoking: <code>:smoking:</code></td></tr><tr><td align="left">:bomb: <code>:bomb:</code></td><td align="left">:gun: <code>:gun:</code></td><td align="left">:hocho: <code>:hocho:</code></td></tr><tr><td align="left">:pill: <code>:pill:</code></td><td align="left">:syringe: <code>:syringe:</code></td><td align="left">:page_facing_up: <code>:page_facing_up:</code></td></tr><tr><td align="left">:page_with_curl: <code>:page_with_curl:</code></td><td align="left">:bookmark_tabs: <code>:bookmark_tabs:</code></td><td align="left">:bar_chart: <code>:bar_chart:</code></td></tr><tr><td align="left">:chart_with_upwards_trend: <code>:chart_with_upwards_trend:</code></td><td align="left">:chart_with_downwards_trend: <code>:chart_with_downwards_trend:</code></td><td align="left">:scroll: <code>:scroll:</code></td></tr><tr><td align="left">:clipboard: <code>:clipboard:</code></td><td align="left">:calendar: <code>:calendar:</code></td><td align="left">:date: <code>:date:</code></td></tr><tr><td align="left">:card_index: <code>:card_index:</code></td><td align="left">:file_folder: <code>:file_folder:</code></td><td align="left">:open_file_folder: <code>:open_file_folder:</code></td></tr><tr><td align="left">:scissors: <code>:scissors:</code></td><td align="left">:pushpin: <code>:pushpin:</code></td><td align="left">:paperclip: <code>:paperclip:</code></td></tr><tr><td align="left">:black_nib: <code>:black_nib:</code></td><td align="left">:pencil2: <code>:pencil2:</code></td><td align="left">:straight_ruler: <code>:straight_ruler:</code></td></tr><tr><td align="left">:triangular_ruler: <code>:triangular_ruler:</code></td><td align="left">:closed_book: <code>:closed_book:</code></td><td align="left">:green_book: <code>:green_book:</code></td></tr><tr><td align="left">:blue_book: <code>:blue_book:</code></td><td align="left">:orange_book: <code>:orange_book:</code></td><td align="left">:notebook: <code>:notebook:</code></td></tr><tr><td align="left">:notebook_with_decorative_cover: <code>:notebook_with_decorative_cover:</code></td><td align="left">:ledger: <code>:ledger:</code></td><td align="left">:books: <code>:books:</code></td></tr><tr><td align="left">:bookmark: <code>:bookmark:</code></td><td align="left">:name_badge: <code>:name_badge:</code></td><td align="left">:microscope: <code>:microscope:</code></td></tr><tr><td align="left">:telescope: <code>:telescope:</code></td><td align="left">:newspaper: <code>:newspaper:</code></td><td align="left">:football: <code>:football:</code></td></tr><tr><td align="left">:basketball: <code>:basketball:</code></td><td align="left">:soccer: <code>:soccer:</code></td><td align="left">:baseball: <code>:baseball:</code></td></tr><tr><td align="left">:tennis: <code>:tennis:</code></td><td align="left">:8ball: <code>:8ball:</code></td><td align="left">:rugby_football: <code>:rugby_football:</code></td></tr><tr><td align="left">:bowling: <code>:bowling:</code></td><td align="left">:golf: <code>:golf:</code></td><td align="left">:mountain_bicyclist: <code>:mountain_bicyclist:</code></td></tr><tr><td align="left">:bicyclist: <code>:bicyclist:</code></td><td align="left">:horse_racing: <code>:horse_racing:</code></td><td align="left">:snowboarder: <code>:snowboarder:</code></td></tr><tr><td align="left">:swimmer: <code>:swimmer:</code></td><td align="left">:surfer: <code>:surfer:</code></td><td align="left">:ski: <code>:ski:</code></td></tr><tr><td align="left">:spades: <code>:spades:</code></td><td align="left">:hearts: <code>:hearts:</code></td><td align="left">:clubs: <code>:clubs:</code></td></tr><tr><td align="left">:diamonds: <code>:diamonds:</code></td><td align="left">:gem: <code>:gem:</code></td><td align="left">:ring: <code>:ring:</code></td></tr><tr><td align="left">:trophy: <code>:trophy:</code></td><td align="left">:musical_score: <code>:musical_score:</code></td><td align="left">:musical_keyboard: <code>:musical_keyboard:</code></td></tr><tr><td align="left">:violin: <code>:violin:</code></td><td align="left">:space_invader: <code>:space_invader:</code></td><td align="left">:video_game: <code>:video_game:</code></td></tr><tr><td align="left">:black_joker: <code>:black_joker:</code></td><td align="left">:flower_playing_cards: <code>:flower_playing_cards:</code></td><td align="left">:game_die: <code>:game_die:</code></td></tr><tr><td align="left">:dart: <code>:dart:</code></td><td align="left">:mahjong: <code>:mahjong:</code></td><td align="left">:clapper: <code>:clapper:</code></td></tr><tr><td align="left">:memo: <code>:memo:</code></td><td align="left">:pencil: <code>:pencil:</code></td><td align="left">:book: <code>:book:</code></td></tr><tr><td align="left">:art: <code>:art:</code></td><td align="left">:microphone: <code>:microphone:</code></td><td align="left">:headphones: <code>:headphones:</code></td></tr><tr><td align="left">:trumpet: <code>:trumpet:</code></td><td align="left">:saxophone: <code>:saxophone:</code></td><td align="left">:guitar: <code>:guitar:</code></td></tr><tr><td align="left">:shoe: <code>:shoe:</code></td><td align="left">:sandal: <code>:sandal:</code></td><td align="left">:high_heel: <code>:high_heel:</code></td></tr><tr><td align="left">:lipstick: <code>:lipstick:</code></td><td align="left">:boot: <code>:boot:</code></td><td align="left">:shirt: <code>:shirt:</code></td></tr><tr><td align="left">:tshirt: <code>:tshirt:</code></td><td align="left">:necktie: <code>:necktie:</code></td><td align="left">:womans_clothes: <code>:womans_clothes:</code></td></tr><tr><td align="left">:dress: <code>:dress:</code></td><td align="left">:running_shirt_with_sash: <code>:running_shirt_with_sash:</code></td><td align="left">:jeans: <code>:jeans:</code></td></tr><tr><td align="left">:kimono: <code>:kimono:</code></td><td align="left">:bikini: <code>:bikini:</code></td><td align="left">:ribbon: <code>:ribbon:</code></td></tr><tr><td align="left">:tophat: <code>:tophat:</code></td><td align="left">:crown: <code>:crown:</code></td><td align="left">:womans_hat: <code>:womans_hat:</code></td></tr><tr><td align="left">:mans_shoe: <code>:mans_shoe:</code></td><td align="left">:closed_umbrella: <code>:closed_umbrella:</code></td><td align="left">:briefcase: <code>:briefcase:</code></td></tr><tr><td align="left">:handbag: <code>:handbag:</code></td><td align="left">:pouch: <code>:pouch:</code></td><td align="left">:purse: <code>:purse:</code></td></tr><tr><td align="left">:eyeglasses: <code>:eyeglasses:</code></td><td align="left">:fishing_pole_and_fish: <code>:fishing_pole_and_fish:</code></td><td align="left">:coffee: <code>:coffee:</code></td></tr><tr><td align="left">:tea: <code>:tea:</code></td><td align="left">:sake: <code>:sake:</code></td><td align="left">:baby_bottle: <code>:baby_bottle:</code></td></tr><tr><td align="left">:beer: <code>:beer:</code></td><td align="left">:beers: <code>:beers:</code></td><td align="left">:cocktail: <code>:cocktail:</code></td></tr><tr><td align="left">:tropical_drink: <code>:tropical_drink:</code></td><td align="left">:wine_glass: <code>:wine_glass:</code></td><td align="left">:fork_and_knife: <code>:fork_and_knife:</code></td></tr><tr><td align="left">:pizza: <code>:pizza:</code></td><td align="left">:hamburger: <code>:hamburger:</code></td><td align="left">:fries: <code>:fries:</code></td></tr><tr><td align="left">:poultry_leg: <code>:poultry_leg:</code></td><td align="left">:meat_on_bone: <code>:meat_on_bone:</code></td><td align="left">:spaghetti: <code>:spaghetti:</code></td></tr><tr><td align="left">:curry: <code>:curry:</code></td><td align="left">:fried_shrimp: <code>:fried_shrimp:</code></td><td align="left">:bento: <code>:bento:</code></td></tr><tr><td align="left">:sushi: <code>:sushi:</code></td><td align="left">:fish_cake: <code>:fish_cake:</code></td><td align="left">:rice_ball: <code>:rice_ball:</code></td></tr><tr><td align="left">:rice_cracker: <code>:rice_cracker:</code></td><td align="left">:rice: <code>:rice:</code></td><td align="left">:ramen: <code>:ramen:</code></td></tr><tr><td align="left">:stew: <code>:stew:</code></td><td align="left">:oden: <code>:oden:</code></td><td align="left">:dango: <code>:dango:</code></td></tr><tr><td align="left">:egg: <code>:egg:</code></td><td align="left">:bread: <code>:bread:</code></td><td align="left">:doughnut: <code>:doughnut:</code></td></tr><tr><td align="left">:custard: <code>:custard:</code></td><td align="left">:icecream: <code>:icecream:</code></td><td align="left">:ice_cream: <code>:ice_cream:</code></td></tr><tr><td align="left">:shaved_ice: <code>:shaved_ice:</code></td><td align="left">:birthday: <code>:birthday:</code></td><td align="left">:cake: <code>:cake:</code></td></tr><tr><td align="left">:cookie: <code>:cookie:</code></td><td align="left">:chocolate_bar: <code>:chocolate_bar:</code></td><td align="left">:candy: <code>:candy:</code></td></tr><tr><td align="left">:lollipop: <code>:lollipop:</code></td><td align="left">:honey_pot: <code>:honey_pot:</code></td><td align="left">:apple: <code>:apple:</code></td></tr><tr><td align="left">:green_apple: <code>:green_apple:</code></td><td align="left">:tangerine: <code>:tangerine:</code></td><td align="left">:lemon: <code>:lemon:</code></td></tr><tr><td align="left">:cherries: <code>:cherries:</code></td><td align="left">:grapes: <code>:grapes:</code></td><td align="left">:watermelon: <code>:watermelon:</code></td></tr><tr><td align="left">:strawberry: <code>:strawberry:</code></td><td align="left">:peach: <code>:peach:</code></td><td align="left">:melon: <code>:melon:</code></td></tr><tr><td align="left">:banana: <code>:banana:</code></td><td align="left">:pear: <code>:pear:</code></td><td align="left">:pineapple: <code>:pineapple:</code></td></tr><tr><td align="left">:sweet_potato: <code>:sweet_potato:</code></td><td align="left">:eggplant: <code>:eggplant:</code></td><td align="left">:tomato: <code>:tomato:</code></td></tr><tr><td align="left"></td><td align="left">:corn: <code>:corn:</code></td><td align="left"></td></tr></tbody></table><h3 id="四-地点"><a href="#四-地点" class="headerlink" title="四. 地点"></a>四. 地点</h3><table><thead><tr><th align="left">:house: <code>:house:</code></th><th align="left">:house_with_garden: <code>:house_with_garden:</code></th><th align="left">:school: <code>:school:</code></th></tr></thead><tbody><tr><td align="left">:office: <code>:office:</code></td><td align="left">:post_office: <code>:post_office:</code></td><td align="left">:hospital: <code>:hospital:</code></td></tr><tr><td align="left">:bank: <code>:bank:</code></td><td align="left">:convenience_store: <code>:convenience_store:</code></td><td align="left">:love_hotel: <code>:love_hotel:</code></td></tr><tr><td align="left">:hotel: <code>:hotel:</code></td><td align="left">:wedding: <code>:wedding:</code></td><td align="left">:church: <code>:church:</code></td></tr><tr><td align="left">:department_store: <code>:department_store:</code></td><td align="left">:european_post_office: <code>:european_post_office:</code></td><td align="left">:city_sunrise: <code>:city_sunrise:</code></td></tr><tr><td align="left">:city_sunset: <code>:city_sunset:</code></td><td align="left">:japanese_castle: <code>:japanese_castle:</code></td><td align="left">:european_castle: <code>:european_castle:</code></td></tr><tr><td align="left">:tent: <code>:tent:</code></td><td align="left">:factory: <code>:factory:</code></td><td align="left">:tokyo_tower: <code>:tokyo_tower:</code></td></tr><tr><td align="left">:japan: <code>:japan:</code></td><td align="left">:mount_fuji: <code>:mount_fuji:</code></td><td align="left">:sunrise_over_mountains: <code>:sunrise_over_mountains:</code></td></tr><tr><td align="left">:sunrise: <code>:sunrise:</code></td><td align="left">:stars: <code>:stars:</code></td><td align="left">:statue_of_liberty: <code>:statue_of_liberty:</code></td></tr><tr><td align="left">:bridge_at_night: <code>:bridge_at_night:</code></td><td align="left">:carousel_horse: <code>:carousel_horse:</code></td><td align="left">:rainbow: <code>:rainbow:</code></td></tr><tr><td align="left">:ferris_wheel: <code>:ferris_wheel:</code></td><td align="left">:fountain: <code>:fountain:</code></td><td align="left">:roller_coaster: <code>:roller_coaster:</code></td></tr><tr><td align="left">:ship: <code>:ship:</code></td><td align="left">:speedboat: <code>:speedboat:</code></td><td align="left">:boat: <code>:boat:</code></td></tr><tr><td align="left">:sailboat: <code>:sailboat:</code></td><td align="left">:rowboat: <code>:rowboat:</code></td><td align="left">:anchor: <code>:anchor:</code></td></tr><tr><td align="left">:rocket: <code>:rocket:</code></td><td align="left">:airplane: <code>:airplane:</code></td><td align="left">:helicopter: <code>:helicopter:</code></td></tr><tr><td align="left">:steam_locomotive: <code>:steam_locomotive:</code></td><td align="left">:tram: <code>:tram:</code></td><td align="left">:mountain_railway: <code>:mountain_railway:</code></td></tr><tr><td align="left">:bike: <code>:bike:</code></td><td align="left">:aerial_tramway: <code>:aerial_tramway:</code></td><td align="left">:suspension_railway: <code>:suspension_railway:</code></td></tr><tr><td align="left">:mountain_cableway: <code>:mountain_cableway:</code></td><td align="left">:tractor: <code>:tractor:</code></td><td align="left">:blue_car: <code>:blue_car:</code></td></tr><tr><td align="left">:oncoming_automobile: <code>:oncoming_automobile:</code></td><td align="left">:car: <code>:car:</code></td><td align="left">:red_car: <code>:red_car:</code></td></tr><tr><td align="left">:taxi: <code>:taxi:</code></td><td align="left">:oncoming_taxi: <code>:oncoming_taxi:</code></td><td align="left">:articulated_lorry: <code>:articulated_lorry:</code></td></tr><tr><td align="left">:bus: <code>:bus:</code></td><td align="left">:oncoming_bus: <code>:oncoming_bus:</code></td><td align="left">:rotating_light: <code>:rotating_light:</code></td></tr><tr><td align="left">:police_car: <code>:police_car:</code></td><td align="left">:oncoming_police_car: <code>:oncoming_police_car:</code></td><td align="left">:fire_engine: <code>:fire_engine:</code></td></tr><tr><td align="left">:ambulance: <code>:ambulance:</code></td><td align="left">:minibus: <code>:minibus:</code></td><td align="left">:truck: <code>:truck:</code></td></tr><tr><td align="left">:train: <code>:train:</code></td><td align="left">:station: <code>:station:</code></td><td align="left">:train2: <code>:train2:</code></td></tr><tr><td align="left">:bullettrain_front: <code>:bullettrain_front:</code></td><td align="left">:bullettrain_side: <code>:bullettrain_side:</code></td><td align="left">:light_rail: <code>:light_rail:</code></td></tr><tr><td align="left">:monorail: <code>:monorail:</code></td><td align="left">:railway_car: <code>:railway_car:</code></td><td align="left">:trolleybus: <code>:trolleybus:</code></td></tr><tr><td align="left">:ticket: <code>:ticket:</code></td><td align="left">:fuelpump: <code>:fuelpump:</code></td><td align="left">:vertical_traffic_light: <code>:vertical_traffic_light:</code></td></tr><tr><td align="left">:traffic_light: <code>:traffic_light:</code></td><td align="left">:warning: <code>:warning:</code></td><td align="left">:construction: <code>:construction:</code></td></tr><tr><td align="left">:beginner: <code>:beginner:</code></td><td align="left">:atm: <code>:atm:</code></td><td align="left">:slot_machine: <code>:slot_machine:</code></td></tr><tr><td align="left">:busstop: <code>:busstop:</code></td><td align="left">:barber: <code>:barber:</code></td><td align="left">:hotsprings: <code>:hotsprings:</code></td></tr><tr><td align="left">:checkered_flag: <code>:checkered_flag:</code></td><td align="left">:crossed_flags: <code>:crossed_flags:</code></td><td align="left">:izakaya_lantern: <code>:izakaya_lantern:</code></td></tr><tr><td align="left">:moyai: <code>:moyai:</code></td><td align="left">:circus_tent: <code>:circus_tent:</code></td><td align="left">:performing_arts: <code>:performing_arts:</code></td></tr><tr><td align="left">:round_pushpin: <code>:round_pushpin:</code></td><td align="left">:triangular_flag_on_post: <code>:triangular_flag_on_post:</code></td><td align="left"></td></tr></tbody></table><h3 id="五-符号"><a href="#五-符号" class="headerlink" title="五. 符号"></a>五. 符号</h3><table><thead><tr><th align="left">:one: <code>:one:</code></th><th align="left">:two: <code>:two:</code></th><th align="left">:three: <code>:three:</code></th></tr></thead><tbody><tr><td align="left">:four: <code>:four:</code></td><td align="left">:five: <code>:five:</code></td><td align="left">:six: <code>:six:</code></td></tr><tr><td align="left">:seven: <code>:seven:</code></td><td align="left">:eight: <code>:eight:</code></td><td align="left">:nine: <code>:nine:</code></td></tr><tr><td align="left">:keycap_ten: <code>:keycap_ten:</code></td><td align="left">:1234: <code>:1234:</code></td><td align="left">:zero: <code>:zero:</code></td></tr><tr><td align="left">:hash: <code>:hash:</code></td><td align="left">:symbols: <code>:symbols:</code></td><td align="left">:arrow_backward: <code>:arrow_backward:</code></td></tr><tr><td align="left">:arrow_down: <code>:arrow_down:</code></td><td align="left">:arrow_forward: <code>:arrow_forward:</code></td><td align="left">:arrow_left: <code>:arrow_left:</code></td></tr><tr><td align="left">:capital_abcd: <code>:capital_abcd:</code></td><td align="left">:abcd: <code>:abcd:</code></td><td align="left">:abc: <code>:abc:</code></td></tr><tr><td align="left">:arrow_lower_left: <code>:arrow_lower_left:</code></td><td align="left">:arrow_lower_right: <code>:arrow_lower_right:</code></td><td align="left">:arrow_right: <code>:arrow_right:</code></td></tr><tr><td align="left">:arrow_up: <code>:arrow_up:</code></td><td align="left">:arrow_upper_left: <code>:arrow_upper_left:</code></td><td align="left">:arrow_upper_right: <code>:arrow_upper_right:</code></td></tr><tr><td align="left">:arrow_double_down: <code>:arrow_double_down:</code></td><td align="left">:arrow_double_up: <code>:arrow_double_up:</code></td><td align="left">:arrow_down_small: <code>:arrow_down_small:</code></td></tr><tr><td align="left">:arrow_heading_down: <code>:arrow_heading_down:</code></td><td align="left">:arrow_heading_up: <code>:arrow_heading_up:</code></td><td align="left">:leftwards_arrow_with_hook: <code>:leftwards_arrow_with_hook:</code></td></tr><tr><td align="left">:arrow_right_hook: <code>:arrow_right_hook:</code></td><td align="left">:left_right_arrow: <code>:left_right_arrow:</code></td><td align="left">:arrow_up_down: <code>:arrow_up_down:</code></td></tr><tr><td align="left">:arrow_up_small: <code>:arrow_up_small:</code></td><td align="left">:arrows_clockwise: <code>:arrows_clockwise:</code></td><td align="left">:arrows_counterclockwise: <code>:arrows_counterclockwise:</code></td></tr><tr><td align="left">:rewind: <code>:rewind:</code></td><td align="left">:fast_forward: <code>:fast_forward:</code></td><td align="left">:information_source: <code>:information_source:</code></td></tr><tr><td align="left">:ok: <code>:ok:</code></td><td align="left">:twisted_rightwards_arrows: <code>:twisted_rightwards_arrows:</code></td><td align="left">:repeat: <code>:repeat:</code></td></tr><tr><td align="left">:repeat_one: <code>:repeat_one:</code></td><td align="left">:new: <code>:new:</code></td><td align="left">:top: <code>:top:</code></td></tr><tr><td align="left">:up: <code>:up:</code></td><td align="left">:cool: <code>:cool:</code></td><td align="left">:free: <code>:free:</code></td></tr><tr><td align="left">:ng: <code>:ng:</code></td><td align="left">:cinema: <code>:cinema:</code></td><td align="left">:koko: <code>:koko:</code></td></tr><tr><td align="left">:sa: <code>:sa:</code></td><td align="left">:restroom: <code>:restroom:</code></td><td align="left">:mens: <code>:mens:</code></td></tr><tr><td align="left">:womens: <code>:womens:</code></td><td align="left">:baby_symbol: <code>:baby_symbol:</code></td><td align="left">:no_smoking: <code>:no_smoking:</code></td></tr><tr><td align="left">:parking: <code>:parking:</code></td><td align="left">:wheelchair: <code>:wheelchair:</code></td><td align="left">:metro: <code>:metro:</code></td></tr><tr><td align="left">:baggage_claim: <code>:baggage_claim:</code></td><td align="left">:accept: <code>:accept:</code></td><td align="left">:wc: <code>:wc:</code></td></tr><tr><td align="left">:potable_water: <code>:potable_water:</code></td><td align="left">:put_litter_in_its_place: <code>:put_litter_in_its_place:</code></td><td align="left">:secret: <code>:secret:</code></td></tr><tr><td align="left">:congratulations: <code>:congratulations:</code></td><td align="left">:m: <code>:m:</code></td><td align="left">:passport_control: <code>:passport_control:</code></td></tr><tr><td align="left">:left_luggage: <code>:left_luggage:</code></td><td align="left">:customs: <code>:customs:</code></td><td align="left">:ideograph_advantage: <code>:ideograph_advantage:</code></td></tr><tr><td align="left">:cl: <code>:cl:</code></td><td align="left">:sos: <code>:sos:</code></td><td align="left">:id: <code>:id:</code></td></tr><tr><td align="left">:no_entry_sign: <code>:no_entry_sign:</code></td><td align="left">:underage: <code>:underage:</code></td><td align="left">:no_mobile_phones: <code>:no_mobile_phones:</code></td></tr><tr><td align="left">:do_not_litter: <code>:do_not_litter:</code></td><td align="left">:non-potable_water: <code>:non-potable_water:</code></td><td align="left">:no_bicycles: <code>:no_bicycles:</code></td></tr><tr><td align="left">:no_pedestrians: <code>:no_pedestrians:</code></td><td align="left">:children_crossing: <code>:children_crossing:</code></td><td align="left">:no_entry: <code>:no_entry:</code></td></tr><tr><td align="left">:eight_spoked_asterisk: <code>:eight_spoked_asterisk:</code></td><td align="left">:eight_pointed_black_star: <code>:eight_pointed_black_star:</code></td><td align="left">:heart_decoration: <code>:heart_decoration:</code></td></tr><tr><td align="left">:vs: <code>:vs:</code></td><td align="left">:vibration_mode: <code>:vibration_mode:</code></td><td align="left">:mobile_phone_off: <code>:mobile_phone_off:</code></td></tr><tr><td align="left">:chart: <code>:chart:</code></td><td align="left">:currency_exchange: <code>:currency_exchange:</code></td><td align="left">:aries: <code>:aries:</code></td></tr><tr><td align="left">:taurus: <code>:taurus:</code></td><td align="left">:gemini: <code>:gemini:</code></td><td align="left">:cancer: <code>:cancer:</code></td></tr><tr><td align="left">:leo: <code>:leo:</code></td><td align="left">:virgo: <code>:virgo:</code></td><td align="left">:libra: <code>:libra:</code></td></tr><tr><td align="left">:scorpius: <code>:scorpius:</code></td><td align="left">:sagittarius: <code>:sagittarius:</code></td><td align="left">:capricorn: <code>:capricorn:</code></td></tr><tr><td align="left">:aquarius: <code>:aquarius:</code></td><td align="left">:pisces: <code>:pisces:</code></td><td align="left">:ophiuchus: <code>:ophiuchus:</code></td></tr><tr><td align="left">:six_pointed_star: <code>:six_pointed_star:</code></td><td align="left">:negative_squared_cross_mark: <code>:negative_squared_cross_mark:</code></td><td align="left">:a: <code>:a:</code></td></tr><tr><td align="left">:b: <code>:b:</code></td><td align="left">:ab: <code>:ab:</code></td><td align="left">:o2: <code>:o2:</code></td></tr><tr><td align="left">:diamond_shape_with_a_dot_inside: <code>:diamond_shape_with_a_dot_inside:</code></td><td align="left">:recycle: <code>:recycle:</code></td><td align="left">:end: <code>:end:</code></td></tr><tr><td align="left">:on: <code>:on:</code></td><td align="left">:soon: <code>:soon:</code></td><td align="left">:clock1: <code>:clock1:</code></td></tr><tr><td align="left">:clock130: <code>:clock130:</code></td><td align="left">:clock10: <code>:clock10:</code></td><td align="left">:clock1030: <code>:clock1030:</code></td></tr><tr><td align="left">:clock11: <code>:clock11:</code></td><td align="left">:clock1130: <code>:clock1130:</code></td><td align="left">:clock12: <code>:clock12:</code></td></tr><tr><td align="left">:clock1230: <code>:clock1230:</code></td><td align="left">:clock2: <code>:clock2:</code></td><td align="left">:clock230: <code>:clock230:</code></td></tr><tr><td align="left">:clock3: <code>:clock3:</code></td><td align="left">:clock330: <code>:clock330:</code></td><td align="left">:clock4: <code>:clock4:</code></td></tr><tr><td align="left">:clock430: <code>:clock430:</code></td><td align="left">:clock5: <code>:clock5:</code></td><td align="left">:clock530: <code>:clock530:</code></td></tr><tr><td align="left">:clock6: <code>:clock6:</code></td><td align="left">:clock630: <code>:clock630:</code></td><td align="left">:clock7: <code>:clock7:</code></td></tr><tr><td align="left">:clock730: <code>:clock730:</code></td><td align="left">:clock8: <code>:clock8:</code></td><td align="left">:clock830: <code>:clock830:</code></td></tr><tr><td align="left">:clock9: <code>:clock9:</code></td><td align="left">:clock930: <code>:clock930:</code></td><td align="left">:heavy_dollar_sign: <code>:heavy_dollar_sign:</code></td></tr><tr><td align="left">:copyright: <code>:copyright:</code></td><td align="left">:registered: <code>:registered:</code></td><td align="left">:tm: <code>:tm:</code></td></tr><tr><td align="left">:x: <code>:x:</code></td><td align="left">:heavy_exclamation_mark: <code>:heavy_exclamation_mark:</code></td><td align="left">:bangbang: <code>:bangbang:</code></td></tr><tr><td align="left">:interrobang: <code>:interrobang:</code></td><td align="left">:o: <code>:o:</code></td><td align="left">:heavy_multiplication_x: <code>:heavy_multiplication_x:</code></td></tr><tr><td align="left">:heavy_plus_sign: <code>:heavy_plus_sign:</code></td><td align="left">:heavy_minus_sign: <code>:heavy_minus_sign:</code></td><td align="left">:heavy_division_sign: <code>:heavy_division_sign:</code></td></tr><tr><td align="left">:white_flower: <code>:white_flower:</code></td><td align="left">:100: <code>:100:</code></td><td align="left">:heavy_check_mark: <code>:heavy_check_mark:</code></td></tr><tr><td align="left">:ballot_box_with_check: <code>:ballot_box_with_check:</code></td><td align="left">:radio_button: <code>:radio_button:</code></td><td align="left">:link: <code>:link:</code></td></tr><tr><td align="left">:curly_loop: <code>:curly_loop:</code></td><td align="left">:wavy_dash: <code>:wavy_dash:</code></td><td align="left">:part_alternation_mark: <code>:part_alternation_mark:</code></td></tr><tr><td align="left">:trident: <code>:trident:</code></td><td align="left">:black_square: <code>:black_square:</code></td><td align="left">:white_square: <code>:white_square:</code></td></tr><tr><td align="left">:white_check_mark: <code>:white_check_mark:</code></td><td align="left">:black_square_button: <code>:black_square_button:</code></td><td align="left">:white_square_button: <code>:white_square_button:</code></td></tr><tr><td align="left">:black_circle: <code>:black_circle:</code></td><td align="left">:white_circle: <code>:white_circle:</code></td><td align="left">:red_circle: <code>:red_circle:</code></td></tr><tr><td align="left">:large_blue_circle: <code>:large_blue_circle:</code></td><td align="left">:large_blue_diamond: <code>:large_blue_diamond:</code></td><td align="left">:large_orange_diamond: <code>:large_orange_diamond:</code></td></tr><tr><td align="left">:small_blue_diamond: <code>:small_blue_diamond:</code></td><td align="left">:small_orange_diamond: <code>:small_orange_diamond:</code></td><td align="left">:small_red_triangle: <code>:small_red_triangle:</code></td></tr><tr><td align="left">:small_red_triangle_down: <code>:small_red_triangle_down:</code></td><td align="left">:u6e80: <code>:u6e80:</code></td><td align="left">:signal_strength: &#96;:signal_strength:</td></tr></tbody></table><h3 id="六-获取更多"><a href="#六-获取更多" class="headerlink" title="六. 获取更多"></a>六. 获取更多</h3><p><strong>获取更多</strong>：<a href="https://emojipedia.org/">📙 Emojipedia — 😃 Home of Emoji Meanings 💁👌🎍😍</a><br><strong>使用方式</strong>：</p><ol><li>可以在网页界面的的侧边栏对相应的种类进行点击选择<br> <img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/Hexo%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/Hexo%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Hexo添加emoji表情.png"></li><li>可以直接搜素相应的表情<br> <img src="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/Hexo%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85%E6%90%9C%E7%B4%A2.png" class="lazyload placeholder" data-srcset="https://fanxingnotes.oss-cn-beijing.aliyuncs.com/images/others/Hexo%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85%E6%90%9C%E7%B4%A2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Hexo添加emoji表情搜索.png"></li><li>最后直接点击Copy按钮赋值，在需要的Markdown语法中使用即可。<br><strong>结束语</strong>：<blockquote><p>希望对您有一点点帮助，如有错误欢迎小伙伴指正。<br>👍点赞：您的赞赏是我前进的动力！<br>⭐收藏：您的支持我是创作的源泉！<br>✍评论：您的建议是我改进的良药！<br>一起加油！！！:muscle::muscle::muscle:</p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">Markdown语法支持添加 `emoji` 表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情</summary>
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="MarkDown" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/MarkDown/"/>
    
    
    <category term="MarkDown" scheme="https://fanxing28.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>功能代码块</title>
    <link href="https://fanxing28.github.io/2023/12/02/%E5%B7%A5%E5%85%B7/%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>https://fanxing28.github.io/2023/12/02/%E5%B7%A5%E5%85%B7/%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E5%9D%97/</id>
    <published>2023-12-02T12:53:39.201Z</published>
    <updated>2023-12-02T12:30:58.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h1><h2 id="1-居中弹出-修改密码-对话框"><a href="#1-居中弹出-修改密码-对话框" class="headerlink" title="1. 居中弹出(修改密码)对话框"></a>1. 居中弹出(修改密码)对话框</h2><ol><li><strong>view层代码</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;tn-modal v-model=&quot;show&quot; :custom=&quot;true&quot; padding=&quot;0&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;&quot;</span><br><span class="line">        style=&quot;border-bottom: 2rpx solid #000; text-align: center; color: #000; font-weight: bold; padding: 20rpx 0;&quot;&gt;</span><br><span class="line">        修改密码</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view style=&quot;padding: 40rpx;&quot;&gt;</span><br><span class="line">        &lt;uni-forms ref=&quot;form&quot; :rules=&quot;rules&quot; :modelValue=&quot;formData&quot;&gt;</span><br><span class="line">            &lt;uni-forms-item name=&quot;old_password&quot;&gt;</span><br><span class="line">                &lt;view style=&quot;margin-bottom: 12rpx;&quot;&gt;旧密码：&lt;/view&gt;</span><br><span class="line">                &lt;uni-easyinput v-model=&quot;formData.old_password&quot; placeholder=&quot;请输入旧密码&quot;&gt;&lt;/uni-easyinput&gt;</span><br><span class="line">            &lt;/uni-forms-item&gt;</span><br><span class="line">            &lt;uni-forms-item name=&quot;new_password&quot;&gt;</span><br><span class="line">                &lt;view style=&quot;margin-bottom: 12rpx;&quot;&gt;新密码：&lt;/view&gt;</span><br><span class="line">                &lt;uni-easyinput v-model=&quot;formData.new_password&quot; placeholder=&quot;请输入新密码&quot;&gt;&lt;/uni-easyinput&gt;</span><br><span class="line">            &lt;/uni-forms-item&gt;</span><br><span class="line">            &lt;uni-forms-item name=&quot;confirm_password&quot;&gt;</span><br><span class="line">                &lt;view style=&quot;margin-bottom: 12rpx;&quot;&gt;确认密码：&lt;/view&gt;</span><br><span class="line">                &lt;uni-easyinput v-model=&quot;formData.confirm_password&quot; placeholder=&quot;请再次输入密码&quot;&gt;&lt;/uni-easyinput&gt;</span><br><span class="line">            &lt;/uni-forms-item&gt;</span><br><span class="line">        &lt;/uni-forms&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;modalBtn&quot;&gt;</span><br><span class="line">        &lt;button @tap=&quot;modalCancel&quot;</span><br><span class="line">            style=&quot;border-radius: 0; background-color: #fff; color: #0e6eb8; position: absolute; left: 0; bottom: 0; width: 50%; border-top: 4rpx solid #0e6eb8;&quot;&gt;取消&lt;/button&gt;</span><br><span class="line">        &lt;button @tap=&quot;modalConfirm&quot;</span><br><span class="line">            style=&quot;border-radius: 0;background-color: #0e6eb8; color: #fff; position: absolute; right: 0; bottom: 0; width: 50%; border-top: 4rpx solid #0e6eb8;&quot;&gt;确认&lt;/button&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/tn-modal&gt;</span><br></pre></td></tr></table></figure></li><li><strong>js层</strong></li></ol><ul><li>show: false &#x2F;&#x2F; 控制对话框显示与隐藏</li><li>formData: { old_password: ‘’, new_password: ‘’, confirm_password: ‘’ }, &#x2F;&#x2F; 修改密码表单数据</li><li>modalCancel：对话框取消按钮事件</li><li>modalConfirm：对话框确认按钮事件</li></ul><ol start="2"><li><strong>样式</strong><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modalBtn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">80</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-uniapp修改密码-表单验证-自下而上弹框"><a href="#2-uniapp修改密码-表单验证-自下而上弹框" class="headerlink" title="2. uniapp修改密码(表单验证+自下而上弹框)"></a>2. uniapp修改密码(表单验证+自下而上弹框)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;tn-popup v-model=&quot;popupShow&quot; mode=&quot;<span class="attribute">bottom</span>&quot; borderRadius=&quot;<span class="number">24</span>&quot; class=&quot;changePassPopup&quot; <span class="attribute">height</span>=&quot;<span class="number">924</span>&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;<span class="selector-tag">header</span>&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;title&quot;&gt;修改密码&lt;/view&gt;</span><br><span class="line">        &lt;view class=&quot;closeBtn&quot; <span class="keyword">@click</span>=&quot;modalCancel&quot;&gt;关闭&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;formMain&quot;</span>&gt;</span><br><span class="line">        &lt;uni-forms ref=<span class="string">&quot;form&quot;</span> :modelValue=<span class="string">&quot;formData&quot;</span> border toast-position=<span class="string">&quot;bottom&quot;</span>&gt;</span><br><span class="line">            &lt;uni-forms-item name=<span class="string">&quot;old_password&quot;</span> key=<span class="string">&quot;old_password&quot;</span>&gt;</span><br><span class="line">                &lt;template #default&gt;</span><br><span class="line">                    &lt;view class=<span class="string">&quot;formItem&quot;</span>&gt;</span><br><span class="line">                        &lt;view class=<span class="string">&quot;labelStyle&quot;</span>&gt;旧密码&lt;text class=<span class="string">&quot;textRequired&quot;</span>&gt;*&lt;/text&gt;：&lt;/view&gt;</span><br><span class="line">                        &lt;input v-model=<span class="string">&quot;formData.old_password&quot;</span> type=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;请输入旧密码&quot;</span> class=<span class="string">&quot;formInput&quot;</span>/&gt;</span><br><span class="line">                    &lt;/view&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/uni-forms-item&gt;</span><br><span class="line">            &lt;uni-forms-item name=<span class="string">&quot;new_password&quot;</span> key=<span class="string">&quot;new_password&quot;</span>&gt;</span><br><span class="line">                &lt;template #default&gt;</span><br><span class="line">                    &lt;view class=<span class="string">&quot;formItem&quot;</span>&gt;</span><br><span class="line">                        &lt;view class=<span class="string">&quot;labelStyle&quot;</span>&gt;新密码&lt;text class=<span class="string">&quot;textRequired&quot;</span>&gt;*&lt;/text&gt;：&lt;/view&gt;</span><br><span class="line">                        &lt;input v-model=<span class="string">&quot;formData.new_password&quot;</span> type=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;请输入新密码&quot;</span> class=<span class="string">&quot;formInput&quot;</span>/&gt;</span><br><span class="line">                    &lt;/view&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/uni-forms-item&gt;</span><br><span class="line">            &lt;uni-forms-item name=<span class="string">&quot;confirm_password&quot;</span> key=<span class="string">&quot;confirm_password&quot;</span>&gt;</span><br><span class="line">                &lt;template #default&gt;</span><br><span class="line">                    &lt;view class=<span class="string">&quot;formItem&quot;</span>&gt;</span><br><span class="line">                        &lt;view class=<span class="string">&quot;labelStyle&quot;</span>&gt;确认密码&lt;text class=<span class="string">&quot;textRequired&quot;</span>&gt;*&lt;/text&gt;：&lt;/view&gt;</span><br><span class="line">                        &lt;input v-model=<span class="string">&quot;formData.confirm_password&quot;</span> type=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;请再次输入新密码&quot;</span> class=<span class="string">&quot;formInput&quot;</span>/&gt;</span><br><span class="line">                    &lt;/view&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/uni-forms-item&gt;</span><br><span class="line">        &lt;/uni-forms&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;button class=<span class="string">&quot;saveBtn&quot;</span> @click=<span class="string">&quot;modalConfirm&quot;</span>&gt;保存&lt;/button&gt;</span><br><span class="line">&lt;/tn-popup&gt;</span><br></pre></td></tr></table></figure><p>验证规则：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">     old_password: &#123;</span><br><span class="line">         rules: [&#123;</span><br><span class="line">             required: true,</span><br><span class="line">             errorMessage: <span class="string">&#x27;旧密码不可为空！&#x27;</span>,</span><br><span class="line">         &#125;, ],</span><br><span class="line">     &#125;,  </span><br><span class="line">  new_password: &#123;</span><br><span class="line">         rules: [&#123;</span><br><span class="line">             required: true,</span><br><span class="line">             errorMessage: <span class="string">&#x27;新密码不可为空！&#x27;</span>,</span><br><span class="line">        &#125;],</span><br><span class="line">     &#125;,</span><br><span class="line">     confirm_password: &#123;</span><br><span class="line">         rules: [&#123;</span><br><span class="line">            required: true,</span><br><span class="line">            errorMessage: <span class="string">&#x27;新密码不可为空！&#x27;</span>,</span><br><span class="line">         &#125;, ],</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-自定义代码块（VsCode和HbuilderX）"><a href="#3-自定义代码块（VsCode和HbuilderX）" class="headerlink" title="3. 自定义代码块（VsCode和HbuilderX）"></a>3. 自定义代码块（VsCode和HbuilderX）</h2><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;vue2起始代码&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: <span class="string">&quot;v2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&lt;view class=\&quot;wrap\&quot;&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t&lt;view&gt;$1&lt;/view&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&lt;/view&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\texport default &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\tdata() &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t\treturn &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t\t\t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t\t&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t&#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\tmethods: &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t\t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;vue3起始代码&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: <span class="string">&quot;v3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&lt;view class=\&quot;wrap\&quot;&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t&lt;view&gt;$1&lt;/view&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&lt;/view&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;script setup&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\timport &#123; ref, reactive &#125; from \&quot;vue\&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&quot;uni小程序<span class="attribute">flex</span>片段&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: <span class="string">&quot;unifx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;display: flex;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;align-items: center;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;justify-content: center;$1&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;,    </span><br><span class="line">&quot;uni小程序<span class="attribute">flex</span>混入片段&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: <span class="string">&quot;unifc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;@mixin center() &#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\tdisplay: flex;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\talign-items: center;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;$1&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;uni小程序变量&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: <span class="string">&quot;unifb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [    </span><br><span class="line">        <span class="string">&quot;// 主题色&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$themeColor: #0E6EB8;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;// 整个页面背景色&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$pageBackColor: #FAFAFA;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;// 页面块背景色&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$pageBlockBColor: #FFFFFF;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;// 分割线背景色&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$divideLineBColor: #F2F2F2;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;// 粗体字体颜色&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$blodFColor: #333333;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;// 细体字体颜色&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$thinFColor: #999999;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;// 大号字体&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$maxFSize: 28rpx;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;// 中号字体&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$midFSize: 24rpx;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;// 小号字体&quot;</span>,</span><br><span class="line">        <span class="string">&quot;\\$minFSize: 20rpx;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$1&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码块是快速开发的利器。简单的敲几个字母，回车，就能生成大段代码。<br>比如我们经常会敲if…else结构，在HBuilderX中，只需敲<code>ife</code>回车，就能直接生成相应的代码结构。<br>4. 敲ife<br>    <img src="https://ask.dcloud.net.cn/uploads/article/20190524/f82e74a214312d74070437f81c518018.png" class="lazyload placeholder" data-srcset="https://ask.dcloud.net.cn/uploads/article/20190524/f82e74a214312d74070437f81c518018.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://ask.dcloud.net.cn/uploads/article/20190524/f82e74a214312d74070437f81c518018.png"><br>5. 回车后生成if结构体<br>    <img src="https://ask.dcloud.net.cn/uploads/article/20190524/c083adaa471be0824d84cba501bb8867.png" class="lazyload placeholder" data-srcset="https://ask.dcloud.net.cn/uploads/article/20190524/c083adaa471be0824d84cba501bb8867.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://ask.dcloud.net.cn/uploads/article/20190524/c083adaa471be0824d84cba501bb8867.png"></p><p>HBuilderX已经内置了大量常用的代码块，熟悉这些代码块，对于提高编程效率有重要帮助。<br>查看内建的代码块，点菜单-工具-代码块设置，选择你要查看的语言的代码块。<br><img src="https://ask.dcloud.net.cn/uploads/article/20190515/c94715b172275fdbaaf5fc337496bfbc.png" class="lazyload placeholder" data-srcset="https://ask.dcloud.net.cn/uploads/article/20190515/c94715b172275fdbaaf5fc337496bfbc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://ask.dcloud.net.cn/uploads/article/20190515/c94715b172275fdbaaf5fc337496bfbc.png"><br>打开的界面中，左侧即是预置的代码块，右侧是开发者可以自己扩展代码块的地方。<br><img src="https://ask.dcloud.net.cn/uploads/article/20190524/c39f65705c18f534d6e55de28adc08c2.png" class="lazyload placeholder" data-srcset="https://ask.dcloud.net.cn/uploads/article/20190524/c39f65705c18f534d6e55de28adc08c2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="https://ask.dcloud.net.cn/uploads/article/20190524/c39f65705c18f534d6e55de28adc08c2.png"></p><h3 id="模板示例"><a href="#模板示例" class="headerlink" title="模板示例"></a>模板示例</h3><p>自定义代码块都是配置json文件中的，直接来个自己用的Vue2和Vue3起始代码的代码块的配置如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;vue2起始代码&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: <span class="string">&quot;v2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&lt;view class=\&quot;wrap\&quot;&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t&lt;view&gt;$1&lt;/view&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&lt;/view&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\texport default &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\tdata() &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t\treturn &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t\t\t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t\t&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t&#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\tmethods: &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t\t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;vue3起始代码&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: <span class="string">&quot;v3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&lt;view class=\&quot;wrap\&quot;&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t\t&lt;view&gt;$1&lt;/view&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&lt;/view&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;script setup&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\timport &#123; ref, reactive &#125; from \&quot;vue\&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;\t&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码块配置格式说明"><a href="#代码块配置格式说明" class="headerlink" title="代码块配置格式说明"></a>代码块配置格式说明</h3><p>HBuilderX使用json定义代码块的格式，兼容vscode的代码块格式，也就是你可以把vscode里已经配置的自定义代码块方便的挪到HBuilderX中使用。<br>每个配置项的说明如下：</p><ul><li><strong>key</strong><br>  “key” ：代码块显示名称，显示在代码助手列表中的名字。key是不能重复的。 上面例子中<code>&quot;vue2起始代码&quot;</code>就是一个<code>key</code>。</li><li><strong>prefix</strong><br>  “prefix” ：代码块的触发字符，就是敲什么字母可以激活这个代码块。就像上述的”v2”和”v3”</li><li><strong>body</strong><br>  “body” ：代码块的内容。内容中有如下特殊格式<br>  <code>$1</code> 表示代码块输入后光标的所在位置。如需要多光标，就在多个地方配置<code>$1</code>；如该位置有预置数据且需要选中，则写法是<code>$&#123;1:selectedtext&#125;</code>；这里还支持下拉候选菜单，多选项即下拉候选列表使用<code>$&#123;1:foo1/foo2/foo3&#125; $2</code> 表示代码块输入后再次按tab后光标的切换位置<code>tabstops</code>（代码块展开后按tab可以跳到下一个<code>tabstop</code>，在HBuilderX中看到类似绿色光标的不闪的竖线，就可以按tab或回车跳转光标过去） <code>$0</code>代表代码块输入后最终光标的所在位置（也可以按回车直接跳过去）。</li><li><strong>triggerAssist</strong><br>  “triggerAssist” ：为<code>true</code>表示该代码块输入到文档后立即在第一个<code>tabstop</code>上触发代码提示，拉出代码助手，默认为<code>false</code>。</li><li><strong>project</strong><br>  project: 将代码块控制在指定项目类型下生效。可取值有：<code>uni-app</code>、<code>Web</code>、<code>App</code>、<code>Wap2App</code><br>  比如：<code>&quot;project&quot;: &quot;uni-app&quot;</code>，代表这个代码块仅在uni-app项目下生效<br>  如果不设置，则该代码块在所有项目类型下均生效。<br>  <code>Web</code>指普通项目，<code>App</code>指5+App项目。<br>  如需设置多种项目类型，用逗号分隔。比如：<code>&quot;project&quot;: &quot;uni-app,App&quot;</code></li></ul><p><strong>配合符号：</strong></p><ul><li><strong>双引号使用<code>\&quot;</code>转义</strong></li><li><strong>换行使用多个数组表示，每个行一个数组，用<code>双引号</code>包围，并用<code>逗号</code>分隔</strong></li><li><strong>缩进需要用<code>\t</code>表示，不能直接输入缩进或空格！</strong><br><strong>总结：如果只是简单写一个代码块只写key、prefix和body就能使用了</strong><br><strong>注：选定什么类型下的编写的代码只会在相应的类型后缀文件里才能使用（例如：选择的是vue代码块写的代码块只会在”.vue”后缀文件里面才会生效）</strong></li></ul><h2 id="4-自定义顶部导航栏"><a href="#4-自定义顶部导航栏" class="headerlink" title="4. 自定义顶部导航栏"></a>4. 自定义顶部导航栏</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;nav-box&quot; @click=&quot;getHeadHeight&quot; :style=&quot;&#123;&#x27;height&#x27;: height + &#x27;px&#x27;, &#x27;background&#x27; : bgColor&#125;&quot;&gt;</span><br><span class="line">        &lt;!-- 状态栏占位 --&gt;</span><br><span class="line">        &lt;view class=&quot;status_bar&quot; :style=&quot;&#123;&#x27;height&#x27;: statusBarHeight + &#x27;px&#x27;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">        &lt;!-- 导航内容 --&gt;</span><br><span class="line">        &lt;view class=&quot;nav-main&quot; :style=&quot;&#123;&#x27;height&#x27;: navBarHeight + &#x27;px&#x27;&#125;&quot;&gt;</span><br><span class="line">            &lt;!-- 回退图标 --&gt;</span><br><span class="line">            &lt;image src=&quot;../static/images/back.png&quot; mode=&quot;&quot; class=&quot;back&quot; @click=&quot;back(path)&quot; v-if=&quot;backIcon == true&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;!--             &lt;image src=&quot;../static/images/back.png&quot; mode=&quot;&quot; class=&quot;back&quot; @click=&quot;backInfo()&quot;</span><br><span class="line">                v-if=&quot;loginbackIcon == true&quot;&gt;</span><br><span class="line">            &lt;/image&gt; --&gt;</span><br><span class="line">            &lt;!-- 标题 --&gt;</span><br><span class="line">            &lt;text class=&quot;nav-main-title&quot;</span><br><span class="line">                :style=&quot;backIcon == true ? &#x27;display: block;&#x27; : &#x27;&#x27;&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;view v-if=&quot;backIcon&quot; style=&quot;width: 50rpx;&quot;&gt;&lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            bgColor: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &quot;#fff&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            backIcon: &#123;</span><br><span class="line">                type: Boolean,</span><br><span class="line">                default: false</span><br><span class="line">            &#125;,</span><br><span class="line">            loginbackIcon: &#123;</span><br><span class="line">                type: Boolean,</span><br><span class="line">                default: false</span><br><span class="line">            &#125;,</span><br><span class="line">            title: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            path: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                height: 0,</span><br><span class="line">                menuButtonRect: &#123;&#125;,</span><br><span class="line">                statusBarHeight: 0,</span><br><span class="line">                navBarHeight: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.getHeight();</span><br><span class="line">            this.getHeadHeight()</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getHeadHeight() &#123;</span><br><span class="line">                this.$emit(&#x27;getHeadHeight&#x27;, this.height)</span><br><span class="line">            &#125;,</span><br><span class="line">            //计算导航栏总高度</span><br><span class="line">            getHeight() &#123;</span><br><span class="line">                // 判断获取微信小程序胶囊API是否可用</span><br><span class="line">                if (uni.canIUse(&#x27;getMenuButtonBoundingClientRect&#x27;)) &#123;</span><br><span class="line">                    let sysInfo = uni.getSystemInfoSync();</span><br><span class="line">                    this.statusBarHeight = sysInfo.statusBarHeight;</span><br><span class="line">                    let rect = uni.getMenuButtonBoundingClientRect();</span><br><span class="line">                    this.menuButtonRect = JSON.parse(JSON.stringify(rect));</span><br><span class="line">                    let navBarHeight = (rect.top - sysInfo.statusBarHeight) * 2 + rect.height;</span><br><span class="line">                    this.navBarHeight = navBarHeight;</span><br><span class="line">                    this.height = sysInfo.statusBarHeight + navBarHeight;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    uni.showToast(&#123;</span><br><span class="line">                        title: &#x27;您的微信版本过低，界面可能会显示不正常&#x27;,</span><br><span class="line">                        icon: &#x27;none&#x27;,</span><br><span class="line">                        duration: 4000</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 返回上一级</span><br><span class="line">            back(path) &#123;</span><br><span class="line">                uni.navigateBack()</span><br><span class="line">            &#125;,</span><br><span class="line">            // 返回首页</span><br><span class="line">            backInfo() &#123;</span><br><span class="line">                uni.switchTab(&#123;</span><br><span class="line">                    url: &#x27;/pages/information/information&#x27;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    .nav-box &#123;</span><br><span class="line">        width: 100vw;</span><br><span class="line"></span><br><span class="line">        .status_bar &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .nav-main &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            padding: 0 20rpx;</span><br><span class="line">            border-bottom: 2rpx solid #F2F2F2;</span><br><span class="line"></span><br><span class="line">            .back &#123;</span><br><span class="line">                width: 50rpx;</span><br><span class="line">                height: 50rpx;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .nav-main-title &#123;</span><br><span class="line">                color: #000;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">                font-size: 36rpx;</span><br><span class="line">                width: 100%;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="5-自定义底部导航栏"><a href="#5-自定义底部导航栏" class="headerlink" title="5. 自定义底部导航栏"></a>5. 自定义底部导航栏</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;tabBar&quot;&gt;</span><br><span class="line">        &lt;view v-for=&quot;(item,index) in tabBar&quot; :key=&quot;item.url&quot; class=&quot;tabbar_item&quot;</span><br><span class="line">            :class=&quot;&#123;&#x27;active&#x27;:item.url == currentPage&#125;&quot; @click=&quot;navTo(item)&quot;&gt;</span><br><span class="line">            &lt;image v-if=&quot;item.url == currentPage&quot; :src=&quot;item.imgClick&quot; mode=&quot;&quot;&gt;&lt;/image&gt;</span><br><span class="line">            &lt;image v-else :src=&quot;item.imgNormal&quot; mode=&quot;&quot;&gt;&lt;/image&gt;</span><br><span class="line">            &lt;view class=&quot;text&quot;&gt;&#123;&#123;item.text&#125;&#125;&lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            currentPage: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &#x27;index&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                tabBar: [&#123;</span><br><span class="line">                        url: &#x27;information&#x27;,</span><br><span class="line">                        text: &#x27;资料&#x27;,</span><br><span class="line">                        imgNormal: &#x27;static/images/tabBar/info&#x27;,</span><br><span class="line">                        imgClick: &#x27;static/images/tabBar/info_act&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        url: &#x27;project&#x27;,</span><br><span class="line">                        text: &#x27;项目&#x27;,</span><br><span class="line">                        imgNormal: &#x27;static/images/tabBar/project&#x27;,</span><br><span class="line">                        imgClick: &#x27;static/images/tabBar/project_act&#x27;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        url: &#x27;mine&#x27;,</span><br><span class="line">                        text: &#x27;我的&#x27;,</span><br><span class="line">                        imgNormal: &#x27;static/images/tabBar/my&#x27;,</span><br><span class="line">                        imgClick: &#x27;static/images/tabBar/my_act&#x27;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            uni.hideTabBar(&#123;&#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            navTo(item) &#123;</span><br><span class="line">                if (item.url !== this.currentPage) &#123;</span><br><span class="line">                    var isUrl = `/pages/$&#123;item.url&#125;/$&#123;item.url&#125;`</span><br><span class="line">                    const that = this</span><br><span class="line">                    uni.switchTab(&#123;</span><br><span class="line">                        url: isUrl</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    console.log(&#x27;重复点击&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    // 导航栏设置</span><br><span class="line">    $isRadius: 20upx;</span><br><span class="line">    $isWidth: 100vw;</span><br><span class="line">    $isBorder: 0px solid white;</span><br><span class="line">    $isBg: white;</span><br><span class="line">    $chooseTextColor: #000;</span><br><span class="line">    $chooseBgColor: transparent;</span><br><span class="line">    $normalTextColor: #999;</span><br><span class="line"></span><br><span class="line">    .tabBar &#123;</span><br><span class="line">        width: $isWidth;</span><br><span class="line">        height: 60px;</span><br><span class="line">        position: fixed;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        z-index: 998;</span><br><span class="line">        background-color: $isBg;</span><br><span class="line">        color: $normalTextColor;</span><br><span class="line">        border-left: $isBorder;</span><br><span class="line">        border-top: $isBorder;</span><br><span class="line">        border-right: $isBorder;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        overflow: hidden;</span><br><span class="line"></span><br><span class="line">        .tabbar_item &#123;</span><br><span class="line">            width: 25%;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line"></span><br><span class="line">            &amp;.active &#123;</span><br><span class="line">                border-left: $isBorder;</span><br><span class="line">                border-top: $isBorder;</span><br><span class="line">                background: $chooseBgColor;</span><br><span class="line">                color: $chooseTextColor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        image &#123;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 31px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="6-获取手机底部的安全距离"><a href="#6-获取手机底部的安全距离" class="headerlink" title="6. 获取手机底部的安全距离"></a>6. 获取手机底部的安全距离</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取底部安全距离的高度</span></span><br><span class="line">    <span class="keyword">const</span> systemInfo = uni.<span class="title function_">getSystemInfoSync</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">safeArea</span> = systemInfo.<span class="property">screenHeight</span> - systemInfo.<span class="property">safeArea</span>.<span class="property">bottom</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uni.getSystemInfoSync()</code>：<strong>获取系统信息</strong>的同步接口</p><h2 id="7-预览PDF文件"><a href="#7-预览PDF文件" class="headerlink" title="7. 预览PDF文件"></a>7. 预览PDF文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileName = name + <span class="string">&#x27;.pdf&#x27;</span>;</span><br><span class="line">uni.<span class="title function_">downloadFile</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: file,</span><br><span class="line">    <span class="attr">filePath</span>: wx.<span class="property">env</span>.<span class="property">USER_DATA_PATH</span> + <span class="string">&#x27;/&#x27;</span> + fileName,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> filePath = res.<span class="property">tempFilePath</span>;</span><br><span class="line">        uni.<span class="title function_">openDocument</span>(&#123;</span><br><span class="line">            <span class="attr">filePath</span>: wx.<span class="property">env</span>.<span class="property">USER_DATA_PATH</span> + <span class="string">&#x27;/&#x27;</span> + fileName,</span><br><span class="line">            fileName,</span><br><span class="line">            <span class="attr">showMenu</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开文档成功&#x27;</span>, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>先用<code>uni.downloadFile()</code>下载url路径下的文件生成临时文件，在通过<code>uni.openDocument()</code>打开临时文件进行预览</li><li>在uni.downloadFile时<strong>修改filePath文件路径</strong>可以对临时文件进行<strong>重新命名</strong></li><li><strong>开发过程遇到的问题：</strong>修改的文件名称在安卓和开发工具调试时可以看到修改后的文件名，但<strong>ios端</strong>只能看到文件预览4个字，不过将预览的<strong>文件分享出去的时候是修改后的文件名</strong></li></ul><h2 id="8-组件按需引入"><a href="#8-组件按需引入" class="headerlink" title="8. 组件按需引入"></a>8. 组件按需引入</h2><ol><li>在开启「按需注入」特性的前提下，「用时注入」可以指定一部分自定义组件不在小程序启动时注入，而是在真正渲染的时候才进行注入。</li><li>在已经指定 lazyCodeLoading为 requiredComponents的情况下，为自定义组件配置 占位组件，组件就会自动被视为用时注入组件：</li><li>每个页面内，第一次渲染该组件前，该组件都不会被注入；</li><li>每个页面内，第一次渲染该组件时，该组件会被渲染为其对应的占位组件，渲染流程结束后开始注入；</li><li>注入结束后，占位组件被替换回对应组件。<br><strong>具体做法：</strong><br>在<code>manifest.json</code>配置找到 最下方的源码视图 也可以用编辑器打开 找到<code>mp-weixin</code>添加<code>&quot;lazyCodeLoading&quot;: &quot;requiredComponents&quot;</code></li></ol><h2 id="9-input的type为number"><a href="#9-input的type为number" class="headerlink" title="9. input的type为number"></a>9. input的type为number</h2><p><strong>注意点：</strong>uniapp提供的uni-easyinput组件、H5原生html的input标签、图鸟UI的tn-input组件中的type为number都指的是在小程序运行在移动端的时候<strong>唤起数字手机键盘</strong>来限制输入框中输入的值只能为数字，而不是直接限制，所以在电脑端测试的时候是无效的</p><h2 id="10-SCSS-全局变量和全局样式的使用"><a href="#10-SCSS-全局变量和全局样式的使用" class="headerlink" title="10. SCSS 全局变量和全局样式的使用"></a>10. SCSS 全局变量和全局样式的使用</h2><p>具体步骤：</p><ol><li>在项目的<code>static/css</code>目录下创建一个variable.scss文件存放全局变量</li><li>在创建一个common.scss文件存放全局样式</li><li>使用<code>@import &#39;./variable.scss&#39;;</code>引入全局变量文件</li><li>在在uni.scss文件中引入全局样式文件<code>@import &#39;./static/css/common.scss&#39;;</code></li><li>最后在要使用的页面style标签中使用lang&#x3D;”scss”就可以使用全局变量和全局样式了。</li></ol>]]></content>
    
    
    <summary type="html">Uniapp微信小程序开发功能总结</summary>
    
    
    
    <category term="工具" scheme="https://fanxing28.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://fanxing28.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="功能" scheme="https://fanxing28.github.io/tags/%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Git 命令及使用</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%85%B6%E4%BB%96/Git/%E3%80%90Git%E3%80%91%E5%91%BD%E4%BB%A4%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%85%B6%E4%BB%96/Git/%E3%80%90Git%E3%80%91%E5%91%BD%E4%BB%A4%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2023-11-28T14:32:59.000Z</published>
    <updated>2023-12-02T12:29:00.479Z</updated>
    
    <content type="html"><![CDATA[<p>git是目前世界上最先进<strong>分布式的版本控制系统</strong> github是一个仓库速度快、免费和开源、分支方便</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>git config –global user.name ‘pudge-w’（pudge-w：自己的git..用户名）</li><li>git config –global user.email ‘<a href="mailto:&#x70;&#117;&#100;&#103;&#x65;&#95;&#x77;&#x6a;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;">&#x70;&#117;&#100;&#103;&#x65;&#95;&#x77;&#x6a;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;</a>‘（<a href="mailto:&#x70;&#x75;&#x64;&#103;&#101;&#x5f;&#119;&#x6a;&#x40;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;">&#x70;&#x75;&#x64;&#103;&#101;&#x5f;&#119;&#x6a;&#x40;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;</a>：自己的git…邮箱）</li></ul><h2 id="上传本地文件"><a href="#上传本地文件" class="headerlink" title="上传本地文件"></a>上传本地文件</h2><ul><li>git init 初始化</li><li>git add index.html 或者 git add . 提交到暂存区</li><li>git commit -m ‘init index.html’ 提交到本地仓库 （init index.html：提交描述）</li><li>git status 查看git的状态</li><li>git diff 查看版本的差别</li><li>git log 或者 git log –pretty&#x3D;oneline 查看版本信息</li><li>git reset HEAD^ 回退一个版本</li><li>git reset –hard cc56901 回退到指定版本</li><li>git reflog 查看所有的历史版本</li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li>git branch 查看分支</li><li>git branch dev 创建分支</li><li>git checkout dev 或者 git switch dev 切换分支</li><li>git checkout -b dev2 创建并切换</li><li>git merge dev2 合并分支内容</li><li>git branch -d dev2 删除分支</li><li>git log –graph –pretty&#x3D;oneline 查看分支记录</li></ul><h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h2><p>生成密钥对 ssh-keygen -t rsa -C ‘<a href="mailto:&#119;&#97;&#110;&#x67;&#106;&#x69;&#101;&#x40;&#x31;&#x30;&#48;&#x30;&#x70;&#104;&#x6f;&#x6e;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#119;&#97;&#110;&#x67;&#106;&#x69;&#101;&#x40;&#x31;&#x30;&#48;&#x30;&#x70;&#104;&#x6f;&#x6e;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>‘<br><strong>创建项目</strong></p><ul><li>git init</li><li>git add .</li><li>git commit -m ‘init’</li><li>git remote add origin</li><li><a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:pudge-w&#x2F;taobao.git</li><li>git push -u origin master<br>邀请组员 setting -&gt; manage access<br><strong>组员开发 不要在master做开发!!!!</strong><br><strong>组员首次</strong></li><li>git clone xxxxxxxx（拉取一份仓库代码）</li><li>git checkout -b self（创建自己的分支）</li><li>git add .（提交到暂存区）</li><li>git commit -m “xxx”（提交到本地仓库）</li><li>git push –set-upstream origin self（提交到仓库自己的分支名中）<br><strong>组员非首次</strong><br>git checkout master（切换到自己的主分支master）<br>git pull origin master （将远程的master拉到自己的master<br>git checkout self（切换到自己的子分支）<br>git merge master （将自己的master合并的自己的分支（让分支是最新的））<br>写代码<br>git add .（添加到暂存区）<br>git commit -m “xxx2”（提交到本地仓库）<br>git pull origin master （将远程的最新的代码拉到自己的分支）<br>可能需要解决冲突(如果解决了冲突，需要重新add和commit)<br>git push<br><strong>组长首次</strong><br>git fetch –all（拉取仓库中所有分支）<br>git checkout self（组员分支）<br>启动项目并检查<br>git checkout master（切换到主分支）<br>git merge self（合并分支）<br>git push (将本地的master推送到远程的master)<br><strong>组长非首次</strong><br>git checkout self（切换到组员的分支）<br>git pull (将远程的self拉到本地的self)<br>启动项目并检查<br>git checkout master（切换到主分支）<br>git merge self（将子分支合并到主分支中）<br>git push (将本地的master推送到远程的master)</li></ul><h2 id="实际开发使用"><a href="#实际开发使用" class="headerlink" title="实际开发使用"></a>实际开发使用</h2><p><strong>当只有一个仓库分支时：</strong><br><strong>拉取代码</strong></p><ol><li>第一次拉取代码：<blockquote><p>git clone 仓库地址</p></blockquote></li><li>第二次拉取代码：<blockquote><p>git pull</p></blockquote></li></ol><p><strong>上传代码</strong><br>3. 添加到暂存区</p><blockquote><p>git add .<br>4. 提交到本地仓库<br>git commit -m “提交描述文字”<br>5. 将远程的最新的代码拉到自己的分支<br>git pull<br>6. 将本地的master推送到远程的master<br>git push</p></blockquote><p><strong>当仓库中有两个分支时：</strong><br><strong>拉取代码</strong></p><ol><li>第一次拉取代码：<blockquote><p>git clone 仓库地址</p></blockquote></li><li>第二次拉取代码：<blockquote><p>git pull</p></blockquote></li></ol><p><strong>上传代码</strong><br>3. 创建自己的分支</p><blockquote><p>git checkout -b “需要提交到的仓库分支名”<br>4. 添加到暂存区<br>git add .<br>5. 提交到本地仓库<br>git commit -m “提交描述文字”<br>6. 将远程的最新的代码拉到自己的分支<br>git pull<br>7. 将需要提交的分支进行代码的提交<br>git push origin “需要提交到的仓库分支名”</p></blockquote><h2 id="可视化软件推荐"><a href="#可视化软件推荐" class="headerlink" title="可视化软件推荐"></a>可视化软件推荐</h2><p><strong>Fork</strong> 是一款面向 GitHub 开发者的 Git 客户端，它提供了直观的用户界面和实用的工具，支持多个仓库的管理，可以轻松地切换分支、合并代码和解决冲突。它还提供了实时的代码差异对比、代码提交历史记录、分支可视化等功能，让开发者可以更加直观地了解代码的变化和演进。此外，Fork还支持任务列表、代码注释、代码搜索等实用功能，方便开发者进行项目管理和协作。<br>总的来说，Fork是一款易于上手（尤其对于非开发人员）且功能强大的版本管理软件<br><strong>软件图标：</strong><br>![[Pasted image 20231119161122.png]]<br><strong>内部界面图：</strong><br>![[Pasted image 20231119161202.png]]<br><strong>fork 软件的官网：</strong> <a href="https://git-fork.com/">Fork - a fast and friendly git client for Mac and Windows (git-fork.com)</a></p>]]></content>
    
    
    <summary type="html">git是目前世界上最先进分布式的版本控制系统 github是一个仓库速度快、免费和开源、分支方便</summary>
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Git" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/Git/"/>
    
    
    <category term="Git" scheme="https://fanxing28.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CSS的相关知识</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/CSS/%E3%80%90CSS%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/CSS/%E3%80%90CSS%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-11-28T14:32:48.000Z</published>
    <updated>2023-12-02T12:30:09.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-CSS-选择器"><a href="#一-CSS-选择器" class="headerlink" title="一. CSS 选择器"></a>一. CSS 选择器</h2><p>选择器CSS选择器是CSS规则的第一部分<br>它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式 选择器所选择的元素，叫做“选择器的对象”<br>我们从一个Html结构开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one_1&quot;</span>&gt;</span>&lt;/p &gt;     </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one_1&quot;</span>&gt;</span>&lt;/p &gt;   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于css属性选择器常用的有：</p><ul><li>id选择器（#box），选择id为box的元素</li><li>类选择器（.one），选择类名为one的所有元素</li><li>标签选择器（div），选择标签为div的所有元素</li><li>后代选择器（#box div），选择id为box元素内部所有的div元素</li><li>子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素</li><li>相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素</li><li>群组选择器（div,p），选择div、p的所有元素<br>还有一些使用频率相对没那么多的选择器：</li></ul><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><table><thead><tr><th align="left">选择器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:link</td><td align="left">选择未被访问的链接</td></tr><tr><td align="left">:visited</td><td align="left">选取已被访问的链接</td></tr><tr><td align="left">:active</td><td align="left">选择活动链接</td></tr><tr><td align="left">:hover</td><td align="left">鼠标指针浮动在上面的元素</td></tr><tr><td align="left">:focus</td><td align="left">选择具有焦点的</td></tr><tr><td align="left">:first-child</td><td align="left">父元素的首个子元素</td></tr></tbody></table><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><table><thead><tr><th align="left">选择器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:first-letter</td><td align="left">用于选取指定选择器的首字母</td></tr><tr><td align="left">:first-line</td><td align="left">选取指定选择器的首行</td></tr><tr><td align="left">:before</td><td align="left">选择器在被选元素的内容前面插入内容</td></tr><tr><td align="left">:after</td><td align="left">选择器在被选元素的内容后面插入内容</td></tr></tbody></table><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>[attribute]</code></td><td>选择带有attribute属性的元素</td></tr><tr><td><code>[attribute=value]</code></td><td>选择所有使用attribute&#x3D;value的元素</td></tr><tr><td><code>[attribute~=value]</code></td><td>选择attribute属性包含value的元素</td></tr><tr><td>[attribute&#x3D; value]</td><td>选择attribute属性以value开头的元素</td></tr><tr><td><strong>在CSS3中新增的选择器有如下：</strong></td><td></td></tr></tbody></table><h3 id="层次选择器（p-ul）"><a href="#层次选择器（p-ul）" class="headerlink" title="层次选择器（p~ul）"></a>层次选择器（p~ul）</h3><p>选择前面有p元素的每个ul元素</p><h3 id="伪类选择器-1"><a href="#伪类选择器-1" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:first-of-type</td><td>父元素的首个元素</td></tr><tr><td>:last-of-type</td><td>父元素的最后一个元素</td></tr><tr><td>:only-of-type</td><td>父元素的特定类型的唯一子元素</td></tr><tr><td>:only-child</td><td>父元素中唯一子元素</td></tr><tr><td>:nth-child(n)</td><td>选择父元素中第N个子元素</td></tr><tr><td>:nth-last-of-type(n)</td><td>选择父元素中第N个子元素，从后往前</td></tr><tr><td>:last-child</td><td>父元素的最后一个元素</td></tr><tr><td>:empty</td><td>指定空的元素</td></tr><tr><td>:enabled</td><td>选择被禁用元素</td></tr><tr><td>:disabled</td><td>选择被禁用元素</td></tr><tr><td>:checked</td><td>选择选中的元素</td></tr><tr><td>:not(selector)</td><td>选择非 <code>&lt;selector&gt;</code> 元素的所有元素</td></tr></tbody></table><h3 id="属性选择器-1"><a href="#属性选择器-1" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul><li>[attribute*&#x3D;value]：选择attribute属性值包含value的所有元素</li><li>[attribute^&#x3D;value]：选择attribute属性开头为value的所有元素</li><li>[attribute$&#x3D;value]：选择attribute属性结尾为value的所有元素</li></ul><h2 id="二-CSS选择器优先级"><a href="#二-CSS选择器优先级" class="headerlink" title="二. CSS选择器优先级"></a>二. CSS选择器优先级</h2><p>相信大家对CSS选择器的优先级都不陌生：</p><blockquote><p>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p></blockquote><p>到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p><ul><li>如果存在内联样式，那么 A &#x3D; 1, 否则 A &#x3D; 0</li><li>B的值等于 ID选择器出现的次数</li><li>C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数</li><li>D 的值等于 标签选择器 和 伪元素 出现的总次数<br>这里举个例子：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav-global</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.nav-link</span></span><br></pre></td></tr></table></figure>套用上面的算法，依次求出 A B C D 的值：</li><li>因为没有内联样式 ，所以 A &#x3D; 0I</li><li>D选择器总共出现了1次， B &#x3D; 1</li><li>类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C &#x3D; (1 + 0 + 0) &#x3D; 1</li><li>标签选择器出现了3次， 伪元素出现了0次，所以 D &#x3D; (3 + 0) &#x3D; 3<br>上面算出的A 、 B、C、D 可以简记作：(0, 1, 1, 3) 知道了优先级是如何计算之后，就来看看比较规则：</li><li>从左往右依次进行比较 ，较大者优先级更高</li><li>如果相等，则继续往右移动一位进行比较</li><li>如果4位全部相等，则后面的会覆盖前面的<br>经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用!important</li></ul><h2 id="三-继承属性"><a href="#三-继承属性" class="headerlink" title="三. 继承属性"></a>三. 继承属性</h2><p>在css中，继承是指的是给父元素设置一些属性，后代元素会自动拥有这些属性<br><strong>继承属性</strong><br>关于继承属性，可以分成：<br><strong>字体系列属性</strong></p><ul><li>font:组合字体</li><li>font-family:规定元素的字体系列</li><li>font-weight:设置字体的粗细</li><li>font-size:设置字体的尺寸</li><li>font-style:定义字体的风格</li><li>font-variant:偏大或偏小的字体<br><strong>文本系列属性</strong></li><li>text-indent：文本缩进  </li><li>text-align：文本水平对刘</li><li>line-height：行高</li><li>word-spacing：增加或减少单词间的空白</li><li>letter-spacing：增加或减少字符间的空白</li><li>text-transform：控制文本大小写</li><li>direction：规定文本的书写方向</li><li>color：文本颜色<br><strong>元素可见性</strong></li><li>visibility<br><strong>表格布局属性</strong></li><li>caption-side：定位表格标题位置</li><li>border-collapse：合并表格边框</li><li>border-spacing：设置相邻单元格的边框间的距离</li><li>empty-cells：单元格的边框的出现与消失</li><li>table-layout：表格的宽度由什么决定<br><strong>列表属性</strong></li><li>list-style-type：文字前面的小点点样式</li><li>list-style-position：小点点位置</li><li>list-style：以上的属性可通过这属性集合<br><strong>引用</strong></li><li>quotes：设置嵌套引用的引号类型<br><strong>光标属性</strong></li><li>cursor：箭头可以变成需要的形状<br>继承中比较特殊的几点：</li><li>a 标签的字体颜色不能被继承</li><li>h1-h6标签字体的大下也是不能被继承的<br><strong>无继承的属性</strong></li><li>display</li><li>文本属性：vertical-align、text-decoration</li><li>盒子模型的属性：宽度、高度、内外边距、边框等</li><li>背景属性：背景图片、颜色、位置等</li><li>定位属性：浮动、清除浮动、定位position等</li><li>生成内容属性：content、counter-reset、counter-increment</li><li>轮廓样式属性：outline-style、outline-width、outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after<br>参考文献：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks&#x2F;Selectors</a></li></ul><h2 id="四-rem-em-px-vw-vh-百分比的区别"><a href="#四-rem-em-px-vw-vh-百分比的区别" class="headerlink" title="四. rem em px vw vh 百分比的区别"></a>四. rem em px vw vh 百分比的区别</h2><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="(一) 介绍"></a>(一) 介绍</h3><p>传统的项目开发中，我们只会用到<code>px</code>、<code>%</code>、<code>em</code>这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性。而在<strong>CSS3 中又新增了</strong><code>rem</code>、<code>vh</code>、<code>vw</code>、<code>vm</code>等一些新的计量单位。利用这些新的单位可以开发出比较良好的响应式页面以及适应多种不同分辨率的终端，包括移动设备等</p><h3 id="二-单位"><a href="#二-单位" class="headerlink" title="(二) 单位"></a>(二) 单位</h3><p>在<code>css</code>单位中，可以分为<strong>相对长度单位、绝对长度单位</strong>，如下表所示：</p><table><thead><tr><th>CSS单位</th><th>描述</th></tr></thead><tbody><tr><td>相对长度单位</td><td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td></tr><tr><td>绝对长度单位</td><td>cm、mm、in、px、pt、pc</td></tr><tr><td>目前实际开发中最常用的5个单位分别是：px、em、rem、vh、vw</td><td></td></tr></tbody></table><h4 id="1-px"><a href="#1-px" class="headerlink" title="(1) px"></a>(1) px</h4><p><strong>px 表示像素：</strong> 它就是呈现在显示器上的一个个小点，每个像素点都是大小等同的，所以px被分在了绝对长度单位中</p><h4 id="2-em"><a href="#2-em" class="headerlink" title="(2) em"></a>(2) em</h4><p><strong>em 是相对长度单位：</strong> 相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于<strong>浏览器的默认字体尺寸</strong>（<code>1em = 16px</code>）<br><strong>为了简化 <code>font-size</code> 的换算：</strong> 可以在<code>css</code>中的 <code>body</code> 选择器中声明<code>font-size</code>&#x3D; <code>62.5%</code>，这就使 em 值变为 <code>16px*62.5% = 10px</code>，这样 <code>12px = 1.2em</code>, <code>10px = 1em</code>, 也就是说只需要将你的原来的<code>px</code> 数值除以 10，然后换上 <code>em</code>作为单位就行了<br><strong>特点：</strong></p><ul><li>em 的值并不固定</li><li>em 会继承父级元素的字体大小</li><li>em 是相对长度单位。<strong>相对于<code>当前对象内文本</code>的字体尺寸</strong>。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li><li>任意浏览器的默认字体尺寸都是 16px<br><strong>实例：</strong></li><li><strong>HTML</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line">    我是14px=1.4rem<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span>我是12px=1.2rem<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>样式：</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">10px</span>; &#125; <span class="comment">/*  公式16px*62.5%=10px  */</span> </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.big</span> &#123;<span class="attribute">font-size</span>: <span class="number">1.4rem</span>; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.small</span> &#123;<span class="attribute">font-size</span>: <span class="number">1.2rem</span>; &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>以上代码中<code>.big</code>元素的<code>font-size</code>为14px，而<code>.small</code>元素的<code>font-size</code>为12px</li></ul><h4 id="3-rem"><a href="#3-rem" class="headerlink" title="(3) rem"></a>(3) rem</h4><p><strong>rem 相对单位：</strong> 相对的只是HTML根元素<code>font-size</code>的值<br>同理，如果想要简化<code>font-size</code>的转化，我们可以在<strong>根元素</strong><code>html</code>中加入<code>font-size: 62.5%</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">62.5%</span>;  &#125; <span class="comment">/*  公式16px*62.5%=10px  */</span> </span><br></pre></td></tr></table></figure><p>这样页面中1rem&#x3D;10px、1.2rem&#x3D;12px、1.4rem&#x3D;14px、1.6rem&#x3D;16px;使得视觉、使用、书写都得到了极大的帮助<br><strong>特点：</strong></p><ul><li>rem单位可谓集相对大小和绝对大小的优点于一身</li><li>和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸</li></ul><h4 id="4-vh、vw"><a href="#4-vh、vw" class="headerlink" title="(4) vh、vw"></a>(4) vh、vw</h4><p>vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），<strong>同理：</strong><code>vh</code>则为窗口的高度<br><strong>这里的窗口分成几种情况：</strong></p><ul><li>在桌面端，指的是浏览器的可视区域</li><li>移动端指的就是布局视口<br>像<code>vw</code>、<code>vh</code>，比较容易混淆的一个单位是<code>%</code>，不过<strong>百分比</strong>宽泛的讲是<strong>相对于父元素</strong>：</li><li>对于普通定位元素就是我们理解的父元素</li><li>对于position: absolute; 的元素是相对于已定位的父元素</li><li>对于position: fixed; 的元素是相对于 ViewPort（可视窗口）</li></ul><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="(三) 总结"></a>(三) 总结</h3><ol><li><strong>px</strong>：<strong>绝对单位</strong>，页面按精确像素展示</li><li><strong>em</strong>：<strong>相对单位</strong>，基准点为父节点字体的大小，如果自身定义了<code>font-size</code>按自身来计算，整个页面内<code>1em</code>不是一个固定的值</li><li><strong>rem</strong>：<strong>相对单位</strong>，可理解为<code>root em</code>, 相对根节点<code>html</code>的字体大小来计算</li><li><strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单<br>**更详细(网页内容参考)**：<a href="https://zhuanlan.zhihu.com/p/477926721#:~:text=rem%EF%BC%9A%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D">zhuanlan.zhihu.com</a></li></ol><h3 id="四-视口"><a href="#四-视口" class="headerlink" title="(四) 视口"></a>(四) 视口</h3><ol><li><strong>布局视口（网页的宽度）</strong></li><li><strong>视觉视口（设备的宽度）</strong></li><li><strong>理想视口（布局视口&#x3D;视觉视口）</strong><br><strong>设置视口的大小为设备的宽度：</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="五-应用场景-适配方案"><a href="#五-应用场景-适配方案" class="headerlink" title="(五) 应用场景(适配方案)"></a>(五) 应用场景(适配方案)</h3><ol><li><strong>rem+媒体查询</strong><blockquote><p><strong>目的：</strong>根据不同的机型设置不同的html的font-size</p></blockquote></li><li><strong>rem+vw适配</strong><blockquote><p><strong>目的：</strong>让html的font-size与屏幕成正比例</p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">CSS基础知识点（选择器及优先级、继承属性、rem、em等单位区别）</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>SVG 使用</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%85%B6%E4%BB%96/SVG/%E3%80%90SVG%E3%80%91%E4%BD%BF%E7%94%A8/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%85%B6%E4%BB%96/SVG/%E3%80%90SVG%E3%80%91%E4%BD%BF%E7%94%A8/</id>
    <published>2023-11-28T14:32:48.000Z</published>
    <updated>2023-12-02T12:29:15.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>SVG 意为<strong>可缩放矢量图形</strong>（Scalable Vector Graphics）。 SVG 使用 XML 格式定义图像。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>SVG 图像在放大或改变尺寸的情况下其<strong>图形质量不会有所损失</strong> SVG 图像可在任何的分辨率下被高质量地打印<br><strong>文件后缀名</strong>（.svg）</p><h2 id="svg的常见属性"><a href="#svg的常见属性" class="headerlink" title="svg的常见属性"></a>svg的常见属性</h2><ul><li><code>width</code> 和 <code>height</code>:定义 SVG 画布的宽度和高度</li><li><code>viewBox</code>:定义 SVG 画布中的可见区域</li><li><code>preserveAspectRatio</code>:定义如何根据 viewBox 和 width&#x2F;height 比例缩放图形</li><li><code>fill</code>:定义填充颜色</li><li><code>stroke</code>:定义笔触颜色</li><li><code>stroke-width</code>:定义笔触宽度</li><li><code>fill-rule</code>:定义填充规则,evenodd 或 nonzero</li><li><code>transform</code>: 定义变换规则,如旋转、缩放、移动等除此之外,SVG 还有:- <code>&lt;svg&gt;</code> 根元素</li><li><code>&lt;g&gt;</code> 组合元素,用于组合多个形状</li><li><code>&lt;defs&gt;</code> 定义元素,用于定义可复用的元素</li><li><code>&lt;use&gt;</code> 使用 <code>&lt;defs&gt;</code> 中定义的元素</li><li><code>&lt;image&gt;</code> 定义图像</li><li><code>&lt;text&gt;</code> 定义文本</li><li><code>&lt;tspan&gt;</code> 定义文本的段落</li><li><code>&lt;pattern&gt;</code> 定义可重复的图案</li><li><code>&lt;linearGradient&gt;</code> 定义线性渐变</li><li><code>&lt;radialGradient&gt;</code> 定义放射性渐变<br><strong>定义不同的形状属性</strong></li><li><code>circle</code>:定义圆形, cx 和 cy 定义圆心,r 定义半径</li><li><code>rect</code>:定义矩形,x、y、width 和 height 定义矩形</li><li><code>line</code>:定义直线,x1、y1 和 x2、y2 定义直线的起点和终点</li><li><code>polyline</code>:定义折线,points 定义折线的点</li><li><code>polygon</code>:定义多边形,points 定义多边形的点</li><li><code>path</code>:定义复杂的形状,d 属性定义路径的数据</li></ul><h2 id="项目中使用到的属性"><a href="#项目中使用到的属性" class="headerlink" title="项目中使用到的属性"></a>项目中使用到的属性</h2><ol><li><strong>aria-hidden</strong><br> aria-hidden 是 SVG 中的一个无障碍访问属性，它用于定义 SVG 元素及其子元素是否可见给辅助功能。<br> 当 aria-hidden&#x3D;”true” 时：</li></ol><ul><li>SVG 元素及其子元素将不会被辅助功能(如屏幕阅读器)读取</li><li>但对普通用户依然可见<br>  当 aria-hidden&#x3D;”false” 或属性不存在时：</li><li>SVG 元素及其子元素可以被辅助功能读取</li><li>对普通用户也可见<br>  aria-hidden 的<strong>主要作用</strong>是在 SVG 中选择性地隐藏一些decorative(装饰性)元素，以便为残障用户提供更清晰简洁的页面。</li></ul><ol><li><strong>xmls</strong><br> xmlns 是 XML 文档中的一个属性，它定义了默认的 XML 命名空间。<br> 在 SVG 中，xmlns 的值通常是:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns=&quot;http://www.w3.org/2000/svg&quot;</span><br></pre></td></tr></table></figure></li><li><strong>xmlns:xlink</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;</span><br></pre></td></tr></table></figure>定义了 XLink 命名空间的前缀 xlink，允许在 SVG 中使用 XLink 相关的属性和元素。</li><li><strong>width和height</strong><br> <code>width</code> 和 <code>height</code>:定义 SVG 画布的宽度和高度</li><li><strong>path</strong><br> path:定义复杂的形状，d 属性定义路径的数据</li><li><strong>fill</strong><br> 颜色填充<br><strong>svg封装</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;svg aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use :class=&quot;fillClass&quot; :xlink:href=&quot;symbolId&quot; :fill=&quot;color&quot; /&gt;</span><br><span class="line">    &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    // 显示的 svg 图标名称（剔除 icon-）</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 直接指定 svg 图标的颜色</span><br><span class="line">    color: &#123;</span><br><span class="line">        type: String</span><br><span class="line">    &#125;,</span><br><span class="line">    // 通过 tailwind 指定 svg 颜色的类名</span><br><span class="line">    fillClass: &#123;</span><br><span class="line">        type: String</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 真实显示的 svg 图标名（拼接 #icon-）</span><br><span class="line">const symbolId = computed(() =&gt; `#icon-$&#123;props.name&#125;`)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="插件使用（vite-plugin-svg-icons）"><a href="#插件使用（vite-plugin-svg-icons）" class="headerlink" title="插件使用（vite-plugin-svg-icons）"></a>插件使用（vite-plugin-svg-icons）</h2><p>vite-plugin-svg-icons 是一个 Vite 插件，用于导入 SVG 图标。它可以将 SVG 文件变为 Vue 组件，方便在 Vue 项目中使用 SVG 图标。</p><ol><li><strong>安装</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-svg-icons</span><br></pre></td></tr></table></figure></li><li><strong>在 vite.config.js 中配置插件</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="title function_">vue</span>(),</span><br><span class="line">  <span class="title function_">createSvgIconsPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定需要缓存的图标文件夹</span></span><br><span class="line">    <span class="attr">iconDirs</span>: [path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;src/assets/svg&#x27;</span>)],</span><br><span class="line">    <span class="comment">// 指定 symbolId 的格式</span></span><br><span class="line">    <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><strong>放置 SVG 文件在 src&#x2F;assets&#x2F;svg 目录(默认目录,可以配置)</strong></li><li><strong>在mian.js中引入并注册封装文件</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> svgIcon <span class="keyword">from</span> <span class="string">&#x27;./components/SvgIcon/index.vue&#x27;</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;svg-icon&#x27;</span>, svgIcon)</span><br></pre></td></tr></table></figure></li><li><strong>在组件中导入 SVG</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;IconCalendar /&gt;  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import IconCalendar from &#x27;@/assets/svg/calendar.svg&#x27;  </span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    IconCalendar</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>vite-plugin-svg-icons 的<strong>主要特性</strong>：</li></ol><ul><li>支持underscore-naming和camelCase命名 SVG 图标</li><li>支持多色图标</li><li>支持 SVG Sprite(可配置)</li><li>TS 类型声明</li><li>Tree Shaking<br>支持自定义 SVG 目录和扩展名使用该插件可以极大简化在 Vue 项目中使用 SVG 图标的难度。不需要手动导入、配置每一个 SVG 文件,插件可以自动化地完成这些繁琐的工作。</li></ul>]]></content>
    
    
    <summary type="html">SVG 意为 可缩放矢量图形（Scalable Vector Graphics）。 SVG 使用 XML 格式定义图像。</summary>
    
    
    
    <category term="其他" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="SVG" scheme="https://fanxing28.github.io/categories/%E5%85%B6%E4%BB%96/SVG/"/>
    
    
    <category term="SVG" scheme="https://fanxing28.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>SQL语言概述</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E6%95%B0%E6%8D%AE%E5%BA%93/%E3%80%90SQL%E3%80%91%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E6%95%B0%E6%8D%AE%E5%BA%93/%E3%80%90SQL%E3%80%91%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</id>
    <published>2023-11-28T14:32:25.000Z</published>
    <updated>2023-12-02T12:26:26.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL发展"><a href="#SQL发展" class="headerlink" title="SQL发展"></a>SQL发展</h2><p>1972年，IBM在System R中实现SQUARE语言。 1974年，Boyce和Chamberlin改进SQUARE为SEQUEL。 1981年，IBM推出SQL&#x2F;DS，用SQL代替SEQUEL。 1986年ANSI公布第一个SQL标准。 1987年ISO将SQL采纳为国际标准。 ​</p><h2 id="SQL语言功能"><a href="#SQL语言功能" class="headerlink" title="SQL语言功能"></a><strong>SQL语言功能</strong></h2><p><strong>定义</strong></p><ul><li>创建CREATE</li><li>修改ALTER</li><li>删除DROP<br><strong>查询</strong></li><li>选择SELECT<br><strong>更新</strong></li><li>插入INSERT</li><li>更新UPDATE</li><li>删除DELETE<br><strong>控制</strong></li><li>授权GRANT</li><li>收权REVOKE</li></ul><h2 id="SQL的数据定义"><a href="#SQL的数据定义" class="headerlink" title="SQL的数据定义"></a>SQL的数据定义</h2><h3 id="创建和使用数据库"><a href="#创建和使用数据库" class="headerlink" title="创建和使用数据库"></a>创建和使用数据库</h3><p><strong>CREATE DATABASE&lt;数据库名&gt;</strong></p><blockquote><p>创建“学生选课”数据库 例：CREATE DATABASE 学生选课；</p></blockquote><p><strong>USE&lt;数据库名&gt;</strong></p><blockquote><p>打开“学生选课”数据库 例：USE 学生选课；</p></blockquote><p><strong>基本表创建的一般格式：</strong></p><blockquote><p>CREATE TABLE&lt;表名&gt; （ &lt;属性列名&gt;&lt;数据类型&gt;[列名完整性约束条件] [,&lt;属性列名&gt;&lt;数据类型&gt;[列名完整性约束条件],…] [,&lt;表级完整性约束条件&gt;] ​） 例：CREATE TABLE S ​( SNO CHAR(6), SN CHAR(10), SD CHAR(16), SB DATA ​);</p></blockquote><p><strong>注意点</strong></p><ul><li>在一个数据库中，不允许有两个基本表同名。</li><li>一个表中不能有两列同名。<br><strong>数据类型及其含义</strong></li><li>CHAR (n) 长度为n的定长字符串</li><li>VARCHAR (n) 最大长度为n的变长字符串</li><li>INT 长整数</li><li>SMALLINT 短整数</li><li>REAL 取决于机器精度的浮点数</li><li>FLOAT(n) 浮点数，精度至少为n位</li><li>定点数，由p位数字(符号、小数点除外)组成，小数后面有d位数字</li><li>NUMERIC(p,d)</li><li>DECIMAL(p,d)</li><li>DATE 日期，包含年、月、日，格式为YYYY-MM-DD</li><li>TIME 时间，包含一日的时、分、秒，格式为HH:MM:SS<br><strong>定义主键</strong><br>保证属性值的唯一性和非空型。<blockquote><p>PRIMARY KEY[(&lt;属性列（组）&gt;)]</p></blockquote></li></ul><p>例：CREATE TABLE S ( SNO CHAR(6) <em>PRIMARY KEY</em>, SN CHAR(10), SD CHAR(16), SB DATA ); 或者 CREATE TABLE S ( SNO CHAR(6), CHAR(10), SD CHAR(16), SB DATA, PRIMARY KEY(SNO) ​);<br><strong>定义外键</strong></p><blockquote><p>FOREIGN KEY (&lt;外键&gt;) REFERENCES&lt;被参照表名&gt;(&lt;与外键对应的主键名&gt;)</p></blockquote><p>CREATE TABLE SC ( SNO CHAR(6), CNO CHAR(6), GRADE DEC(4,1), PRIMARY KEY (SNO, CNO), FOREIGN KEY (SNO) REFERENCES S(SNO), FOREIGN KEY (CNO) REFERENCES C(CNO) );<br><strong>增加列或表约束规则</strong></p><blockquote><p>ALTER TABLE &lt;表名&gt; ADD &lt;属性列名&gt; &lt;数据类型&gt; [完整性约束| &lt;完整性约束&gt;;</p></blockquote><p>例：在学生表S中加入一属性列SH表示学生的籍贯ALTER TABLE S ADD SH CHAR(30);在学生关系表S补充定义SNO为主键ALTER TABLE S ADD PRIMARY KEY (SNO);<br><strong>注意点</strong>：新增加的属性不能定义为NOT NULL。<br><strong>修改原有列的类型</strong></p><blockquote><p>ALTER TABLE &lt;表名&gt; ALTER COLUMN &lt;属性列名&gt; &lt;数据类型&gt; ;</p></blockquote><p>例：将基本表S中的学生姓名SN长度修改为12 ALTER TABLE S ALTER COLUMN SN CHAR(12);<br><strong>删除原有的列或约束规则</strong></p><blockquote><p>ALTER TABLE &lt;表名&gt; DROP {[CONSTRAINT] &lt;完整性约束&gt;| COLUMN &lt;列名&gt; [CASCADE|RESTRICT]}:</p></blockquote><p>RESTRICT:在没有视图或约束引用该属性列时，该属性列才能被删除 CASCADE:表示删除某列时，所有引|用该列的视图和约束也被自动删除 例：删除基本表S中学生的性别SEX属性列 ALTER TABLE S DROP COLUMN SEX; 例：删除基本表S ALTER TABLE S<br><strong>INSERT INTO向表中追加元组的值</strong><br>例：将一个新学生记录，插入学生关系表S中。 (‘S31’,’王浩’,’计算机’,’1999-10-15’,’男’) INSERT INTO S （SNO，SN，SD，SB，SEX） VALUES (‘S31’, ‘王浩’, ‘计算机’, ‘1999-10-15’, ‘男’) ； 例：向表SC中插入一条选课元组(‘S31’，‘C01’） ​INSERT INTO S （SNO，CNO） ​VALUES (‘S31’,’C01’)<br><strong>查询结果的显示</strong><br><strong>一个完整的数据查询语句的格式</strong><br>SELECT [ ALL|DISTINCT ]&lt;目标列表达式1&gt;[&lt;目标列表达2&gt;, …] FROM &lt;表名或视图名1&gt; [, &lt;表名或视图名2&gt;, …] [ WHERE &lt;元组选择条件表达式&gt;] [ GROUP BY &lt;属性列名1&gt;[ ,&lt;属性列名2&gt;, …] [ HAVING &lt;组选择条件表达式&gt;]] [ORDER BY &lt;目标列名1&gt; [ASC|DESC] [,&lt;目标列名2&gt; [ASC|DESC], …]]<br><strong>投影属性列</strong><br>SELECT [ ALL|DISTINCT ]&lt;目标列表达式1&gt;[&lt;目标列表达2&gt;, …] FROM &lt;表名&gt;<br>查询显示所有学生的信息<br>SELECT * ​FROM S;<br>表示所有属性信息<br><strong>去掉重复元组</strong><br>SELECT [ ALL|DISTINCT ]&lt;目标列表达式1&gt;[&lt;目标列表达2&gt;, …] FROM &lt;表名&gt;<br>查询选修了课程的学生的学号<br>SELECT DISTINCT SNO ​FROM SC;<br>DISTINCT：去掉结果中重复行<br><strong>查询结果的计算</strong><br>SELECT [ ALL|DISTINCT ]&lt;目标列表达式1&gt;[&lt;目标列表达2&gt;, …] FROM &lt;表名&gt;<br>统计学生的总人数<br>​SELECT COUNT( * ) ​FROM S<br>查询所有学生的学号和年龄<br>SELECT SNO, datediff(Year, SB, Getdate()) + 1 ​FROM S;<br>Getdata():获取系统当前的日期<br>datediff(datepart, startdate, enddate)<br><strong>聚集函数</strong></p><ul><li>COUNT( * ) 统计元组个数</li><li>COUNT([DISTINCT|ALL] &lt;列名&gt;) 统计一列中值的个数</li><li>SUM([DISTINCT|ALL] &lt;列名&gt;) 计算一列值的总和(此列必须是数值型)</li><li>AVG([DISTINCT|ALL] &lt;列名&gt;) 计算一-列值的平均值(此列必须是数值型)</li><li>MAX([DISTINCT|ALL] &lt;列名&gt;) 求一列值中的最大值</li><li>MIN([DISTINCT|ALL] &lt;列名&gt;) 求一列值中的最小值<br><strong>目标列命名</strong><br>查询所有学生的学号和年龄<blockquote><p>SELECT SNO (AS) ‘学号’, ‘年龄’ &#x3D; datediff(Year, SB, Getdate()) + 1 ​FROM S;</p></blockquote></li></ul><p><strong>查询结果的排序</strong></p><blockquote><p>SELECT [ ALL|DISTINCT ]&lt;目标列表达式1&gt;[ ,&lt;目标列表达式2&gt;, …] FROM &lt;表名&gt; ORDER BY &lt;目标列1&gt; [ASC|DESC][，&lt;目标列2 &gt; [ASCIDESC]，…]</p></blockquote><p>查询所有选修信息，按课程号升序排列，同一课程内的学生成绩降序排列</p><blockquote><p>SELECT * ​FROM SC ​ORDER BY CNO ,GRADE DESC 或用CNO和GRADE对应的第几列数字表示</p></blockquote><ul><li>&lt;目标列1&gt;：先按第一列排序 </li><li>ASC:升序（默认值）</li><li>DESC:降序</li><li>&lt;目标列2&gt;：第一列相同，再按第二列排序</li><li>关键字：ORDER BY<br><strong>查询满足条件的元组</strong><blockquote><p>SELECT [ ALL|DISTINCT ]&lt;目标列表达式1&gt;[ ,&lt;目标列表达式2&gt;, …] FROM &lt;表名或视图名1&gt; [,&lt;表名或视图名2&gt;, …] [ WHERE &lt;元组选择条件表达式&gt;]</p></blockquote></li></ul><p><strong>运算符</strong></p><ul><li><p>算术运算 +, -, *, &#x2F;, % (取余)</p></li><li><p>比较运算 &#x3D;, &lt;&gt;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt;</p></li><li><p>逻辑运算 AND，OR，NOT</p></li><li><p>谓词运算</p></li><li><p>[NOT] BETWEEN…AND</p></li><li><p>[NOT] LIKE</p></li><li><p>[NOT] IN</p></li><li><p>IS [NOT] NULL<br><strong>运算符的优先顺序（由高到低）</strong></p></li><li><p>算术运算 +, -, *, &#x2F;, % (取余)</p></li><li><p>比较运算 &#x3D;, &lt;&gt;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt;</p></li><li><p>谓词运算</p></li><li><p>[NOT] BETWEEN…AND</p></li><li><p>[NOT] LIKE</p></li><li><p>[NOT] IN</p></li><li><p>IS [NOT] NULL</p></li><li><p>逻辑运算 AND，OR，NOT<br><strong>BETWEEN谓词</strong><br>BETWEEN谓词用于判断某个值是否属于一个指定的区间<br>一般形式为:<br>E [NOT] BETWEEN E1 AND E2<br>其语义为:<br>[NOT] (E&gt;&#x3D;E1 AND E&lt;&#x3D;E2) E、E1和E2都是表达式，且E1&lt;E2。<br>查询出生时间在1998-01-01到1999-12-31之间的学生的姓名和出生时间<br>SELECT SN,SB FROM S WHERE SB BETWEEN ‘1998-01-01’ AND ‘1999-12-31’; 或 WHERE SB&gt;&#x3D; ‘1998-01-01’ AND SB&lt;&#x3D;’1999-12-31’;<br><strong>LIKE谓词</strong><br>LIKE谓词用于部分匹配查询（模糊查询）<br>一般形式为:</p></li><li><p>“字符串表达式”中通配符:</p></li><li><p>字符”_”:代表任意一个单字符</p></li><li><p>字符“%”:代表长度可为零的任意长字符串<br>&lt;属性列名&gt; [NOT] LIKE字符串表达式<br>查询姓“王”的所有学生的学号和姓名。<br>SELECT SNO,SN FROM S WHERE SN LIKE ‘ % _ 王（ % ）’；<br>“ \ ” 转义字符:用于去掉一些特殊字符的特定含义，使其被作为普通字符看待, 如用“%”去匹配字符%，用_ 去匹配字符_<br><strong>IN谓词</strong><br>IN谓词适用于判断一一个值是否属于一个集合<br>与比较运算符中“&#x3D;”含义相同。<br>一般形式为:<br>E [NOT] IN (V1, V2,…, Vn)<br>其语义为:<br>[NOT] (E&#x3D; V1 OR E&#x3D; V2 OR… OR E&#x3D; Vn)<br>查询非数学系和非计算机系的学生的学号、姓名和所在系<br>SELECT SNO,SN,SD FROM S WHERE SD NOT IN(‘数学’，‘计算机’)；<br><strong>NULL谓词</strong><br>NULL谓词适用于判断属性值是否为空<br>一般形式为：<br>&lt;属性列名&gt;IS [NOT] NULL<br>查询所有缺少选课成绩的学生的学号和相应的课程号<br>SELECT SNO,CNO FROM SC WHERE GRADE IS NULL;<br><strong><del>ANY或ALL谓词</del></strong><br>常与比较运算符连用<br>查询其他专业中比软件工程专业所有老师年龄大的教师姓名年龄<br>SELECT TN,AGE FROM T WHERE AGE&gt;ALL(SELECT AGE FROM T WHERE DEPT&#x3D;’软件工程’) and DEPT&lt;&gt;’软件工程’ order by age desc<br>ANY、ALL谓词与集函数及IN谓词的等价关系</p></li><li><p>ANY ALL</p></li><li><p>&#x3D; IN -</p></li><li><p>&lt; &lt;MAX &lt;MIN</p></li><li><p>&lt;&#x3D; &lt;&#x3D;MAX &lt;&#x3D;MIN</p></li><li><blockquote><blockquote><p>MAX &gt;MIN</p></blockquote></blockquote></li><li><blockquote><p>&#x3D; &gt;&#x3D;MAX &gt;&#x3D;MIN</p></blockquote></li><li><p>&lt;&gt;或!&#x3D; - NOT IN<br><strong>EXISTS谓词</strong><br>不返回任何实际数据，只产生逻辑值真、假<br>查询担任C2课程的教师性名&#96;&#96;&#96;&#96;<br>SELECT TN FROM T WHERE EXISTS (SELECT * FROM TC WHERE TNO &#x3D; T.TNO AND CNO&#x3D;’C2’)</p></li></ul><p>分组聚集查询<br>完整的数据查询语句的格式<br>SELECT [ ALL|DISTINCT ]&lt;目标列表达式1&gt;[,&lt;目标列表达式2&gt;, … ] FROM &lt;表名或视图名1&gt; [, &lt;表名或视图名2&gt; , …] [ WHERE &lt;元组选择条件表达式&gt; ] [ GROUP BY &lt;属性列名1&gt;[, &lt;属性列名2&gt;, …][ HAVING &lt;组选择条件表达式&gt;]] [ ORDER BY &lt;目标列名1&gt; [ASC|DESC] [, &lt;目标列名2&gt; [ASC|DESC], …]]<br>语句格式<br>GROUP BY &lt;属性列名1&gt;[ ,&lt;属性列名2&gt; , …] [HAVING条件] 依次按属性列名1,属性列名2…的值进行分组 HAVING子句对分组进行筛选 聚集函数将以每一分组中的元组为计算对象<br>查询选修了课程的学生学号和平均成绩。<br>SELECT SNO,AVG(GRADE) FROM SC GROUP BY SNO;<br>注意：聚集函数是不允许用于Where子句中的：Where子句是对每一元组进行条件过滤，而不是对集合进行条件过滤。<br>分组过滤：若要对集合(即分组)进行条件过滤，即满足条件的集合&#x2F;分组留下，不满足条件的集合&#x2F;分组剔除。<br>Having子句，又称分组过滤子句。需要有Group by子句支持，换句话说，没有Group by子句，便不能有Having子句。<br>Select 列名| expr | agfunc(列名) [[, 列名| expr | agfunc(列名) ] … ] ​From 表名1 [, 表名2 … ] ​[ Where 检索条件] ​[ Group by 分组条件[ Having 分组过滤条件] ] ;<br>查找男生人数超过2名的系的名称。<br>SELECT SD FROM S WHERE SEX&#x3D;’男’ GROUP BY SD HAVING COUNT(*)&gt;2;<br>总括：</p><ul><li>WHERE 子句从由FROM指定的数据对象中选择满足条件的元组</li><li>GROUP BY 子句对WHERE 子句选择出来的元组进行分组</li><li>HAVING对GROUP BY的分组进行选择</li><li>SELECT 子句对选择出来的分组产生查询结果<br><strong>连接查询</strong><br><strong>一个完整的数据查询语句的格式</strong><br>SELECT [ ALL|DISTINCT ]&lt;目标列表达式1&gt;[,&lt;目标列表达式2&gt;, … ] FROM&lt;表名或视图名1&gt;[&lt;表名或视图名2&gt;，…] [ WHERE &lt;元组选择条件表达式&gt; ] [ GROUP BY &lt;属性列名1&gt;[ &lt;属性列名2&gt;00] [ HAVING &lt;组选择条件表达式&gt;]] [ ORDER BY &lt;目标列名1&gt; [ASC|DESC] [, &lt;目标列名2&gt; [ASC|DESC]，…]1<br><strong>多表连接查询</strong><br>查询选修课程号为”C01”的学生学号和成绩。<br>SELECT SNO,GRADE FROM SC WHERE CNO&#x3D;’C01’;<br>查询选修课程号为”C01”的学生姓名和成绩。<br>SELECT SN,GRADE FROM SC,S(SC和S进行广义笛卡尔积运算) WHERE CNO&#x3D;’C01’ AND SC.CNO&#x3D;S.SNO;<br>多表连接时，如两个表的属性名相同，则需采用表名. 属性名方式来限定该属性是属于哪一个表。<br><strong>外连接查询</strong><br>在SQL语句中，外连接在FROM子包中指定，其语法规则如下:<br>FROM &lt;左关系&gt; LEFT| RIGHT|FULL [OUTER] JOIN &lt;右关系&gt; ON &lt;连接条件&gt;</li><li>左连接：LEFT [OUTER] JION</li><li>右连接：RIGHT [OUTER] JION</li><li>全外连接：FULL [OUTER] JION<br>连接条件可包含对参与连接的关系进行元组选择的条件</li><li>如“表1 Left Outer Join 表2”，则连接后，表1的任何元组t都会出现在结果表中，如表2中有满足连接条件的元组s, 则t与s连接；否则t与空值元组连接；</li><li>如“表1 Right Outer Join 表2”，则连接后，表2的任何元组s都会出现在结果表中，如表1中有满足连接条件的元组t, 则t与s连接；否则s与空值元组连接；</li><li>如“表1 Full Outer Join 表2”，是前两者的并。<br>查询所有学生姓名及选修课程号为“C01”的成绩，没有选修该课程的学生，成绩显示为空。<br>SELECT SN,GRADE FROM S LEFT OUTER JOIN SC ON SC.SNO&#x3D;S.SNO AND CNO&#x3D;’C01’;<br><strong>内连接查询</strong><br>常规连接查询也称为内连接查询，在FROM子句中指定，其语法规则如下: FROM &lt;左关系&gt; [ INNER] JOIN &lt;右关系&gt; ON &lt;连接条件&gt;<br>inner join(等值连接) 只返回两个表中联结字段相等的行<br>求所有教师的任课情况并按教师号排序(没有任课的教师也需列在表中)。<br>Select Teacher.T#, Tname, Cname ​From Teacher Inner Join Course ​ ON Teacher.T# &#x3D; Course.T# ​Order by Teacher.T# ASC;<br>重名之处理<br>连接运算涉及到重名的问题，如两个表中的属性重名，连接的两个表重名(同一表的连接)等，因此需要使用别名以便区分<br>select中采用别名的方式<br>Select 列名as 列别名[ [, 列名as 列别名] … ] ​From 表名1 as 表别名1, 表名2 as 表别名2, … ​Where 检索条件;<br>上述定义中的as 可以省略当定义了别名后，在检索条件中可以使用别名来限定属性<br>求有薪水差额的任意两位教师<br>Select T1.Tname as Teacher1, T2.Tname as Teacher2 ​From Teacher T1, Teacher T2 ​Where T1.Salary &gt; T2.Salary ;<br><strong>合并查询</strong><br>使用UNION操作符将来自不同查询的数据组合起来形成一个综合信息的查询结果。<br>UNION操作会自动将重复的数据行剔除。<br>注意：参加合并查询结果的各子查询的数据数目相同，对应的数据类型要相容。<br>从TC表中查询出教师编号为S4和S5教师编号和总教龄<br>SELECT TNO AS 教师编号，SUM(YEAR) AS 总教龄 FROM TC WHERE (TNO&#x3D;’S4’) GROUP BY TNO UNION SELECT TNO AS 教师编号，SUM(YEAR) AS 总教龄 ​ FROM TC ​WHERE (TNO&#x3D;’S5’) ​GROUP BY TNO<br><strong>θ-连接之不等值连接</strong><br>查询课程编号’C01’有成绩差的任意两位同学学号<br>SELECT SC1.SNO AS SNO1 , SC2.SNO AS SNO2 ​FROM SC SC1, SC SC2 ​WHERE SC1.GRADE &gt; SC2.GRADE AND ​SC1.CNO &#x3D; SC2.CNO AND SC1.CNO &#x3D; ‘C01’ AND ​ SC2.CNO &#x3D; ‘C01’<br>外连接：FROM &lt;左关系&gt; LEFT | RIGHT |FULL [OUTER] JION &lt;右关系&gt; ON &lt;连接条件&gt;<br><strong>自身连接：</strong><blockquote><p>对一个表进行多次扫描时使用</p></blockquote></li></ul><p>查询比周老师年龄大的老师的姓名、年龄、和周的年龄<br>SELECT X.TN AS 姓名，X.AGE AS 年龄，Y.AGE AS 周年龄 ​ FROM T AS X,T AS Y WHERE X.AGE&gt;Y.AGE AND Y.TN&#x3D;’周’<br><strong>视图</strong></p><ul><li><strong>创建视图</strong><br>  一般格式：CREATE VIEW &lt;视图名&gt;[（&lt;列名&gt;，&lt;列名&gt;）…] AS &lt;子查询&gt;</li><li><strong>删除视图</strong><br>  格式：DROP VIEW &lt;视图名&gt;</li><li><strong>删除视图名</strong><br>  格式：DROP VIEW 视图名</li><li><strong>更新视图</strong><br>  插入、删除、修改<br>  将视图STO2中的教师编号S1的教师改名为“王明”<br>  UPDATE STO2 SET TN&#x3D;’王明’ WHERE TNO&#x3D;’S1’</li><li><strong>限制条件</strong><br>  如果一个视图是从多个基本表使用联接操作导出的，则此视图不允许更新。<br>  如果在导出视图的过程中，使用了分组和聚合操作，也不允许该视图更新。<br>  若视图的字段来自字段表达式或常量、操作，则不允许对此视图执行INSERT和UPDATE操作，但可以进行DELETE操作。<br>  若视图定义中含有GROUP BY、DISTINCT短语或或嵌套查询，且内层查询的FROM子句中涉及的表也是导出该视图的基本表，则此视图不允许更新。</li></ul>]]></content>
    
    
    <summary type="html">SQL语句基础概述</summary>
    
    
    
    <category term="数据库" scheme="https://fanxing28.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="后端" scheme="https://fanxing28.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="SQL" scheme="https://fanxing28.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 新特性</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/CSS/%E3%80%90CSS3%E3%80%91%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/CSS/%E3%80%90CSS3%E3%80%91%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2023-11-28T14:32:25.000Z</published>
    <updated>2023-12-02T12:22:44.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-CSS基础知识"><a href="#一-CSS基础知识" class="headerlink" title="一. CSS基础知识"></a>一. CSS基础知识</h2><p><strong>渐进增强 progressive enhancement：</strong> 针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br><strong>优雅降级 graceful degradation：</strong> 一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><h3 id="主流的五大浏览器"><a href="#主流的五大浏览器" class="headerlink" title="主流的五大浏览器"></a>主流的五大浏览器</h3><table><thead><tr><th>浏览器</th><th>内核</th><th>兼容性前缀</th></tr></thead><tbody><tr><td>chrome</td><td>webkit（旧）&#x2F;blink（新）</td><td>-webkit</td></tr><tr><td>safari</td><td>webkit</td><td>-webkit</td></tr><tr><td>欧朋</td><td>presto</td><td>-o</td></tr><tr><td>IE</td><td>trident</td><td>-ms</td></tr><tr><td>火狐</td><td>gecko</td><td>-moz</td></tr><tr><td>在不同浏览器中同一属性</td><td></td><td></td></tr><tr><td>如：border-radius</td><td></td><td></td></tr></tbody></table><ul><li>webkit-border-radius</li><li>o-border-radius</li><li>ms-border-radius</li><li>moz-border-radius<br>检查HTML5&#x2F;CSS3属性兼容网站（<a href="%5Bhttps://caniuse.com/"><a href="https://caniuse.com/">Can I use… Support tables for HTML5, CSS3, etc</a></a>）](<a href="https://caniuse.com/)%EF%BC%89">https://caniuse.com/)）</a>)</li></ul><h3 id="元素隐藏的方式"><a href="#元素隐藏的方式" class="headerlink" title="元素隐藏的方式"></a>元素隐藏的方式</h3><ul><li>display: none; 是极端值</li><li>visibility: hidden; 是极端值</li><li>opacity: 0; 有中间值<br>有极端值属性的元素：只有消失和出现两个状态，不能过渡<br>有中间值属性的元素：是在消失和出现之间缓慢过渡的</li></ul><h2 id="二-2D-变换"><a href="#二-2D-变换" class="headerlink" title="二. 2D 变换"></a>二. 2D 变换</h2><p>CSS3 2D转换可以对元素进行移动、缩放、转动、拉长或拉伸。</p><h3 id="2D-平移"><a href="#2D-平移" class="headerlink" title="2D 平移"></a>2D 平移</h3><blockquote><p>属性：transform</p></blockquote><p><strong>属性值</strong><br><strong>translate(x，y)</strong></p><blockquote><p>控制元素在x和y轴平移</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">100px</span>);<span class="comment">/* 沿着x轴和y轴平移100px */</span> </span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>) <span class="built_in">translateY</span>(<span class="number">100px</span>);<span class="comment">/* 和上面一样的效果 */</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：如果括号内只写一个数值（默认另一个为0），只在x轴平移<br><strong>translateX()</strong></p><blockquote><p>控制元素在x轴平移</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);<span class="comment">/* 沿着x轴向右平移100px */</span> </span><br></pre></td></tr></table></figure><p><strong>translateY()</strong></p><blockquote><p>控制元素在y轴平移</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100px</span>);<span class="comment">/* 沿着y轴向上平移100px */</span> </span><br></pre></td></tr></table></figure><p>百分比写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>，<span class="number">100%</span>);<span class="comment">/* 参考元素自身的宽高  */</span></span><br></pre></td></tr></table></figure><p>注：以上三种属性值支持：</p><ul><li>数值</li><li>百分比（参考元素自身的宽高，不脱离文档流）</li><li>支持负值</li><li>translate(100px)只写一个值，另外一个值为0</li></ul><h3 id="元素水平垂直居中"><a href="#元素水平垂直居中" class="headerlink" title="元素水平垂直居中"></a>元素水平垂直居中</h3><blockquote><p>优点：不需要知道父子元素的宽高</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.子绝父相</span><br><span class="line"><span class="number">2</span>.子&#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2D-旋转"><a href="#2D-旋转" class="headerlink" title="2D 旋转"></a>2D 旋转</h3><blockquote><p>属性：transfrom</p></blockquote><p>属性值：rotate(度数)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">50deg</span>);</span><br></pre></td></tr></table></figure><p>度数为正：顺时针转动；度数为负：逆时针转动。<br><strong>2d 旋转加平移</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 先旋转后平移 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>) <span class="built_in">translate</span>(<span class="number">200px</span>);</span><br><span class="line"><span class="comment">/* 先平移后旋转 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">200px</span>) <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br></pre></td></tr></table></figure><p>注：以上两种的参考轴不同，调换顺序，效果不同。</p><h3 id="变换圆点"><a href="#变换圆点" class="headerlink" title="变换圆点"></a>变换圆点</h3><blockquote><p>属性：transform-origin</p></blockquote><p>圆点默认：中心点<br><strong>属性值</strong><br>支持：</p><ul><li>数值<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>:  <span class="number">0</span>;<span class="comment">/* 左上 */</span></span><br></pre></td></tr></table></figure></li><li>百分比<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br></pre></td></tr></table></figure></li><li>方位词<blockquote><p>left right center top bottom center</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: top right;</span><br><span class="line"><span class="attribute">transform-origin</span>: right top;<span class="comment">/* 两者效果相同 */</span></span><br></pre></td></tr></table></figure><blockquote><p>只有方位词的时候顺序可以换</p></blockquote></li></ul><p>参考元素的宽高<br><strong>混搭</strong></p><blockquote><p>混搭的时候顺序不可以换</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: top <span class="number">100%</span>;</span><br></pre></td></tr></table></figure><blockquote><p>如果只写一个方位词,另外一个默认为center</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: bottom;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform-origin</span>: bottom;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">20deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">10deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">10deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">7</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./变形原点练习/1print.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./变形原点练习/2print.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./变形原点练习/3print.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./变形原点练习/4print.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./变形原点练习/5print.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./变形原点练习/6print.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./变形原点练习/7print.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果动图</strong>：</p><h3 id="2D-缩放"><a href="#2D-缩放" class="headerlink" title="2D 缩放"></a>2D 缩放</h3><blockquote><p>属性：transform</p></blockquote><p>倾斜的默认原点为：中心点<br><strong>属性值</strong></p><blockquote><p>scale(倍数);</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>scaleX()</td><td>只在水平方向的缩放倍数</td></tr><tr><td>scaleY()</td><td>只在垂直方向的缩放倍数</td></tr><tr><td>scale(x,y)</td><td>x,y代表水平方向和垂直方向的缩放倍数</td></tr><tr><td>注：x,y是数值不用写单位</td><td></td></tr><tr><td>scale(x,y)：如果只写一个值，另外一个值默认是相同的数值。</td><td></td></tr><tr><td><strong>属性值分类</strong></td><td></td></tr><tr><td>数值为正数时：</td><td></td></tr></tbody></table><ul><li>数值小于1：缩小</li><li>数值等于1：不变</li><li>数值大于1：放大<br>数值为0时：消失<br>数值为负数时：先翻转再缩放<br>实例：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./day13_img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><strong>效果动态图</strong> ：</li></ul><p><img src="/../_resources/2D%E7%BC%A9%E6%94%BE.gif" class="lazyload placeholder" data-srcset="/../_resources/2D%E7%BC%A9%E6%94%BE.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/2D缩放.gif"></p><h3 id="2D-倾斜"><a href="#2D-倾斜" class="headerlink" title="2D 倾斜"></a>2D 倾斜</h3><blockquote><p>属性：transform</p></blockquote><p>倾斜的默认原点为：中心点<br><strong>属性值</strong></p><blockquote><p>skew(度数);</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>scaleX()</td><td>只在水平方向的倾斜度数</td></tr><tr><td>scaleY()</td><td>只在垂直方向的倾斜度数</td></tr><tr><td>scale(x,y)</td><td>x,y代表水平方向和垂直方向的倾斜度数</td></tr><tr><td><strong>注</strong>：如果skew(x,y)只写一个值，代表的是skewX()</td><td></td></tr><tr><td>实例：</td><td></td></tr></tbody></table><blockquote><p>倾斜为平行四边形，且里面的内容不倾斜。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:</span></span><br><span class="line"><span class="language-css">        transition-duration: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 默认原点中心点 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">skew</span>(-<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2d倾斜<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果动态图</strong> ：<br><img src="/../_resources/%E5%80%BE%E6%96%9C%E7%BB%83%E4%B9%A0.gif" class="lazyload placeholder" data-srcset="/../_resources/%E5%80%BE%E6%96%9C%E7%BB%83%E4%B9%A0.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/倾斜练习.gif"></p><h2 id="三-3D-变换"><a href="#三-3D-变换" class="headerlink" title="三. 3D 变换"></a>三. 3D 变换</h2><p><strong>坐标</strong></p><ul><li>2d:x y</li><li>3d:x y z<br>x轴称为左右<blockquote><p>+向右 -向左</p></blockquote></li></ul><p>y轴称为上下</p><blockquote><p>+向下 -向上</p></blockquote><p>z轴称为前后</p><blockquote><p>+向前 -向后</p></blockquote><h3 id="3D-平移"><a href="#3D-平移" class="headerlink" title="3D 平移"></a>3D 平移</h3><p><strong>transform</strong></p><ul><li>translateZ() ：数值为正向前平移；数值为负向后平移</li><li>translate3d(x,y,z)<br><strong>3D环境</strong><blockquote><p>创建3D环境，必须写</p></blockquote></li></ul><p><strong>加给父元素以及以上的元素</strong> 默认值是2d环境（属性值：flat）</p><blockquote><p>transform-style: preserve-3d;</p></blockquote><p><strong>3D眼镜</strong><br><strong>加给父元素以及以上的元素</strong> 默认值是none<br><strong>景深</strong></p><blockquote><p>perspective: 100px;</p></blockquote><p>设置元素近大远小<br><strong>设置元素的透视效果</strong></p><blockquote><p>transform:perspective()</p></blockquote><ul><li>设置给当前元素</li><li>里面只能写数值（数值越小效果越明显且必须大于0）</li></ul><h3 id="3D-旋转"><a href="#3D-旋转" class="headerlink" title="3D 旋转"></a>3D 旋转</h3><p>transform<br><code>rotate()</code>效果等同于<code>rotatez()</code>：在Z轴上旋转</p><blockquote><p>X：为正值（向里旋转）；为负值（向外旋转）</p></blockquote><p>rotateX()：在X轴上旋转</p><blockquote><p>Y：为正值（向右旋转）；为负值（向左旋转）</p></blockquote><p>rotateY()：在Y轴上旋转</p><blockquote><p>Z：为正值（顺时针旋转）；为负值（逆时针旋转）</p></blockquote><p>rotate3d(x,y,z,旋转度数)</p><blockquote><p>例：rotate3d(1,1,1,30deg)</p></blockquote><p><strong>x,y,z</strong></p><ul><li>0-1之间</li><li>0表示不旋转</li><li>1表示旋转也可以写小数,不推荐</li></ul><h3 id="3D-缩放"><a href="#3D-缩放" class="headerlink" title="3D 缩放"></a>3D 缩放</h3><ul><li>scalex()<blockquote><p>X轴缩放</p></blockquote></li><li>scaley()<blockquote><p>Y轴缩放</p></blockquote></li><li>scalez()<blockquote><p>Z轴缩放</p></blockquote></li><li>scale3d(x,y,z)必须结合其他的变形函数<strong>一起使用</strong>并且必须放在其他变形函数的<strong>后面</strong><br>数值：</li><li>大于1：放大</li><li>小于1：缩小</li></ul><h2 id="四-动画"><a href="#四-动画" class="headerlink" title="四. 动画"></a>四. 动画</h2><p>在 CSS3 出现之前，动画都是通过 JavaScript 动态的改变元素的样式属性来完成了，这种方式虽然能够实现动画，但是在性能上存在一些问题。CSS3 的出现，让动画变得更加容易，性能也更加好。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><strong>定义关键帧</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名字&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;&#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行关键帧</strong></p><blockquote><p>在需要加动画的元素选择器中添加动画属性</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-name</span>: move;</span><br><span class="line"><span class="attribute">animation-duration</span>: <span class="number">3s</span>(持续时间);</span><br></pre></td></tr></table></figure><p>以上两者必写。</p><h3 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h3><h4 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h4><ul><li>绑定动画名字 <code>animation-name: move（动画名字）;</code></li><li>动画的持续时间 <code>animation-duration: 1s（持续时间）;</code> （必写）</li><li>动画的延迟时间 <code>animation-delay: 2s（延迟时间 ）;</code> 注：手动写动画最小时间间隔是16.7ms<blockquote><p>多数显示器的默认频率是60hz,即每秒刷新60次。所以理论上的最小间隔是1&#x2F;60*1000ms&#x3D;16.7ms</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><strong>效果动画</strong> ：</li></ul><p><img src="/../_resources/%E5%8A%A8%E7%94%BB.gif" class="lazyload placeholder" data-srcset="/../_resources/%E5%8A%A8%E7%94%BB.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/动画.gif"></p><p>定义更多帧：<strong>使用百分比</strong></p><blockquote><p>百分比是时间的百分比</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名字&#123;   </span><br><span class="line">    <span class="number">0%</span>&#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">50%</span>&#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">100%</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">40%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">70%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果动画</strong>：</p><p><img src="/../_resources/%E5%8A%A8%E7%94%BB2.gif" class="lazyload placeholder" data-srcset="/../_resources/%E5%8A%A8%E7%94%BB2.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/动画2.gif"></p><h4 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h4><blockquote><p>动画的运动状态</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>ease</td><td>先快后慢</td></tr><tr><td>linear</td><td>匀速</td></tr><tr><td>ease-in</td><td>加速</td></tr><tr><td>ease-out</td><td>减速</td></tr><tr><td>ease-in-out</td><td>先加速后减速</td></tr></tbody></table><h4 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h4><blockquote><p>动画的执行次数</p></blockquote><p>支持：</p><ul><li>1(默认) 2 3 4… </li><li>infinite 无数次</li></ul><h4 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h4><blockquote><p>动画的方向</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正向（默认）</td></tr><tr><td>reverse</td><td>反向</td></tr><tr><td>alternate</td><td>先正后反(执行次数必须大于等于2)</td></tr><tr><td>alternate-reverse</td><td>先反后正(执行次数必须大于等于2)</td></tr></tbody></table><h4 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h4><blockquote><p>动画时间之外的状态</p></blockquote><p><strong>属性值</strong></p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>backwards</td><td>开始的时候停在第一帧</td></tr><tr><td>forwards</td><td>结束的时候停在最后一帧</td></tr><tr><td>both</td><td>动画延迟停在第一帧，动画结束停在最后一帧</td></tr><tr><td><strong>动画属性</strong></td><td></td></tr></tbody></table><h4 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state&#96;"></a>animation-play-state&#96;</h4><blockquote><p>动画的执行状态</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>paused</td><td>暂停</td></tr><tr><td>running</td><td>运动（默认）</td></tr></tbody></table><blockquote><p>不能放在简写里面的，一般配合hover使用</p></blockquote><h4 id="动画的简写"><a href="#动画的简写" class="headerlink" title="动画的简写"></a>动画的简写</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>:名字 持续时间 延迟时间 运动状态 次数 方向时间之外的状态;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>名字和持续时间必须写</li><li>没有先后顺序的</li><li>持续时间和延迟时间有先后顺序，持续时间在前</li><li>时间必须写单位 s</li><li>动画名字严格<strong>区分大小写</strong>的，避免写关键词</li><li>不写的属性值取默认值</li></ul><h4 id="过渡与动画的区别"><a href="#过渡与动画的区别" class="headerlink" title="过渡与动画的区别"></a>过渡与动画的区别</h4><p>相同点：都是对时间进行改变<br>不同点：</p><ol><li>过渡是主动触发，动画自动触发</li><li>过渡只有一次，动画可以多次或者无数次</li><li>过渡不能对属性进行精准的控制，动画可以</li></ol><h4 id="案例：小球跳动"><a href="#案例：小球跳动" class="headerlink" title="案例：小球跳动"></a>案例：小球跳动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-timing-function</span>: linear;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-direction</span>: alternate;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-duration</span>: <span class="number">2.5s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-name</span>: jump1;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-duration</span>: <span class="number">1.5s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-name</span>: jump2;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.div3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-name</span>: jump3;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> jump1 &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">20%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">80px</span>, <span class="number">80px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">40%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">160px</span>, <span class="number">160px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">60%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">240px</span>, <span class="number">240px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">80%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">320px</span>, <span class="number">160px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">400px</span>, <span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> jump2 &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">20%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">80px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">40%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">200px</span>, <span class="number">160px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">60%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">300px</span>, <span class="number">260px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">80%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">400px</span>, <span class="number">160px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">500px</span>, <span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> jump3 &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">20%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">90px</span>, <span class="number">80px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">40%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">170px</span>, <span class="number">160px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">60%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">230px</span>, <span class="number">250px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">80%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">350px</span>, <span class="number">160px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">410px</span>, <span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>动画效果</strong>：</p><p><img src="/../_resources/%E5%8A%A8%E7%94%BB%E5%BC%B9%E7%90%83.gif" class="lazyload placeholder" data-srcset="/../_resources/%E5%8A%A8%E7%94%BB%E5%BC%B9%E7%90%83.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/动画弹球.gif"></p><h2 id="五-过渡"><a href="#五-过渡" class="headerlink" title="五. 过渡"></a>五. 过渡</h2><blockquote><p>transition</p></blockquote><p>过渡是主动触发的，一般过渡只有鼠标移入才有效，所以过渡属性要写在元素的默认状态中。</p><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><h4 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h4><blockquote><p>要发生过渡的css属性（不写，默认值 all）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>: width,height;</span><br></pre></td></tr></table></figure><h4 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h4><blockquote><p>过渡的持续时间（必须写，不写无过渡效果，默认值为0）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-duration</span>: <span class="number">4s</span>;</span><br></pre></td></tr></table></figure><h4 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h4><blockquote><p>过渡的延迟时间（可以不写，默认为0）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br></pre></td></tr></table></figure><h3 id="过渡的运动状态"><a href="#过渡的运动状态" class="headerlink" title="过渡的运动状态"></a>过渡的运动状态</h3><blockquote><p>transition-timing-function</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>ease</td><td>先快后慢</td></tr><tr><td>linear</td><td>匀速</td></tr><tr><td>ease-in</td><td>加速</td></tr><tr><td>ease-out</td><td>减速</td></tr><tr><td>ease-in-out</td><td>先加速后减速</td></tr><tr><td>注：ease和linear常用，其余三个属性值不太用。</td><td></td></tr><tr><td>实例：</td><td></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition-duration</span>: <span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.ease</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 默认  先快后慢*/</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.linear</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 匀速 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition-timing-function</span>: linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ease&quot;</span>&gt;</span>先快后慢<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;linear&quot;</span>&gt;</span>匀速<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果动画</strong>：</p><p><img src="/../_resources/%E8%BF%87%E6%B8%A1%E7%9A%84%E8%BF%90%E5%8A%A8%E7%8A%B6%E6%80%81.gif" class="lazyload placeholder" data-srcset="/../_resources/%E8%BF%87%E6%B8%A1%E7%9A%84%E8%BF%90%E5%8A%A8%E7%8A%B6%E6%80%81.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/过渡的运动状态.gif"></p><h3 id="贝塞尔曲线（不常用）"><a href="#贝塞尔曲线（不常用）" class="headerlink" title="贝塞尔曲线（不常用）"></a>贝塞尔曲线（不常用）</h3><p>属性值：cubic-bezier()<br>贝塞尔曲线网址：<a href="http://cubic-bezier.com/">http://cubic-bezier.com/</a><br>逐帧动画：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-timing-function</span>:<span class="built_in">steps</span>(动画执行的步数);</span><br></pre></td></tr></table></figure><h3 id="过渡的简写"><a href="#过渡的简写" class="headerlink" title="过渡的简写"></a>过渡的简写</h3><blockquote><p>transition:要发生过渡的属性 持续时间 延迟时间 运动状态</p></blockquote><ul><li>属性顺序不强调</li><li><strong>持续时间和延迟时间有先后顺序</strong>（持续时间在前）</li><li>持续时间必须写<br>最简单的过渡<blockquote><p>transition: 2s</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: <span class="number">1s</span> <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.father</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>效果动画：<br><img src="/import/3872daff-038c-45e4-ae5a-c7cb3c62d763/D:/blog_hexo/images/CSS/video/%E8%BF%87%E6%B8%A1%E7%9A%84%E7%AE%80%E5%86%99.gif" class="lazyload placeholder" data-srcset="/import/3872daff-038c-45e4-ae5a-c7cb3c62d763/D:/blog_hexo/images/CSS/video/%E8%BF%87%E6%B8%A1%E7%9A%84%E7%AE%80%E5%86%99.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="import/3872daff-038c-45e4-ae5a-c7cb3c62d763/D:/blog_hexo/images/CSS/video/过渡的简写.gif"></li></ul><h2 id="六-渐变"><a href="#六-渐变" class="headerlink" title="六. 渐变"></a>六. 渐变</h2><p>CSS渐变是CSS3图像模块中添加的新类型的图像。CSS渐变允许您在两个或多个指定颜色之间显示平滑过渡。</p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><blockquote><p>background-image: linear-gradient()</p></blockquote><h4 id="方向默认从上到下"><a href="#方向默认从上到下" class="headerlink" title="方向默认从上到下"></a>方向<strong>默认</strong>从上到下</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red,blue); </span><br></pre></td></tr></table></figure><h4 id="支持多种颜色"><a href="#支持多种颜色" class="headerlink" title="支持多种颜色"></a>支持多种颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red,green,blue);</span><br></pre></td></tr></table></figure><h4 id="改变渐变方向"><a href="#改变渐变方向" class="headerlink" title="改变渐变方向"></a>改变渐变方向</h4><p>方向：从右到左</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to left,red,blue); </span><br></pre></td></tr></table></figure><p>方向：从左到右</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right,red,blue); </span><br></pre></td></tr></table></figure><p>方向：从下到上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top,red,blue); </span><br></pre></td></tr></table></figure><p>方向：从上到下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom,red,blue); </span><br></pre></td></tr></table></figure><p><strong>注</strong>：to 和方向单词之间是有空格的（to left）</p><h4 id="对角线渐变"><a href="#对角线渐变" class="headerlink" title="对角线渐变"></a>对角线渐变</h4><p>方向：从上左到下右</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom right, red, blue);</span><br></pre></td></tr></table></figure><p>方向：从上右到下左</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom left, red, blue);</span><br></pre></td></tr></table></figure><p>方向：从下右到上左</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top left, red, blue);</span><br></pre></td></tr></table></figure><p>方向：从下左到上右</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top right, red, blue);</span><br></pre></td></tr></table></figure><p><strong>注</strong>：两个方向位置可以互换（to top left 等同于 to left top）</p><h3 id="角度渐变"><a href="#角度渐变" class="headerlink" title="角度渐变"></a>角度渐变</h3><p>正值增加是顺时针动，负值增加是逆时针转动。<br><code>180deg</code>是默认值（从上到下）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, red, blue);</span><br></pre></td></tr></table></figure><p><code>0deg</code>(从下到上)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">0deg</span>, red, blue);</span><br></pre></td></tr></table></figure><p>其余以此类推</p><h3 id="渐变突变"><a href="#渐变突变" class="headerlink" title="渐变突变"></a>渐变突变</h3><p>要在渐变中包含一个实心的非过渡颜色区域，请包含颜色起止点的两个位置。颜色起止点可以有两个位置，这相当于两个连续颜色在不同位置具有相同的颜色起止点。颜色将在第一个颜色起止点时达到完全饱和，保持该饱和度到第二个颜色起止点，并通过相邻颜色起止点的第一个位置过渡到相邻颜色起止点的颜色。<br>结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大体理解：下一个颜色值承接上一个颜色值时：</p><ul><li>若承接位置提前则还是前者设置的位置承接，并且颜色分明<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red <span class="number">40%</span>, blue <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>若是在同一位置承接则颜色分明<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red <span class="number">40%</span>, blue <span class="number">40%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>若承接位置滞后则之间有渐变过渡<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red <span class="number">40%</span>, blue <span class="number">70%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>效果图</strong>：</li></ul><p><img src="/import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/%E6%B8%90%E5%8F%98%E7%AA%81%E5%8F%98.png" class="lazyload placeholder" data-srcset="/import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/%E6%B8%90%E5%8F%98%E7%AA%81%E5%8F%98.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/渐变突变.png"></p><h3 id="多颜色渐变"><a href="#多颜色渐变" class="headerlink" title="多颜色渐变"></a>多颜色渐变</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red <span class="number">33.3%</span>,yellow <span class="number">33.3%</span>,yellow <span class="number">66.6%</span>,blue <span class="number">66.6%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：<br><img src="/import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/%E5%A4%9A%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98.png" class="lazyload placeholder" data-srcset="/import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/%E5%A4%9A%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/多颜色渐变.png"></p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><blockquote><p>background-image: radial-gradient(方向, 颜色…)</p></blockquote><p><strong>椭圆形（默认）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(red, blue);</span><br></pre></td></tr></table></figure><p><strong>渐变的形状–可以设置为圆形</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle, red, blue);</span><br></pre></td></tr></table></figure><h3 id="改变径向渐变方向"><a href="#改变径向渐变方向" class="headerlink" title="改变径向渐变方向"></a>改变径向渐变方向</h3><p><strong>数值</strong></p><blockquote><p>数值的坐标系:元素左上角为原点，向右是正值，向左是负值，向上是负值，向下是正值</p></blockquote><p>方向 at position（渐变中心点的位置）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle at <span class="number">400px</span> <span class="number">200px</span>, red, blue);</span><br></pre></td></tr></table></figure><blockquote><p>渐变中心点的位置：水平（向右400px） 垂直（向下200px）方向默认从左上到右下</p></blockquote><p><strong>百分比</strong></p><blockquote><p>参考元素的宽高</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle at <span class="number">100%</span> <span class="number">100%</span>, red, blue);</span><br></pre></td></tr></table></figure><p><strong>方位词</strong></p><ul><li>水平：left right center</li><li>垂直：top bottom center<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle at right top, red, blue);</span><br></pre></td></tr></table></figure><blockquote><p>如果位置只有方位词 顺序可以换</p></blockquote></li></ul><p><strong>三者可以混搭</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle at <span class="number">10px</span> bottom, red, blue);</span><br></pre></td></tr></table></figure><blockquote><p>如果只写一个值，默认另外一个方向是center</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle at bottom, red, blue);</span><br></pre></td></tr></table></figure><h3 id="重复渐变"><a href="#重复渐变" class="headerlink" title="重复渐变"></a>重复渐变</h3><h4 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(red <span class="number">5%</span>，blue <span class="number">20%</span>);</span><br></pre></td></tr></table></figure><p>颜色必须加数值或者百分比</p><h4 id="重复径向渐变"><a href="#重复径向渐变" class="headerlink" title="重复径向渐变"></a>重复径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">repeating-radial-gradient</span>(red <span class="number">5%</span> blue <span class="number">20%</span>);</span><br></pre></td></tr></table></figure><p>颜色必须加数值或者百分比</p><h3 id="渐变案例"><a href="#渐变案例" class="headerlink" title="渐变案例"></a>渐变案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right,<span class="number">#4cc9f4</span>,<span class="number">#5362b4</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#00fcff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>新闻中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>荣誉资质<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果动画</strong>：</p><p><img src="/import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/video/%E6%B8%90%E5%8F%98%E6%A1%88%E4%BE%8B.gif" class="lazyload placeholder" data-srcset="/import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/video/%E6%B8%90%E5%8F%98%E6%A1%88%E4%BE%8B.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="import/9842cfdd-523d-49c1-a00e-024c6a9d55e0/D:/blog_hexo/images/CSS/video/渐变案例.gif"></p><h2 id="七-文字阴影"><a href="#七-文字阴影" class="headerlink" title="七. 文字阴影"></a>七. 文字阴影</h2><p>text-shadow: 水平偏移 垂直偏移 模糊程度 颜色<br>注意点：</p><ol><li>水平偏移和垂直偏移必须写（不写对应方向没有阴影效果，并且<strong>允许负值</strong>）</li><li>属性值是有一定顺序的</li><li>模糊程度不能写<strong>负值</strong>（写负值无模糊效果）</li><li>颜色默认为文本颜色<br>多重阴影：<strong>用逗号隔开</strong><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0px</span> -<span class="number">10px</span> <span class="number">8px</span> yellow,<span class="number">0px</span> -<span class="number">20px</span> <span class="number">8px</span> orange,<span class="number">0px</span> -<span class="number">30px</span> <span class="number">8px</span> red;</span><br></pre></td></tr></table></figure>实例：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-shadow</span>: <span class="number">0px</span> -<span class="number">10px</span> <span class="number">8px</span> yellow,<span class="number">0px</span> -<span class="number">20px</span> <span class="number">8px</span> orange,<span class="number">0px</span> -<span class="number">30px</span> <span class="number">8px</span> red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;   </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>火<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><strong>效果图</strong>：</li></ol><p><img src="/../_resources/%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1.png" class="lazyload placeholder" data-srcset="/../_resources/%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/文字阴影.png"></p><h2 id="八-盒子阴影"><a href="#八-盒子阴影" class="headerlink" title="八. 盒子阴影"></a>八. 盒子阴影</h2><p>box-shadow: 水平偏移 垂直偏移 模糊程度 阴影大小 颜色 (内阴影 inset)<br>注意点：</p><ol><li>水平偏移和垂直偏移必须写(<strong>允许负值</strong>)</li><li>属性值是有一定顺序的</li><li>模糊程度<strong>不能写负值</strong>（写负值无模糊效果）</li><li>阴影大小默认为盒子大小</li><li>颜色默认为文本颜色<br>多重阴影：用逗号隔开<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="number">20px</span>  red，<span class="number">1px</span> <span class="number">1px</span>10px <span class="number">30px</span> blue;</span><br></pre></td></tr></table></figure><strong>内阴影</strong>：加inset 属性<br>实例：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="number">20px</span>  red,<span class="number">5px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="number">30px</span> blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><strong>效果图</strong>：</li></ol><p><img src="/../_resources/%E7%9B%92%E5%AD%90%E9%98%B4%E5%BD%B1.png" class="lazyload placeholder" data-srcset="/../_resources/%E7%9B%92%E5%AD%90%E9%98%B4%E5%BD%B1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/盒子阴影.png"></p><h2 id="九-圆角"><a href="#九-圆角" class="headerlink" title="九. 圆角"></a>九. 圆角</h2><p>border-radius:</p><ul><li>数值</li><li>百分比，宽度和高度的百分比</li></ul><h3 id="圆角的简写"><a href="#圆角的简写" class="headerlink" title="圆角的简写"></a>圆角的简写</h3><p>一个值：四边</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span>; </span><br></pre></td></tr></table></figure><p>两个值：第一个值：<strong>左上、右下</strong>；第二个值：<strong>右上、左下</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">40px</span>; </span><br></pre></td></tr></table></figure><p>三个值：第一个值：<strong>左上</strong>；第二个值：<strong>右上、左下</strong>；第三个值：<strong>右下</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">40px</span> <span class="number">60px</span>; </span><br></pre></td></tr></table></figure><p>四个值(顺时针)：第一个值：<strong>左上</strong>；第二个值：<strong>右上</strong>；第三个值：<strong>右下</strong>；第四个值：<strong>左下</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">40px</span> <span class="number">60px</span> <span class="number">80px</span>; </span><br></pre></td></tr></table></figure><h3 id="取消圆角"><a href="#取消圆角" class="headerlink" title="取消圆角"></a>取消圆角</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="单边圆角"><a href="#单边圆角" class="headerlink" title="单边圆角"></a>单边圆角</h3><p>左上角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><p>右上角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top-right-radius</span>: <span class="number">40px</span>;</span><br></pre></td></tr></table></figure><p>右下角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-bottom-right-radius</span>: <span class="number">60px</span>;</span><br></pre></td></tr></table></figure><p>左下角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-bottom-left-radius</span>: <span class="number">80px</span>;</span><br></pre></td></tr></table></figure><p><strong>方位词前后顺序不能改变</strong>（例：border-bottom-left-radius中的bottom和left顺序不能改变）</p><h3 id="常规圆角"><a href="#常规圆角" class="headerlink" title="常规圆角"></a>常规圆角</h3><h4 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 01.元素的宽高一致 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 02.圆角设为为宽高的一半或者设置为50% */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* border-radius: 50%; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="椭圆形"><a href="#椭圆形" class="headerlink" title="椭圆形"></a>椭圆形</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 01.元素的宽高不一致 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 02.圆角设置为50% */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="胶囊形"><a href="#胶囊形" class="headerlink" title="胶囊形"></a>胶囊形</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 01.元素的宽高不一致 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 02.圆角设置为高度的一半 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：</p><h2 id="十-flex-布局"><a href="#十-flex-布局" class="headerlink" title="十. flex 布局"></a>十. flex 布局</h2><h3 id="认识flex布局"><a href="#认识flex布局" class="headerlink" title="认识flex布局"></a>认识flex布局</h3><p>Flexible Box 简称 flex，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局。 采用Flex布局的元素，称为flex容器container。 它的所有子元素自动成为容器成员，称为flex项目item。</p><blockquote><p>当我们为盒子设为flex布局以后，子元素的float、clear和vertical-align 属性将失效。</p></blockquote><p>flex布局（其他叫法：伸缩布局、弹性布局、伸缩盒布局、弹性盒布局）<br>给一个元素设置了display: flex&#x2F;inline-flex（块级元素&#x2F;行内元素转为弹性盒子），那么这个元素就变成了弹性容器，这个元素的儿子们就变成了弹性项目，<strong>不会影响到孙子</strong>（但可以嵌套使用）<br><strong>总结</strong>：flex布局原理就是：通过<strong>给父盒子添加flex属性</strong>，来<strong>控制子盒子</strong>的位置和排列方式。（父盒子：弹性容器，子元素：弹性项目）</p><h3 id="flex-布局父项常见的属性"><a href="#flex-布局父项常见的属性" class="headerlink" title="flex 布局父项常见的属性"></a>flex 布局父项常见的属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>flex-direction</td><td>设置<strong>主轴</strong>的方向 <strong>(默认x轴或叫行、row)</strong></td></tr><tr><td>flex-wrap</td><td>设置子元素是否换行（<strong>默认不换行</strong>）</td></tr><tr><td>flex-flow</td><td>复合属性，相当于同时设置了flex-direction和flex-wrap</td></tr><tr><td>justify-content</td><td>设置<strong>主轴</strong>上的子元素排列方式</td></tr><tr><td>align-content</td><td>设置<strong>侧轴</strong>上的子元素的排列方式（多行）</td></tr><tr><td>align-items</td><td>设置<strong>侧轴</strong>上的子元素排列方式（单行）</td></tr><tr><td><strong>flex-direction 属性</strong></td><td></td></tr><tr><td>决定主轴的方向(即项目的排列方向)</td><td></td></tr></tbody></table><ul><li>row（默认值）：主轴为水平方向，起点在左端</li><li>row-reverse：主轴为水平方向，起点在右端<br>以下两个了解就行：</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿<br>如下图：<br><strong>flex-wrap 属性</strong>（重要）<br>弹性元素永远沿主轴排列，那么如果主轴排不下，通过flex-wrap决定容器内项目是否可换行<blockquote><p>默认不换行，子元素宽度超过父元素宽度时，自动压缩子元素宽度</p></blockquote></li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>nowrap</td><td>不换行 <strong>（默认）</strong></td></tr><tr><td>wrap</td><td>换行</td></tr><tr><td>wrap-reverse</td><td>换行，第一行在下方</td></tr><tr><td><strong>flex-flow 属性</strong></td><td></td></tr></tbody></table><blockquote><p>复合属性，相当于同时设置了flex-direction和flex-wrap</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>:row wrap;</span><br></pre></td></tr></table></figure><p><strong>justify-content 属性</strong><br>定义了项目在主轴上的对齐方式</p><blockquote><p>内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐</p></blockquote><ul><li>flex-start：<strong>默认</strong>，顶端对齐（从头部开始，如果主轴是x轴，则从左到右）</li><li>flex-end：末端对齐</li><li>center：居中对齐</li><li>space-between：两端对齐，中间自动分配（先两边贴边，在平分剩余空间）<strong>（重要）</strong></li><li>space-around：自动分配距离（平均分配剩余空间）<br>效果图：</li></ul><p><img src="/../_resources/justify-content.png" class="lazyload placeholder" data-srcset="/../_resources/justify-content.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/justify-content.png"></p><p><strong>align-content 属性</strong><br>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>flex-start</td><td>没有行间距</td></tr><tr><td>flex-end</td><td>底对齐没有行间距</td></tr><tr><td>center</td><td>居中没有行间距</td></tr><tr><td>space-between</td><td>两端对齐，中间自动分配</td></tr><tr><td>space-around</td><td>自动分配距离</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高度 <strong>（默认值）</strong></td></tr></tbody></table><p><img src="/../_resources/align-content.png" class="lazyload placeholder" data-srcset="/../_resources/align-content.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/align-content.png"></p><p><strong>align-items 属性</strong><br>定义项目在交叉轴上如何对齐</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>flex-start</td><td>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</td></tr><tr><td>flex-end</td><td>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</td></tr><tr><td>center</td><td>弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</td></tr></tbody></table><h3 id="flex-布局子项常见属性"><a href="#flex-布局子项常见属性" class="headerlink" title="flex 布局子项常见属性"></a>flex 布局子项常见属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>align-self</td><td>控制子项自己在侧轴的排列方式</td></tr><tr><td>flex-grow</td><td>控制某一个弹性项目如何增长</td></tr><tr><td>flex-shrink</td><td>控制某一个弹性项目如何收缩</td></tr><tr><td>flex-basis</td><td>元素在主轴的基准值（尺寸）</td></tr><tr><td>flex</td><td>子项目占的份数</td></tr><tr><td><strong>align-self 属性</strong></td><td></td></tr><tr><td><strong>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性</strong></td><td></td></tr><tr><td>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</td><td></td></tr></tbody></table><blockquote><p>注意：align-self 属性可重写灵活容器的 align-items 属性</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>auto</td><td>默认值。元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。</td></tr><tr><td>Stretch</td><td>元素被拉伸以适应容器。</td></tr><tr><td>Center</td><td>元素位于容器的中心。</td></tr><tr><td>flex-start</td><td>元素位于容器的开头。</td></tr><tr><td>flex-end</td><td>元素位于容器的结尾。</td></tr><tr><td>baseline</td><td>项目内部文本基线对齐</td></tr><tr><td><strong>效果图</strong>：</td><td></td></tr></tbody></table><p><img src="/../_resources/align-self.png" class="lazyload placeholder" data-srcset="/../_resources/align-self.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/align-self.png"></p><p><strong>flex-grow 属性</strong><br>如果主轴方向空间盈余，控制每个项目如何变大父元素的盈余的尺寸，项目按照取值的占比，各自增长各自的尺寸。<br>flex-grow: 默认值（0）</p><blockquote><p>不分配空间 不扩展</p></blockquote><p>支持：数值（1 2 3 4 …）</p><blockquote><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）</p></blockquote><p><img src="/../_resources/flex-grow1.png" class="lazyload placeholder" data-srcset="/../_resources/flex-grow1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/flex-grow1.png"></p><blockquote><p>如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍</p></blockquote><p><img src="/../_resources/flex-grow2.png" class="lazyload placeholder" data-srcset="/../_resources/flex-grow2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/flex-grow2.png"></p><blockquote><p>弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论flex-grow是什么值都不会生效</p></blockquote><p><strong>flex-shrink 属性</strong><br>如果主轴方向空间不足，控制每个项目如何变小父元素收缩的尺寸，项目按照取值的占地，自动分配各自收缩的尺寸<br>flex-shrink:</p><ul><li>1 默认值 收缩</li><li>0 不收缩<br>支持：数值 1 2 3 4 …<blockquote><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小</p></blockquote></li></ul><p>如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小</p><p><img src="/../_resources/flex-shrink.png" class="lazyload placeholder" data-srcset="/../_resources/flex-shrink.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/flex-shrink.png"></p><p>在容器宽度有剩余时，flex-shrink也是不会生效的<br><strong>flex-basis 属性</strong><br>设置的是元素在主轴上的初始尺寸，所谓的<strong>初始尺寸就是元素在flex-grow和flex-shrink生效前的尺寸</strong><br>浏览器根据这个属性，计算主轴是否有多余空间，默认值为auto，即项目的本来大小，如设置了width则元素尺寸由width&#x2F;height决定（主轴方向），没有设置则由内容决定<br>支持：</p><ul><li>auto 默认</li><li>数值</li><li>百分比<br>当设置为0的是，会根据内容撑开<br>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间<br><strong>flex 属性</strong><blockquote><p>flex: 增长 收缩 尺寸;</p></blockquote></li></ul><p>注：顺序不能换</p><ul><li><strong>flex: 1</strong>：平分空间</li><li><strong>flex: auto</strong> 等比例缩放<br><strong>order 属性</strong><br>说明：<blockquote><p>number排序优先级，数字越大越往后排，<strong>默认为0，支持负数</strong>。</p></blockquote></li></ul><h3 id="flex-布局的应用场景"><a href="#flex-布局的应用场景" class="headerlink" title="flex 布局的应用场景"></a>flex 布局的应用场景</h3><ol><li>实现元素水平垂直方向的居中</li><li>两栏三栏自适应布局中</li></ol><h2 id="十一-多列属性布局"><a href="#十一-多列属性布局" class="headerlink" title="十一. 多列属性布局"></a>十一. 多列属性布局</h2><p>CSS 多列布局（CSS Multi-column Layout）是一种定义了多栏布局的模块，可支持在布局中建立列（column）的数量，以及内容如何在列之间流动（flow）、列之间的间距（gap）大小，以及列的分隔线（column rules）。<br><strong>实现报纸文章布局效果</strong></p><table><thead><tr><th>多列属性</th><th>描述</th></tr></thead><tbody><tr><td>column-count</td><td>分为的列数</td></tr><tr><td>column-width</td><td>每列的宽度</td></tr><tr><td>column-gap</td><td>列与列之间的间距</td></tr><tr><td>column-rule</td><td>列与列之间的分割线（语法与border一致）</td></tr><tr><td>column-fill</td><td>列的高度是否统一</td></tr><tr><td>column-span</td><td>是否恒跨所有的列</td></tr><tr><td><strong>column-fill 属性</strong></td><td></td></tr></tbody></table><blockquote><p>列的高度是否统一</p></blockquote><ul><li>默认 balance ：以<strong>最高一列</strong>统一</li><li>auto：自适应<br><strong>break-inside: aviod 属性</strong><blockquote><p>防止元素被打破</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">CSS3 新增的特性（2D变换、3D变换、动画、过渡、渐变、文字阴影、圆角、flex布局等）</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS预处理器 Less</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/CSS/%E3%80%90CSS%E3%80%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%20Less/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/CSS/%E3%80%90CSS%E3%80%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%20Less/</id>
    <published>2023-11-28T14:32:25.000Z</published>
    <updated>2023-12-02T12:20:08.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="Less-是什么？"><a href="#Less-是什么？" class="headerlink" title="Less 是什么？"></a>Less 是什么？</h3><p>Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。Less 可以运行在 Node 或浏览器端。</p><h3 id="Less安装"><a href="#Less安装" class="headerlink" title="Less安装"></a>Less安装</h3><h4 id="通过-npm-安装"><a href="#通过-npm-安装" class="headerlink" title="通过 npm 安装"></a>通过 <a href="https://www.npmjs.org/">npm</a> 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -g</span><br></pre></td></tr></table></figure><blockquote><p>-g:表示全局安装</p></blockquote><p>若想安装特定版本号可以在less后加上@+版本号</p><h3 id="Less转换为CSS"><a href="#Less转换为CSS" class="headerlink" title="Less转换为CSS"></a>Less转换为CSS</h3><p>less是没有办法直接使用在浏览器上面的，只有css才能直接使用到浏览器的上面。所以我们要把less转化成css。</p><ol><li>通用方式</li></ol><ul><li>新建一个less文件（a.less）<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> blue; </span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="variable">@color</span>; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">@color</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打开cmd，cd到less文件目录，输入以下命令：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc <span class="selector-tag">a</span><span class="selector-class">.less</span> <span class="selector-tag">a</span><span class="selector-class">.css</span></span><br></pre></td></tr></table></figure>  这样a.less文件的代码就会编译为css代码并保存到a.css文件中<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: blue; </span><br><span class="line"><span class="attribute">background-color</span>: blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>在VSCode中使用less（可以使用插件）</li></ol><ul><li>在vscode拓展插件中搜索Easy LESS点击安装即可。</li><li>安装后只要新建了一个.less后缀的文件，软件就会在同一目录下自动创建一个.css的文件，并且在.less文件编写代码并按下Ctrl+S保存的同时，css文件会编译生产相应的css代码。</li></ul><h2 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h2><p>使用变量可以方便修改属性值。<br><strong>在Less中可以使用变量：</strong><br>表达式：@+变量名 : 属性值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#1a2a3a</span>; <span class="comment">// 变量声明 </span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="comment">// 使用变量 </span></span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">@color</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="variable">@color</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#1a2a3a</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#1a2a3a</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注释（Comments）"><a href="#注释（Comments）" class="headerlink" title="注释（Comments）"></a>注释（Comments）</h2><p>在less中可以进行代码注释，方式有<strong>单行注释（&#x2F;&#x2F;）</strong>、<strong>多行注释（&#x2F; *  * &#x2F;）</strong>两种，但是只有<code>多行注释</code>才能在编译后的文件中出现。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#1a2a3a</span>; </span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"><span class="comment">// 使用变量 </span></span><br><span class="line"><span class="comment">/*使用变量*/</span> </span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">@color</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"><span class="comment">/*使用变量*/</span> </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#1a2a3a</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="混合（Mixins）"><a href="#混合（Mixins）" class="headerlink" title="混合（Mixins）"></a>混合（Mixins）</h2><p>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.length</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"># <span class="selector-tag">apple</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#222</span>; <span class="selector-class">.length</span>(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.happy</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: blue; </span><br><span class="line"><span class="selector-class">.length</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.length</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"># apple <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#222</span>; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.happy</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: blue; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套（Nesting）"><a href="#嵌套（Nesting）" class="headerlink" title="嵌套（Nesting）"></a>嵌套（Nesting）</h2><p>Less 提供了使用嵌套（nesting）代替层叠或与层叠结合使用的能力。</p><h3 id="1-选择器嵌套"><a href="#1-选择器嵌套" class="headerlink" title="1. 选择器嵌套"></a>1. 选择器嵌套</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="selector-tag">h1</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#333</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">1.4px</span>; </span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">h1</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#333</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">1.4px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-父选择器"><a href="#2-父选择器" class="headerlink" title="2. 父选择器 &amp;"></a>2. 父选择器 <code>&amp;</code></h3><p>在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 <code>hover</code> 样式时，或者当 <code>body</code> 元素有某个 classname 时，可以用 <code>&amp;</code> 代表嵌套规则外层的父选择器。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">font-weight</span>: bold; </span><br><span class="line"><span class="attribute">text-decoration</span>: none; </span><br><span class="line"><span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line"><span class="attribute">text-decoration</span>: underline; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.firefox</span> <span class="selector-tag">&amp;</span> &#123; </span><br><span class="line"><span class="attribute">font-weight</span>: normal; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">font-weight</span>: bold; </span><br><span class="line"><span class="attribute">text-decoration</span>: none; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line"><span class="attribute">text-decoration</span>: underline; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.firefox</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">font-weight</span>: normal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="规则嵌套和冒泡"><a href="#规则嵌套和冒泡" class="headerlink" title="@规则嵌套和冒泡"></a>@规则嵌套和冒泡</h3><p>@ 规则（例如 <code>@media</code> 或 <code>@supports</code>）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡（bubbling）。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">567px</span>) &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">600px</span>; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">resolution</span>: <span class="number">192dpi</span>) &#123; </span><br><span class="line"><span class="attribute">background-image</span>: url(<span class="string">/img/1.png</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">1120px</span>) &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">567px</span>) &#123; </span><br><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">600px</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">567px</span>) <span class="keyword">and</span> (<span class="attribute">resolution</span>: <span class="number">192dpi</span>) &#123; </span><br><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/img/1.png</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">1120px</span>) &#123; </span><br><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算（Operations）"><a href="#运算（Operations）" class="headerlink" title="运算（Operations）"></a>运算（Operations）</h2><p>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@width</span>; </span><br><span class="line"><span class="attribute">color</span>: <span class="variable">@color</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.4</span> + <span class="number">0.4</span>; </span><br><span class="line"><span class="variable">@base:</span> <span class="number">0.1</span> ; </span><br><span class="line"><span class="variable">@sub:</span> <span class="variable">@width</span> - <span class="variable">@base</span>; </span><br><span class="line"><span class="variable">@color:</span> <span class="number">#121a2a</span> * <span class="number">2</span>; <span class="comment">// 颜色运算</span></span><br><span class="line"># <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@sub</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.8</span>; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#243454</span>; </span><br><span class="line">&#125;</span><br><span class="line"># <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#243454</span>; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.7</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转义（Escaping）"><a href="#转义（Escaping）" class="headerlink" title="转义（Escaping）"></a>转义（Escaping）</h2><p>转义（Escaping）允许使用任意字符串作为属性或变量值，编译后会原样输出。<br>格式：<code>~&quot;(任意字符串)&quot;</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@min678:</span> <span class="string">~&quot;(min-width: 678px)&quot;</span>; </span><br><span class="line"><span class="selector-class">.element</span> &#123; </span><br><span class="line"><span class="keyword">@media</span> <span class="variable">@min678</span> &#123; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0.8rem</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">678px</span>) &#123; </span><br><span class="line"><span class="selector-class">.element</span> &#123; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0.8rem</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，从 Less 3.5 开始，可以简写为：<code>(任意字符串)</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@min678:</span> (<span class="attribute">min-width</span>: <span class="number">678px</span>); </span><br><span class="line"><span class="selector-class">.element</span> &#123; </span><br><span class="line"><span class="keyword">@media</span> <span class="variable">@min678</span> &#123; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0.8rem</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Less 3.5+ 版本中，许多以前需要“引号转义”的情况就不再需要了。</p><h2 id="函数（Functions）"><a href="#函数（Functions）" class="headerlink" title="函数（Functions）"></a>函数（Functions）</h2><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在<a href="https://less.bootcss.com/functions/">Less 函数手册</a>中有详细介绍。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@width:</span> <span class="number">0.4</span>; </span><br><span class="line"><span class="variable">@color:</span> <span class="number">#1a2a3b</span>; </span><br><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">percentage</span>(<span class="variable">@width</span>); </span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">saturate</span>(<span class="variable">@color</span>, <span class="number">5%</span>); </span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">spin</span>(<span class="built_in">lighten</span>(<span class="variable">@color</span>, <span class="number">25%</span>), <span class="number">8</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">40%</span>; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#182a3d</span>; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#415e94</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解更多函数：**<a href="https://less.bootcss.com/functions/">函数手册</a>**</p><h2 id="命名空间和访问符"><a href="#命名空间和访问符" class="headerlink" title="命名空间和访问符"></a>命名空间和访问符</h2><p>为了组织结构、为了以后方便重用或分发、为了提供一些封装的目的，或是为了对混合（mixins）进行分组。可以将一些混合（mixins）和变量置于 <code>#bundle</code> 之下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">bundle</span>() &#123;</span><br><span class="line"><span class="selector-class">.button</span> &#123; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red; </span><br><span class="line"><span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line"><span class="attribute">background-color</span>: black; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"># <span class="selector-tag">header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue; </span><br><span class="line"><span class="selector-id">#bundle</span><span class="selector-class">.button</span>(); <span class="comment">// 还可以书写为 #bundle &gt; .button 形式 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red; </span><br><span class="line">&#125;</span><br><span class="line"># <span class="selector-tag">header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: black; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射（Maps）"><a href="#映射（Maps）" class="headerlink" title="映射（Maps）"></a>映射（Maps）</h2><p>从 Less 3.5 版本开始，你还可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@width:</span> <span class="number">0.4</span>; </span><br><span class="line"><span class="variable">@color:</span> blue;</span><br><span class="line"># <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.span</span>&#123; </span><br><span class="line"><span class="attribute">color</span>: #div[color]; </span><br><span class="line"><span class="attribute">width</span>: #div[width]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue; <span class="attribute">width</span>: <span class="number">0.4</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.span</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: blue; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.4</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用域（Scope）"><a href="#作用域（Scope）" class="headerlink" title="作用域（Scope）"></a>作用域（Scope）</h2><p>Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则<strong>从“父”级作用域继承</strong>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@width:</span> <span class="number">0.4</span>; </span><br><span class="line"><span class="variable">@color:</span> blue;</span><br><span class="line"># <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="variable">@color:</span> white; </span><br><span class="line"><span class="selector-id">#header</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="variable">@color</span>; <span class="comment">// white </span></span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@width</span>; <span class="comment">// 0.4 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">div</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: white; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.4</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 CSS 自定义属性一样，混合（mixin）和变量的定义<strong>不必在引用之前事先定义</strong>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@width</span>; </span><br><span class="line"><span class="attribute">color</span>: <span class="variable">@color</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.4</span>; </span><br><span class="line"><span class="variable">@color:</span> blue;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.4</span>; </span><br><span class="line"><span class="attribute">color</span>: blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导入（Importing）"><a href="#导入（Importing）" class="headerlink" title="导入（Importing）"></a>导入（Importing）</h2><p>可以通过<code>@import &quot;要导入的文件名（可以省略文件拓展名）&quot;</code>引用其他less文件中的内容，将其输出在同一个css文件中。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _test2.less </span></span><br><span class="line"><span class="selector-tag">body</span>&#123; </span><br><span class="line"><span class="attribute">text-align</span>: center; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.less </span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;_test2&quot;</span>; <span class="comment">// 导入_test2.less文件内容 </span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.4</span>; </span><br><span class="line"><span class="variable">@color:</span> <span class="number">#1a2a3b</span>; </span><br><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@width</span>; </span><br><span class="line"><span class="attribute">color</span>: <span class="variable">@color</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"><span class="attribute">text-align</span>: center; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.4</span>; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#1a2a3b</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。Less 可以运行在 Node 或浏览器端。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS预处理器 Sass(Scss)</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/CSS/%E3%80%90CSS%E3%80%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%20Sass(Scss)/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/CSS/%E3%80%90CSS%E3%80%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%20Sass(Scss)/</id>
    <published>2023-11-28T14:32:25.000Z</published>
    <updated>2023-12-02T12:30:23.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Sass是什么"><a href="#Sass是什么" class="headerlink" title="Sass是什么"></a>Sass是什么</h3><p>Sass (英文全称：Syntactically Awesome Stylesheets) 是一个最初由 Hampton Catlin 设计并由 Natalie Weizenbaum 开发的层叠样式表语言。Sass 是一个 CSS 预处理器，是 CSS 扩展语言，可以帮助我们减少 CSS 重复的代码，节省开发时间。<br>Sass 扩展了 CSS3，增加了规则、变量、混入、选择器、继承、内置函数等等特性。 Sass 生成良好格式化的 CSS 代码，易于组织和维护。 Sass 文件后缀为 $\color{red}{.scss}$。</p><h3 id="Scss是什么"><a href="#Scss是什么" class="headerlink" title="Scss是什么"></a>Scss是什么</h3><p>Scss 是 Sass 3 引入新的语法，是Sassy CSS的简写，是CSS3语法的超集。说白了Scss就是Sass的升级版，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件。另外，SCSS 还能识别大部分 CSS hacks（一些 CSS 小技巧）和特定于浏览器的语法。<br>所有在 CSS 中正常工作的代码也能在 Scss 中正常工作。也就是说，对于一个 Sass 用户，只需要理解 Sass 扩展部分如何工作的，就能完全理解 Scss。大部分扩展，例如变量、parent references 和 指令都是一致的；<strong>唯一不同</strong>的是，SCSS $\color{red}{需要使用分号和花括号而不是换行和缩进}$。</p><h3 id="Scss-与-Sass异同"><a href="#Scss-与-Sass异同" class="headerlink" title="Scss 与 Sass异同"></a>Scss 与 Sass异同</h3><p>Sass 和 Scss 其实就是同一种东西，我们平时都称之为 <strong>Sass</strong>，两者之间不同之处主要有以下两点：</p><ol><li><strong>文件扩展名不同</strong>：Sass 是以<code>“.sass”</code>后缀为扩展名，而 Scss 是以<code>“.scss”</code>后缀为扩展名。</li><li><strong>语法书写方式不同</strong>：Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 Scss 的语法书写和我们的CSS 语法书写方式非常类似。<br>我们不妨来看看下面两段代码，这样会更加直观，更容易理解。<br><strong>Scss代码</strong><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注</span></span><br><span class="line"><span class="comment">   释*/</span></span><br><span class="line"><span class="comment">// 注</span></span><br><span class="line"><span class="comment">// 释</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;base&quot;</span>;</span><br><span class="line"><span class="variable">$font-stack</span>:    Helvetica, sans-serif;</span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> alert &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-warning</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> alert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>Sass代码</strong><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注</span></span><br><span class="line"><span class="comment">   释*/</span></span><br><span class="line"><span class="comment">// 注 释</span></span><br><span class="line"><span class="keyword">@import</span> base</span><br><span class="line"><span class="variable">$font-stack</span>:    Helvetica, sans-serif</span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span></span><br><span class="line">body</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span></span><br><span class="line">=alert </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000000</span></span><br><span class="line">.alert-warning </span><br><span class="line">+alert</span><br></pre></td></tr></table></figure>编译为：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这里只展示body中的代码 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="为什么使用-Sass"><a href="#为什么使用-Sass" class="headerlink" title="为什么使用 Sass?"></a>为什么使用 Sass?</h3><p>CSS 本身语法不够强大，导致重复编写一些代码，无法实现复用，而且在代码也不方便维护。 Sass 引入合理的样式复用机制，增加了规则、变量、混入、选择器、继承、内置函数等等特性。</p><h2 id="Sass-安装"><a href="#Sass-安装" class="headerlink" title="Sass 安装"></a>Sass 安装</h2><p>本章节我们主要介绍 Sass 的安装与使用。</p><h3 id="NPM-安装-推荐使用"><a href="#NPM-安装-推荐使用" class="headerlink" title="NPM 安装(推荐使用)"></a>NPM 安装(推荐使用)</h3><p>我们可以使用 npm（NPM 使用介绍）来安装 Sass。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g sass</span><br></pre></td></tr></table></figure><p><strong>注：</strong>国内 npm 建议使用淘宝镜像来安装</p><h3 id="Windows-上安装"><a href="#Windows-上安装" class="headerlink" title="Windows 上安装"></a>Windows 上安装</h3><p>我们可以使用 Windows 的包管理器 <a href="https://chocolatey.org/">Chocolatey</a> 来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install sass</span><br></pre></td></tr></table></figure><h3 id="Mac-OS-X-Homebrew-安装"><a href="#Mac-OS-X-Homebrew-安装" class="headerlink" title="Mac OS X (Homebrew)安装"></a>Mac OS X (Homebrew)安装</h3><p>Mac OS 可以使用 <a href="https://brew.sh/">Homebrew</a> 包管理器来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install sass/sass/sass</span><br></pre></td></tr></table></figure><p>官网安装流程： <a href="https://www.sass.hk/install/">安装Sass | Sass中文网</a></p><h2 id="Sass-转化为-CSS"><a href="#Sass-转化为-CSS" class="headerlink" title="Sass 转化为 CSS"></a>Sass 转化为 CSS</h2><h3 id="转化步骤"><a href="#转化步骤" class="headerlink" title="转化步骤"></a>转化步骤</h3><ol><li>首先创建.scss文件及其存放目录和css文件的存放目录</li><li>然后在.scss文件中书写sass代码</li><li>最后cd到.scss文件存放目录，在命令行输入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass sass/test1.scss css/test1.css</span><br></pre></td></tr></table></figure>  或<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass sass/test1.scss:css/test1.css</span><br></pre></td></tr></table></figure><strong>注：</strong> sass&#x2F;test1.scss为sass代码存放目录及文件名；css&#x2F;test1.css为css代码存放目录及编译完成后css代码存放文件。<br>逆向操作，<strong>css文件转换为sass&#x2F;scss文件</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass-convert style.css style.sass sass-convert style.css style.scss</span><br></pre></td></tr></table></figure></li></ol><h3 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h3><p>每次修改sass代码都需要重新执行命令，非常的麻烦，所以下面讲述一种自动实时编译的方式。<br><strong>监视单个 Sass 文件</strong>(每次修改并保存时自动编译）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch input.scss:output.css</span><br></pre></td></tr></table></figure><p>例：对当前文件夹下sass&#x2F;test1.scss监听,并自动编译生成css&#x2F;test1.css</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch sass/test1.scss:css/test1.css</span><br></pre></td></tr></table></figure><p><strong>监视整个文件夹</strong></p><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch sass文件夹名:css文件夹名</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch sass:css</span><br></pre></td></tr></table></figure><p><strong>停止监视</strong><br>在命令行界面按下：Ctrl + C</p><h2 id="编译输出的CSS格式"><a href="#编译输出的CSS格式" class="headerlink" title="编译输出的CSS格式"></a>编译输出的CSS格式</h2><p>编译输出的CSS格式一共有四种：</p><ul><li>nested：嵌套（默认格式）</li><li>compact：紧凑</li><li>expanded：扩展</li><li>compressed：压缩<br>实例：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sass </span></span><br><span class="line"><span class="selector-tag">ul</span>&#123; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15px</span>; </span><br><span class="line"><span class="selector-tag">li</span>&#123; </span><br><span class="line"><span class="attribute">list-style</span>: none; </span><br><span class="line"><span class="attribute">line-height</span>: normal; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="nested：嵌套（默认格式）"><a href="#nested：嵌套（默认格式）" class="headerlink" title=":nested：嵌套（默认格式）"></a>:nested：嵌套（默认格式）</h4><p>在执行监测(编译)命令时，可以指定输出格式为<code>nested</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch sass:css --style nested</span><br></pre></td></tr></table></figure><p>输出css格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123; </span><br><span class="line"><span class="attribute">list-style</span>: none; </span><br><span class="line"><span class="attribute">line-height</span>: normal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="compact：紧凑"><a href="#compact：紧凑" class="headerlink" title=":compact：紧凑"></a>:compact：紧凑</h4><p>紧凑格式占用的空间要小得多，每个CSS选择符定义只占用一行。<br>要将CSS输出设置为紧凑格式，可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch sass:css --style compact</span><br></pre></td></tr></table></figure><p>输出css格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123; </span><br><span class="line"><span class="attribute">list-style</span>: none; </span><br><span class="line"><span class="attribute">line-height</span>: normal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="expanded：扩展"><a href="#expanded：扩展" class="headerlink" title=":expanded：扩展"></a>:expanded：扩展</h4><p>展开格式看起来像开发人员手写的格式。<br>要将CSS输出设置为展开格式，可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch sass:css --style expanded</span><br></pre></td></tr></table></figure><p>输出css格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123; </span><br><span class="line"><span class="attribute">list-style</span>: none; </span><br><span class="line"><span class="attribute">line-height</span>: normal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="compressed：压缩"><a href="#compressed：压缩" class="headerlink" title=":compressed：压缩"></a>:compressed：压缩</h4><p>压缩格式占用尽可能少的空间，选择符定义不换行，文件最小，一般用于生产版本。<br>要将CSS输出设置为压缩格式，可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch sass:css --style compressed</span><br></pre></td></tr></table></figure><p>输出css格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">15px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>:none;</span><br><span class="line"><span class="attribute">line-height</span>:normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sass-语法"><a href="#Sass-语法" class="headerlink" title="Sass 语法"></a>Sass 语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>scss文件中</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">会包含在没有压缩之后的css里面</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="comment">// 单行注释（不会出现在css里面）</span></span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>; </span><br><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">会包含在没有压缩之后的css里面</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong> 如果编译输出的CSS格式是<code>compressed：压缩</code>时，多行注释也不会再css文件中出现。<br>如果想要编译输出的CSS格式是<code>compressed：压缩</code>时，多行注释仍然在css文件中出现。<br>scss文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 多行注释 */</span> </span><br><span class="line"><span class="comment">/*! 强制输出的注释内容 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="selector-tag">ul</span>&#123; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15px</span>; </span><br><span class="line"><span class="selector-tag">li</span>&#123; </span><br><span class="line"><span class="attribute">list-style</span>: none; </span><br><span class="line"><span class="attribute">line-height</span>: normal; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的css文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*! 强制输出的注释内容 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">15px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>:none;</span><br><span class="line"><span class="attribute">line-height</span>:normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量$"></a>变量<code>$</code></h3><p>变量以<strong>美元符号</strong>开头，赋值方法与 CSS 属性的写法一样：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>:<span class="number">#000000</span>; <span class="comment">// 变量声明 </span></span><br><span class="line"><span class="variable">$highlight-color</span>: <span class="number">#F90</span>; </span><br><span class="line"><span class="variable">$highlight-border</span>: <span class="number">1px</span> solid <span class="variable">$highlight-color</span>; <span class="comment">// 将变量直接赋值给border属性 </span></span><br><span class="line"><span class="selector-tag">div</span>&#123; </span><br><span class="line"><span class="comment">// 变量引用 </span></span><br><span class="line"><span class="attribute">color</span>:<span class="variable">$color</span>; </span><br><span class="line"><span class="attribute">border</span>: <span class="variable">$highlight-border</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000000</span>; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#F90</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将局部变量转换为全局变量可以添加 <code>!global</code> 声明：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">main</span> &#123;</span><br><span class="line"><span class="variable">$width</span>: <span class="number">5em</span> !global; <span class="attribute">width</span>: <span class="variable">$width</span>; </span><br><span class="line">&#125;</span><br><span class="line"># sidebar &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="variable">$width</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"># <span class="selector-tag">main</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">5em</span>; </span><br><span class="line">&#125;</span><br><span class="line"># sidebar &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">5em</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>Sass支持选择器及属性嵌套，可以避免代码的重复书写。</p><h4 id="1-选择器嵌套"><a href="#1-选择器嵌套" class="headerlink" title="1. 选择器嵌套"></a>1. 选择器嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="selector-tag">h1</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#333</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">1.4px</span>; </span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">h1</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#333</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">1.4px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-父选择器"><a href="#2-父选择器" class="headerlink" title="2. 父选择器 &amp;"></a>2. 父选择器 <code>&amp;</code></h4><p>在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 <code>hover</code> 样式时，或者当 <code>body</code> 元素有某个 classname 时，可以用 <code>&amp;</code> 代表嵌套规则外层的父选择器。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">font-weight</span>: bold; </span><br><span class="line"><span class="attribute">text-decoration</span>: none; </span><br><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line"><span class="attribute">text-decoration</span>: underline; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.firefox</span> &amp; &#123; </span><br><span class="line"><span class="attribute">font-weight</span>: normal; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">font-weight</span>: bold; </span><br><span class="line"><span class="attribute">text-decoration</span>: none; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line"><span class="attribute">text-decoration</span>: underline; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.firefox</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">font-weight</span>: normal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-属性嵌套"><a href="#3-属性嵌套" class="headerlink" title="3. 属性嵌套"></a>3. 属性嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid; </span><br><span class="line"><span class="selector-id">#ccc</span> &#123; </span><br><span class="line"><span class="attribute">left</span>: <span class="number">0px</span>; </span><br><span class="line"><span class="attribute">right</span>: <span class="number">0px</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>; </span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">0px</span>; </span><br><span class="line"><span class="attribute">border-right</span>: <span class="number">0px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插值语句"><a href="#插值语句" class="headerlink" title="插值语句 #{}"></a>插值语句 <code>#&#123;&#125;</code></h3><p>通过 <code>#&#123;&#125;</code> 插值语句可以在选择器或属性名中使用变量：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: foo; </span><br><span class="line"><span class="variable">$attr</span>: border; </span><br><span class="line"><span class="selector-tag">p</span>.#&#123;<span class="variable">$name</span>&#125; &#123; </span><br><span class="line">#&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.foo</span> &#123; </span><br><span class="line"><span class="attribute">border-color</span>: blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Sass支持 7 种主要的数据类型：</p><ul><li>Number 类型（数字类型）：<code>1, 2, 13, 10px</code></li><li>String 类型（字符串类型）：有引号字符串与无引号字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li><li>Colors类型（颜色类型）：<code>blue, #04a3f9, rgba(255,0,0,0.5)</code></li><li>Boolean 类型（布尔类型）：<code>true, false</code></li><li>空值（Null）：<code>null</code></li><li>Lists 类型（列表类型）：用空格或逗号作分隔符，<code>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</code></li><li>Maps类型，相当于 JavaScript 的 object，<code>(key1: value1, key2: value2)</code><br>Sass也支持其他 CSS 属性值，比如 Unicode 字符集，或 <code>!important</code> 声明。然而Sass 不会特殊对待这些属性值，一律视为无引号字符串。</li></ul><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><h4 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h4><p>Sass支持数字的加减乘除、取整等运算 (<code>+, -, *, /, %</code>)，如果必要会在不同单位间转换值。<br>关系运算 <code>&lt;, &gt;, &lt;=, &gt;=</code> 也可用于数字运算，相等运算 <code>==, !=</code>  可用于所有数据类型。<br><strong>实例：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">1</span> + <span class="number">50px</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">50</span> * <span class="number">2px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">51px</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>除法运算</strong><br>以下三种情况 <code>/</code> 将被视为除法运算符号：</p><ul><li>如果值，或值的一部分，是变量或者函数的返回值</li><li>如果值被圆括号包裹</li><li>如果值是算数表达式的一部分<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">4px</span>;  </span><br><span class="line"><span class="variable">$width</span>: <span class="number">100px</span>; </span><br><span class="line"><span class="attribute">width</span>: <span class="variable">$width</span>/<span class="number">2</span>;  </span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">round</span>(<span class="number">2.5</span>)/<span class="number">2</span>;  </span><br><span class="line"><span class="attribute">height</span>: (<span class="number">50px</span>/<span class="number">2</span>);  </span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">4px</span> + <span class="number">18px</span>/<span class="number">2px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译为：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">4px</span>; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">1.5</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">25px</span>; </span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">13px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="颜色值运算"><a href="#颜色值运算" class="headerlink" title="颜色值运算"></a>颜色值运算</h4><p>颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#010203</span> * <span class="number">2</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算 <code>01 + 04 = 05</code> <code>02 + 05 = 07</code> <code>03 + 06 = 09</code>，<code>01 * 2 = 02</code> <code>02 * 2 = 04</code> <code>03 * 2 = 06</code><br>然后编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#050709</span>; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#020406</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;sa&#x27;</span> + <span class="string">&#x27;sb&#x27;</span>; </span><br><span class="line"><span class="attribute">cursor</span>: <span class="string">&#x27;sa&#x27;</span> - <span class="string">&#x27;sb&#x27;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;sasb&quot;</span>; </span><br><span class="line"><span class="attribute">cursor</span>: <span class="string">&quot;sa&quot;</span>-<span class="string">&quot;sb&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><p>Sass支持布尔型的 <code>and</code> <code>or</code> 以及 <code>not</code> 运算。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;sa&#x27;</span> and <span class="string">&#x27;sb&#x27;</span>; </span><br><span class="line"><span class="attribute">cursor</span>: <span class="string">&#x27;sb&#x27;</span> or <span class="number">1</span>; </span><br><span class="line"><span class="attribute">right</span>: <span class="number">1</span> not <span class="number">2</span>; </span><br><span class="line"><span class="attribute">clear</span>: <span class="string">&#x27;sa&#x27;</span> or <span class="string">&#x27;sb&#x27;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;sb&quot;</span>; </span><br><span class="line"><span class="attribute">cursor</span>: <span class="string">&quot;sb&quot;</span>; </span><br><span class="line"><span class="attribute">right</span>: <span class="number">1</span> false; </span><br><span class="line"><span class="attribute">clear</span>: <span class="string">&quot;sa&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h4><p>数组不支持任何运算方式</p><h3 id="混合-Mixins"><a href="#混合-Mixins" class="headerlink" title="混合-Mixins"></a>混合-Mixins</h3><p>sass中使用@mixin声明混合，可以传递参数，参数名以$符号开始，mixin可以传入参数，多个参数以逗号分开，也可以给参数设置默认值。<br>mixin是可以重用的一组CSS声明。mixin有助于减少重复代码，只需声明一次，就可在文件中引用。mixin类似变量，不同的是变量存储值，mixin存储一组css声明。<br><strong>表达式</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> 名字(参数<span class="number">1</span>,参数<span class="number">2</span>…)&#123;</span><br><span class="line">… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式：使用<code>@include</code>指令后跟mixin的名称<br><strong>实例：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> alert (<span class="variable">$text-color</span>, <span class="variable">$background</span>) &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$text-color</span>; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">$background</span>; </span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="variable">$text-color</span>, <span class="number">10%</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.alert-warning</span> &#123; </span><br><span class="line"><span class="keyword">@include</span> alert(<span class="number">#555555</span>,<span class="number">#c03737</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.alert-warning</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#555555</span>; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#c03737</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.alert-warning</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#3c3c3c</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>Sass 提供了一些基础的控制指令，比如在满足一定条件时引用样式，或者设定范围重复输出格式。控制指令是一种高级功能，日常编写过程中并不常用到，主要与混合指令 (mixin) 配合使用。</p><h4 id="if"><a href="#if" class="headerlink" title="@if"></a>@if</h4><p><strong>表达式</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@if</span> 条件 &#123; … &#125;</span><br></pre></td></tr></table></figure><p>当 <code>@if</code> 的表达式返回值不是 <code>false</code> 或者 <code>null</code> 时，条件成立，输出 <code>&#123;&#125;</code> 内的代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span> &#123; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid; </span><br><span class="line">&#125; <span class="keyword">@if</span> <span class="number">5</span> &lt; <span class="number">3</span> &#123; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> dotted; </span><br><span class="line">&#125; <span class="keyword">@if</span> null &#123; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> double; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@if</code> 声明后面可以跟多个 <code>@else if</code> 声明，或者一个 <code>@else</code> 声明。如果 <code>@if</code> 声明失败，Sass 将逐条执行 <code>@else if</code> 声明，如果全部失败，最后执行 <code>@else</code> 声明，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$type</span>: monster; </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="keyword">@if</span> <span class="variable">$type</span> == ocean &#123; </span><br><span class="line"><span class="attribute">color</span>: blue; </span><br><span class="line">&#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == matador &#123; </span><br><span class="line"><span class="attribute">color</span>: red; </span><br><span class="line">&#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == monster &#123; </span><br><span class="line"><span class="attribute">color</span>: green; </span><br><span class="line">&#125; <span class="keyword">@else</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: black; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: green; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h4><p><strong>表达式</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$var</span> from &lt;开始值&gt; though &lt;结束值&gt; &#123; … &#125;</span><br></pre></td></tr></table></figure><p><code>@for</code> 指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。<br>这个指令包含两种格式：</p><ul><li><code>@for $var from &lt;start&gt; through &lt;end&gt;</code></li><li><code>@for $var from &lt;start&gt; to &lt;end&gt;</code><br>区别在于 <code>through</code> 与 <code>to</code> 的含义：<em>当使用 <code>through</code> 时，条件范围包含 <code>&lt;start&gt;</code> 与 <code>&lt;end&gt;</code> 的值，而使用 <code>to</code> 时条件范围只包含 <code>&lt;start&gt;</code> 的值不包含 <code>&lt;end&gt;</code> 的值</em>。另外，<code>$var</code> 可以是任何变量，比如 <code>$i</code>；<code>&lt;start&gt;</code> 和 <code>&lt;end&gt;</code> 必须是整数值。<br><strong>实例：</strong><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$j</span> from <span class="number">4</span> through <span class="number">6</span> &#123; </span><br><span class="line"><span class="selector-class">.item-</span>#&#123;<span class="variable">$j</span>&#125; &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$j</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译为：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.item-4</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.item-5</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.item-6</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">12em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h4><p><strong>表达式</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$var</span> in <span class="variable">$list</span> &#123; … &#125;</span><br></pre></td></tr></table></figure><p><code>@each</code> 指令的格式是 <code>$var in &lt;list&gt;</code>, <code>$var</code> 可以是任何变量名，比如 <code>$length</code> 或者 <code>$name</code>，而 <code>&lt;list&gt;</code> 是一连串的值，也就是值列表。<code>@each</code> 将变量 <code>$var</code> 作用于值列表中的每一个项目，然后输出结果。<br><strong>实例：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$fruit</span> in apple, banana, watermelon, strawberry &#123; </span><br><span class="line">.#&#123;<span class="variable">$fruit</span>&#125;-<span class="attribute">icon</span> &#123; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;/images/#&#123;$fruit&#125;.png&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.apple-icon</span> &#123; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;/images/apple.png&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.banana-icon</span> &#123; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;/images/banana.png&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.watermelon-icon</span> &#123; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;/images/watermelon.png&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.strawberry-icon</span> &#123; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;/images/strawberry.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h4><p><strong>表达式</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@while</span> 条件 &#123; … &#125;</span><br></pre></td></tr></table></figure><p><code>@while</code> 指令重复输出格式直到表达式返回结果为 <code>false</code>。这样可以实现比 <code>@for</code> 更复杂的循环，只是很少会用到。<br><strong>实例：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$j</span>: <span class="number">8</span>; </span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$j</span> &gt;<span class="number">0</span> &#123; </span><br><span class="line"><span class="selector-class">.item-</span>#&#123;<span class="variable">$j</span>&#125; &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$j</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$j</span>: <span class="variable">$j</span> - <span class="number">3</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.item-8</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">16em</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.item-5</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.item-2</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Partials与-import"><a href="#Partials与-import" class="headerlink" title="Partials与@import"></a>Partials与@import</h3><h4 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h4><p>Sass 可以帮助我们减少 CSS 重复的代码，节省开发时间。<br>我们可以安装不同的属性来创建一些代码文件，如：变量定义的文件、颜色相关的文件、字体相关的文件等。</p><h4 id="Sass-导入文件"><a href="#Sass-导入文件" class="headerlink" title="Sass 导入文件"></a>Sass 导入文件</h4><p>类似 CSS，Sass 支持 <strong>@import</strong> 指令。<br>@import 指令可以让我们导入其他文件等内容。<br>CSS @import 指令在每次调用时，都会创建一个额外的 HTTP 请求。但，Sass @import 指令将文件包含在 CSS 中，不需要额外的 HTTP 请求。<br>Sass @import 指令语法如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> filename; <span class="comment">// 例： @import &quot;base&quot;;</span></span><br></pre></td></tr></table></figure><p><strong>注意：包含文件时不需要指定文件后缀</strong>，Sass 会自动添加后缀 .scss。</p><h4 id="局部文件-Partial"><a href="#局部文件-Partial" class="headerlink" title="局部文件(Partial)"></a>局部文件(Partial)</h4><p>Sass源文件中可以通过<code>@import</code>指令导入其他Sass源文件，被导入的文件就是局部文件，局部文件让Sass模块化编写更加容易。<br>如果一个目录正在被Sass程序监测，目录下的所有scss&#x2F;sass源文件都会被编译，但通常不希望局部文件被编译，因为局部文件是用来被导入到其他文件的。如果不想局部文件被编译，文件名可以以下划线 （ _ ）开头。<br><strong>实例：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _base.scss文件 </span></span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>; </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test1.scss文件 </span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;base&quot;</span>;</span><br><span class="line"><span class="keyword">@mixin</span> alert (<span class="variable">$text-color</span>, <span class="variable">$background</span>) &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$text-color</span>; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">$background</span>; </span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="variable">$text-color</span>, <span class="number">10%</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.alert-warning</span> &#123; </span><br><span class="line"><span class="keyword">@include</span> alert(<span class="number">#555555</span>, <span class="number">#c03737</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>; </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.alert-warning</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#555555</span>; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#c03737</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.alert-warning</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#3c3c3c</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>表达式</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> 名称 (参数<span class="number">1</span>,参数<span class="number">2</span>) &#123; … &#125;</span><br></pre></td></tr></table></figure><p>Sass 支持自定义函数，并能在任何属性值中使用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$grid-width</span>: <span class="number">40px</span>; </span><br><span class="line"><span class="variable">$gutter-width</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="keyword">@function</span> grid-width(<span class="variable">$n</span>) &#123; </span><br><span class="line"><span class="keyword">@return</span> <span class="variable">$n</span> * <span class="variable">$grid-width</span> + (<span class="variable">$n</span> - <span class="number">1</span>) * <span class="variable">$gutter-width</span>; </span><br><span class="line">&#125;</span><br><span class="line"># sidebar &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">grid-width</span>(<span class="number">5</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"># sidebar &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">240px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 mixin 相同，也可以传递若干个全局变量给函数作为参数。一个函数可以含有多条语句，需要调用 <code>@return</code> 输出结果。自定义的函数也可以使用关键词参数，上面的例子还可以这样写：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sidebar &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">grid-width</span>(<span class="variable">$n</span>: <span class="number">5</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议在自定义函数前添加前缀避免命名冲突，其他人阅读代码时也会知道这不是 Sass 或者 CSS 的自带功能。自定义函数与 mixin 相同，都支持 variable arguments</p><h3 id="Sass-颜色函数"><a href="#Sass-颜色函数" class="headerlink" title="Sass 颜色函数"></a>Sass 颜色函数</h3><p>Sass 颜色函数可以分为三个部分：颜色设置、颜色获取以及颜色操作。</p><h4 id="Sass-颜色设置"><a href="#Sass-颜色设置" class="headerlink" title="Sass 颜色设置"></a>Sass 颜色设置</h4><table><thead><tr><th>函数</th><th>描述 &amp; 实例</th></tr></thead><tbody><tr><td>rgb(<em>red</em>, <em>green</em>, <em>blue</em>)</td><td>创建一个 Red-Green-Blue (RGB) 色。其中 R 是 “red” 表示红色，而 G 是 “green” 绿色，B 是 “blue” 蓝色。</td></tr><tr><td></td><td><strong>实例:</strong> rgb(0, 0, 255);</td></tr><tr><td>rgba(<em>red</em>, <em>green</em>, <em>blue</em>, <em>alpha</em>)</td><td>根据红、绿、蓝和透明度值创建一个颜色。</td></tr><tr><td></td><td><strong>实例:</strong> rgba(0, 0, 255, 0.3);</td></tr><tr><td>hsl(<em>hue</em>, <em>saturation</em>, <em>lightness</em>)</td><td>通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色。</td></tr><tr><td></td><td><strong>实例:</strong> hsl(120, 100%, 50%); &#x2F;&#x2F; 绿色                                                                     hsl(120, 100%, 75%); &#x2F;&#x2F; 浅绿色</td></tr><tr><td>hsla(<em>hue</em>, <em>saturation</em>, <em>lightness</em>, <em>alpha</em>)</td><td>通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色。</td></tr><tr><td></td><td><strong>实例:</strong> hsl(120, 100%, 50%, 0.3); &#x2F;&#x2F; 绿色带有透明度                                                  hsl(120, 100%, 75%, 0.3); &#x2F;&#x2F; 浅绿色带有透明度</td></tr><tr><td>grayscale(<em>color</em>)</td><td>将一个颜色变成灰色，相当于 desaturate( color,100%)。</td></tr><tr><td></td><td><strong>实例:</strong> grayscale(#7fffd4); 结果: #c6c6c6</td></tr><tr><td>complement(<em>color</em>)</td><td>返回一个补充色，相当于adjust-hue($color,180deg)。</td></tr><tr><td></td><td><strong>实例:</strong> complement(#7fffd4); 结果: #ff7faa</td></tr><tr><td>invert(<em>color</em>, <em>weight</em>)</td><td>返回一个反相色，红、绿、蓝色值倒过来，而透明度不变。</td></tr><tr><td></td><td><strong>实例:</strong> invert(white); 结果: black</td></tr></tbody></table><h3 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h3><p>Sass 中 <code>@media</code> 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 <code>@media</code> 嵌套在 CSS 规则内，编译时，<code>@media</code> 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 <code>@media</code> 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">567px</span>) &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">600px</span>; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">resolution</span>: <span class="number">192dpi</span>) &#123; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(/img/<span class="number">1</span>.png); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">1120px</span>) &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">567px</span>) &#123; </span><br><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">600px</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">567px</span>) <span class="keyword">and</span> (<span class="attribute">resolution</span>: <span class="number">192dpi</span>) &#123; </span><br><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/img/1.png</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">1120px</span>) &#123; </span><br><span class="line"><span class="selector-class">.component</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承（-extend）"><a href="#继承（-extend）" class="headerlink" title="继承（@extend）"></a>继承（@extend）</h3><p>sass中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词@extend，后面紧跟需要继承的选择器。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class1</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.class2</span> &#123; </span><br><span class="line"><span class="keyword">@extend</span> .class1; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.class1</span>, <span class="selector-class">.class2</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.class2</span> &#123; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.class2</code>不仅会继承<code>.class1</code>自身的所有样式，也会继承任何跟<code>.class1</code>有关的组合选择器样式，实例如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class1</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.class1</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: white; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.class2</span> &#123; </span><br><span class="line"><span class="keyword">@extend</span> .class1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span> </span><br><span class="line"><span class="selector-class">.class1</span>, <span class="selector-class">.class2</span> &#123; </span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.class1</span> <span class="selector-tag">a</span>, <span class="selector-class">.class2</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: white; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="警告与错误"><a href="#警告与错误" class="headerlink" title="警告与错误"></a>警告与错误</h3><p>当错误使用函数或mixins时可以看到警告或错误提示信息</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: ( light:<span class="number">#ffffff</span>, dark:<span class="number">#000000</span> );</span><br><span class="line"><span class="keyword">@function</span> <span class="attribute">color</span>(<span class="variable">$key</span>) &#123; </span><br><span class="line"><span class="keyword">@if</span> <span class="keyword">not</span> map-has-key(<span class="variable">$colors</span>, <span class="variable">$key</span>) &#123; </span><br><span class="line"><span class="keyword">@warn</span> <span class="string">&quot;在 $colors 里没找到 #&#123;$key&#125; 这个key&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@return</span> map-get(<span class="variable">$colors</span>, <span class="variable">$key</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">color</span>(gray); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 在命令行窗口显示： </span></span><br><span class="line"><span class="comment">// WARNING：在 $colors 里没找到 gray 这个key</span></span><br><span class="line"><span class="comment">// 把@warn改为@error，会在css文件中出现错误信息 </span></span><br></pre></td></tr></table></figure><h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p>想更多更详细了解sass可以浏览：<br>官网：<a href="https://sass-lang.com/">Sass: Syntactically Awesome Style Sheets (sass-lang.com)</a><br>中文官网：<a href="https://www.sass.hk/docs/">Sass教程 Sass中文文档 | Sass中文网</a></p>]]></content>
    
    
    <summary type="html">Sass (英文全称：Syntactically Awesome Stylesheets) 是一个最初由 Hampton Catlin 设计并由 Natalie Weizenbaum 开发的层叠样式表语言。Sass 是一个 CSS 预处理器，是 CSS 扩展语言，可以帮助我们减少 CSS 重复的代码，节省开发时间。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://fanxing28.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>函数的相关知识</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/JavaScript/%E3%80%90JS%E3%80%91%E5%87%BD%E6%95%B0/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/JavaScript/%E3%80%90JS%E3%80%91%E5%87%BD%E6%95%B0/</id>
    <published>2023-11-28T14:32:25.000Z</published>
    <updated>2023-12-02T12:23:47.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-函数的概述"><a href="#一-函数的概述" class="headerlink" title="一. 函数的概述"></a>一. 函数的概述</h2><p>函数也是一个对象，也具有普通对象的功能；函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码。所有的方法都是函数构建的，函数构建一些常用功能。<br>简单理解就是</p><blockquote><p>对于js来说，函数就是把任意一段代码放在一个盒子里面。在我想要让这段代码执行的时候，直接执行这个盒子里面的代码就行。</p></blockquote><p><strong>函数和对象的关系</strong><br>函数属于对象，但是函数又是对象的构造器(类是函数构造的，类叫构造函数)，函数对象只是对象中的一种。函数对象在很多时候表现的特殊一些。<br>使用函数<strong>目的</strong>：让大量代码重复使用。<br>使用$\color{red} {typeof} $检查一个函数时会返回function。</p><h2 id="二-函数声明"><a href="#二-函数声明" class="headerlink" title="二. 函数声明"></a>二. 函数声明</h2><blockquote><p>function 声明函数关键字（全部小写） 函数名一般为动词</p></blockquote><p><strong>函数的声明方式有以下两种</strong>：</p><ol><li>利用函数关键字自定义函数（命名函数或者叫声明式函数）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名([形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N])&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例</span></span><br><span class="line"><span class="keyword">function</span>  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>function: 声明函数的关键字，表示接下来是一个函数了</li><li>sayHello: 函数的名字，我们自己定义的（遵循变量名的命名规则和命名规范）</li><li>(): 必须写，是用来放参数的位置</li><li>{}: 就是我们用来放一段代码的位置（也就是类似于“盒子”）<br><code>注</code>：声明式函数可以在任意位置调用（可以变量提升）</li></ul><ol start="2"><li>函数变量表达式（匿名函数或者叫赋值式函数）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&#x27;wo&#x27;</span>);<span class="comment">//wo</span></span><br></pre></td></tr></table></figure><code>注</code>：赋值式函数，声明后才可以使用，根据变量来的，（不允许声明前调用，若变量提升（声明前调用）输出undefined）</li></ol><h2 id="三-调用函数"><a href="#三-调用函数" class="headerlink" title="三. 调用函数"></a>三. 调用函数</h2><p>语法：函数名();<br>声明式函数和赋值式函数的函数调用方式都是 <code>函数名();</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sayHello</span>();<span class="comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure><p>$\color{red}{注意}$：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p><h2 id="四-形参和实参"><a href="#四-形参和实参" class="headerlink" title="四. 形参和实参"></a>四. 形参和实参</h2><p><strong>形参</strong>：在声明函数时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为形参。</p><blockquote><p>定义函数时，可以在()中定义一个或多个形参，形参之间使用<code>,</code>隔开。定义形参就相当于在函数内声明了对应的变量但是并不赋值。形参会在调用时才赋值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>,形参<span class="number">2.</span>..)&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line">函数名(实参<span class="number">1</span>,实参<span class="number">2.</span>..);</span><br></pre></td></tr></table></figure><p><strong>实参</strong>：在调用函数时，同样也需要传递相应的参数，这些参数被称为实参。<br><strong>使用实参的的一些情况</strong>：</p><ul><li>调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参。</li><li>调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。</li><li>如果实参的数量大于形参，多余实参将不会赋值。</li><li>如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined。<br><strong>函数形参与实参个数匹配</strong></li></ul><ol><li>如果实参的个数和形参的个数一致，正常输出结果。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></li><li>如果实参的个数多于形参的个数，会取形参个数相对应的实参进行运算<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></li><li>如果实参的个数少于形参的个数，结果：NaN<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>);<span class="comment">//1+undefined = NaN</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="五-返回值（return）"><a href="#五-返回值（return）" class="headerlink" title="五. 返回值（return）"></a>五. 返回值（return）</h2><blockquote><p>使用return 来设置函数的返回值。</p></blockquote><p>函数的返回值格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">    <span class="keyword">return</span> 需要返回的结果;</span><br><span class="line">&#125;</span><br><span class="line">函数名();</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li>该值就会成为函数的返回值，可以通过一个变量来接收返回值。</li><li><strong>return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。</strong></li><li>return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。</li><li>如果return后不跟值，或者是不写return则函数默认返回undefined。</li><li>return只能返回一个值（以最后一个为准）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2, num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">// -1</span></span><br></pre></td></tr></table></figure><strong>案例—编写一个函数，计算两个数字的和、差、积、商</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calc</span>(<span class="params">n1, n2, option</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> n1 + n2; <span class="comment">//有了return,省略break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> n1 - n2; </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> n1 * n2; </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> n1 / n2; </span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;输入有误&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;+&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;*&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>());</span><br></pre></td></tr></table></figure></li></ul><h2 id="六-break、continue和return区别"><a href="#六-break、continue和return区别" class="headerlink" title="六. break、continue和return区别"></a>六. break、continue和return区别</h2><ol><li>break<br> 退出当前的循环体</li><li>continue<br> 跳过当次循环，继续下次循环</li><li>return<br> 退出函数</li></ol><h2 id="七-arguments-的使用"><a href="#七-arguments-的使用" class="headerlink" title="七. arguments 的使用"></a>七. arguments 的使用</h2><p>当我们不确定有多少个参数传递时，可以用$\color{red}{arguments}$来获取。在JavaScript中，arguments实际上是当前函数的一个$\color{red}{内置对象}$。所有函数都内置了一个arguments对象，arguments对象中$\color{red}{存储了传递的所有实参}$​。<br>arguments ：<strong>伪数组</strong>，并不是真正意义上的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">/* Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"><span class="comment">0:1</span></span><br><span class="line"><span class="comment">1:2</span></span><br><span class="line"><span class="comment">2:3*/</span></span><br></pre></td></tr></table></figure><p><strong>案例—利用函数求任意个数的最大值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">            max = <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>具有数组的length属性</li><li>按照索引的方式进行存储的</li><li>没有pop()、push()方法</li></ol><h2 id="八-常见的代码错误"><a href="#八-常见的代码错误" class="headerlink" title="八. 常见的代码错误"></a>八. 常见的代码错误</h2><blockquote><p>Debug:Delete(删除) Bug(错误)</p></blockquote><p>console面板提示错误信息，而且错误信息的种类比较多，这里列出常见的错误种类，以及如何快速解决。</p><ol><li>ReferenceError:引用错误，一般是什么的变量或者标识符根本不存在。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log(a);</span></span><br><span class="line"><span class="comment">// hehe();</span></span><br></pre></td></tr></table></figure></li><li>SyntaxError:语法错误，违背语言约定的语法规则。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 1abc = 10;</span></span><br></pre></td></tr></table></figure></li><li>RangeError:范围错误，输入的值，设置的值超出约到的范围。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var num = 3.1415;</span></span><br><span class="line"><span class="comment">// console.log(num.toFixed(2)); //3.14</span></span><br><span class="line"><span class="comment">// console.log(num.toFixed(-2)); //保存</span></span><br></pre></td></tr></table></figure></li><li>TypeError:类型错误，该语法不是这么玩的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 123();</span></span><br></pre></td></tr></table></figure><code>注</code>：代码没有达到预期的结果，先查看console控制面板，检查是否存在错误。</li></ol><h2 id="九-函数的一些经典案例"><a href="#九-函数的一些经典案例" class="headerlink" title="九. 函数的一些经典案例"></a>九. 函数的一些经典案例</h2><h3 id="1-判断一个正整数是否为质数"><a href="#1-判断一个正整数是否为质数" class="headerlink" title="1. 判断一个正整数是否为质数"></a>1. 判断一个正整数是否为质数</h3><blockquote><p>编写一个函数 传入一个正整数作为参数，判断传入的数是否为质数，返回一个布尔值结果。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">n</span>) &#123; <span class="comment">//n:检测的数字</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(n) &amp;&amp; n % <span class="number">1</span> === <span class="number">0</span>) &#123; <span class="comment">//检查是数字，同时检查正整数</span></span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">1</span>) &#123; <span class="comment">//排除1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i === <span class="number">0</span>) &#123; <span class="comment">//如果break有效，证明当前的数字一定不是质数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !(i &lt;= n / <span class="number">2</span>); <span class="comment">//true不是质数，否则是质数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;输入有误&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPrime</span>(<span class="number">13</span>)); <span class="comment">//质数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isPrime</span>(<span class="number">10</span>)); <span class="comment">//不是质数</span></span><br></pre></td></tr></table></figure><h3 id="2-写函数判断输入的年份是否为闰年"><a href="#2-写函数判断输入的年份是否为闰年" class="headerlink" title="2. 写函数判断输入的年份是否为闰年"></a>2. 写函数判断输入的年份是否为闰年</h3><blockquote><p>编写一个函数，传入一个 1000-3000 之间的正整数为参数，判断这个年份是否是闰年，并返回布尔值为结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isLeap</span>(<span class="params">n</span>) &#123; <span class="comment">//n:检测的数字</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(n) &amp;&amp; n % <span class="number">1</span> === <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">1000</span> &amp;&amp; n &lt;= <span class="number">3000</span>) &#123; <span class="comment">//检查是数字，同时检查正整数</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; n % <span class="number">100</span> !== <span class="number">0</span> || n % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;输入有误&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isLeap</span>(<span class="number">2022</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isLeap</span>(<span class="number">2020</span>));</span><br></pre></td></tr></table></figure><h3 id="3-创建几行几列的表格"><a href="#3-创建几行几列的表格" class="headerlink" title="3. 创建几行几列的表格"></a>3. 创建几行几列的表格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cTable</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;table border=1&gt;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 循环绘制tr</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>; <span class="comment">//初始，执行一次</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= a) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;tr&gt;&#x27;</span>);</span><br><span class="line">        <span class="comment">// 循环绘制td</span></span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">1</span>; <span class="comment">//注意：必须放到循环体中，每次从1开始的</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= b) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;td&gt;1111111&lt;/td&gt;&#x27;</span>);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;/tr&gt;&#x27;</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;/table&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cTable</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">cTable</span>(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"><span class="title function_">cTable</span>(<span class="number">7</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h2 id="十-预解析"><a href="#十-预解析" class="headerlink" title="十. 预解析"></a>十. 预解析</h2><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="(一)概述"></a>(一)概述</h3><blockquote><p>在代码执行之前，对代码进行通读并解析</p></blockquote><p><strong>首先，思考两个问题</strong>：<br>为什么变量可以变量提升，并且同时输出undefined?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>为什么声明式函数可以在任意地方进行调用?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><p>针对以上的两个问题，就要说到预解析的作用了。<br><strong>预解析特点</strong>：</p><ol><li>预解析只会解析 <strong>var 声明的变量</strong> 和 <strong>声明式函数</strong></li><li>赋值式函数，按照var 的方式进行预解析</li><li>函数里面的变量，不会进行预解析，</li><li>函数里面的代码会在该函数调用的时候，进行预解析<br>预解析：<strong>解析 var 声明的变量</strong><blockquote><p>提前声明这一个变量，但是不赋值</p></blockquote></li></ol><p>预解析：<strong>解析 声明式函数</strong></p><blockquote><p>提前声明这个变量，并且赋值为一个函数</p></blockquote><h3 id="二-解读预解析两步"><a href="#二-解读预解析两步" class="headerlink" title="(二) 解读预解析两步"></a>(二) 解读预解析两步</h3><h4 id="预解析的两大步骤"><a href="#预解析的两大步骤" class="headerlink" title="预解析的两大步骤"></a>预解析的两大步骤</h4><p>(1) 预编译，代码进入浏览器逐行执行之前干的事情(不可见)(案例1-4会分别解释以下四句话)</p><ol><li>先找var和function关键字，<strong>找到var，提前赋值undefined</strong>。<strong>找到function，提前将整个函数体赋值给函数名称</strong>。</li><li>如果预编译函数名和变量名出现重复，函数名优先(去除变量名)</li><li>函数内部依然做预编译，同时函数的参数类似函数内部的变量，也要做预编译。</li><li>函数如果带有形参，要<strong>先形参赋值，在进行预解析</strong><br>(2) 逐行执行，代码进入浏览器，可以根据浏览器返回的信息，查看结果，同时遇到代码错误，立刻停止执行。<blockquote><p>函数声明直接跳过，函数必须调用才有意义。</p></blockquote></li></ol><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><blockquote><p>分析预编译的结果：提前进入浏览器的引擎 先找var和function关键字，<strong>找到var，提前赋值undefined</strong>。<strong>找到function，提前将整个函数体赋值给函数名称</strong>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要执行的代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><p><strong>分析思路</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.首先对上述代码进行预编译：</span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数&#x27;</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.然后，进入逐行执行：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出：undefined</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 输出：函数</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 这里将预编译的结果进行覆盖：a = 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出：10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 输出：函数</span></span><br></pre></td></tr></table></figure><h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h4><blockquote><p>分析预编译的结果：提前进入浏览器的引擎 <strong>如果预编译函数名和变量名出现重复，函数名优先(去除变量名)</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要执行的代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br></pre></td></tr></table></figure><p><strong>分析思路</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.首先，对上述代码进行预编译：</span></span><br><span class="line"><span class="comment">// 由于函数名和变量名出现重复，函数名优先(去除变量名)</span></span><br><span class="line">a =  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数&#x27;</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.然后，进入逐行执行：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出：function a() &#123;console.log(&#x27;函数&#x27;);&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 修改预编译的结果： a = 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出：10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出：10</span></span><br></pre></td></tr></table></figure><h4 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h4><blockquote><p>分析函数内部预编译的结果：提前进入浏览器的引擎 <strong>函数内部依然做预编译，同时函数的参数类似函数内部的变量，也要做预编译。</strong></p></blockquote><p><code>注意</code>：只要函数存在形参，一定要做预编译。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要执行的代码</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>());</span><br></pre></td></tr></table></figure><p><strong>分析思路</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.首先进行预编译：</span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(a); a = <span class="number">20</span>; <span class="variable language_">console</span>.<span class="title function_">log</span>(a); &#125;</span><br><span class="line"><span class="comment">// 注意：只要函数存在形参，一定要做预编译。</span></span><br><span class="line"><span class="comment">// 2.代码依次执行</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="comment">// 2.1首先函数内部预解析</span></span><br><span class="line">    a = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 2.2然后执行代码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出：undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 修改预编译的结果： a = 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()); <span class="comment">// 输出：undefined（因为函数没有写return，没有返回值）</span></span><br></pre></td></tr></table></figure><h4 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h4><blockquote><p>分析函数内部预编译的结果：提前进入浏览器的引擎 函数内部要做预编译，同时<strong>函数如果带有形参，要先形参赋值，在进行预解析。</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要执行的代码</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(a));</span><br></pre></td></tr></table></figure><p><strong>分析思路</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.首先进行预编译：</span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(a); a = <span class="number">20</span>; <span class="variable language_">console</span>.<span class="title function_">log</span>(a); &#125;</span><br><span class="line"><span class="comment">// 注意：只要函数存在形参，一定要做预编译。</span></span><br><span class="line"><span class="comment">// 2.代码依次执行</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123; </span><br><span class="line">    <span class="comment">// 2.1首先函数内部预解析</span></span><br><span class="line">    a = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 2.2然后执行代码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出：1（因为在预解析前先进行了形参赋值）</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 修改预编译的结果： a = 20</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(a)); <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure><h2 id="十一-自执行函数"><a href="#十一-自执行函数" class="headerlink" title="十一. 自执行函数"></a>十一. 自执行函数</h2><h3 id="一-函数的优点和注意事项"><a href="#一-函数的优点和注意事项" class="headerlink" title="(一) 函数的优点和注意事项"></a>(一) 函数的优点和注意事项</h3><blockquote><p>函数就是对一段代码的封装，在我们想调用的时候调用</p></blockquote><h4 id="1-函数的优点"><a href="#1-函数的优点" class="headerlink" title="(1) 函数的优点"></a>(1) 函数的优点</h4><ol><li>封装(封装多条代码，方便管理维护)；</li><li>重用(重复使用,解决代码冗余)；</li><li>可扩展(函数内部的功能以及参数)。</li></ol><h4 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="(2) 注意事项"></a>(2) 注意事项</h4><ol><li>函数名等于函数体<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(fn) <span class="comment">//输出函数名，没有调用，将整个函数结构体输出。</span></span><br></pre></td></tr></table></figure></li><li>typeof检测函数 — 返回function<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(fn));<span class="comment">// function</span></span><br></pre></td></tr></table></figure></li><li>声明的函数如果不调用，函数相当于不存在。通过调用找函数</li></ol><h3 id="二-自执行函数"><a href="#二-自执行函数" class="headerlink" title="(二) 自执行函数"></a>(二) 自执行函数</h3><blockquote><p>重要的函数种类：自执行函数，将函数的声明和调用写到一起，自动调用，一次性的。</p></blockquote><h4 id="1-自执行函数的书写方式"><a href="#1-自执行函数的书写方式" class="headerlink" title="(1) 自执行函数的书写方式"></a>(1) 自执行函数的书写方式</h4><ul><li><strong>方式一</strong>：<blockquote><p>利用括号()将函数体包裹起来</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">n1, n2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n1 + n2);</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><strong>方式二</strong>：<blockquote><p>利用逻辑运算符(!(使用居多)、+、~等)将前面的函数体进行打包</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">! <span class="keyword">function</span>(<span class="params">n1, n2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n1 + n2);</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-自执行函数的优缺点"><a href="#2-自执行函数的优缺点" class="headerlink" title="(2) 自执行函数的优缺点"></a>(2) 自执行函数的优缺点</h4><p><strong>优点</strong>：可以解决代码冲突</p><blockquote><p>在书写代码的时候，往往下面的代码会覆盖上面的代码，而用自执行函数就可以解决这一问题</p></blockquote><p><strong>缺点</strong>：它是一次性的</p><h3 id="三-函数之间的相互调用"><a href="#三-函数之间的相互调用" class="headerlink" title="(三) 函数之间的相互调用"></a>(三) 函数之间的相互调用</h3><blockquote><p>函数与函数之间是可以进行相互调用的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">111</span></span><br><span class="line"><span class="comment">222</span></span><br><span class="line"><span class="comment">fn2</span></span><br><span class="line"><span class="comment">fn1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="十二-作用域"><a href="#十二-作用域" class="headerlink" title="十二. 作用域"></a>十二. 作用域</h2><h3 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域?"></a>什么是作用域?</h3><blockquote><p>就是一个变量可以生效(访问)的范围，变量不是在所有地方都可以使用的，而这个变量的使用范围就是作用域。</p></blockquote><p><code>目的</code>：为了提高程序的可靠性和减少命名冲突<br><strong>在JS中作用域分成三种</strong>：</p><h3 id="1-全局作用域"><a href="#1-全局作用域" class="headerlink" title="(1) 全局作用域"></a>(1) 全局作用域</h3><p>直接在script标签中编写的代码都运行在全局作用域中。</p><blockquote><p>任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">// 10</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>全局作用域在打开页面时创建，在页面关闭时销毁。</li><li>全局作用域中有一个全局对象window，window对象由浏览器提供，可以在页面中直接使用，它代表的是整个的浏览器的窗口。</li><li>在全局作用域中创建的变量都会作为window对象的属性保存，在全局作用域中创建的函数都会作为window对象的方法保存。</li><li>在全局作用域中创建的变量和函数可以在页面的任意位置访问。在函数作用域中也可以访问到全局作用域的变量。</li></ol><h3 id="2-局部作用域"><a href="#2-局部作用域" class="headerlink" title="(2) 局部作用域"></a>(2) 局部作用域</h3><p><strong>局部作用域（也叫函数作用域）</strong>就是在全局作用域下面有开辟出来的一个相对小一些的作用域，在局部作用域中定义的变量只能在这个局部作用域内部使用。<br>在JavaScript中<strong>只有函数能生成一个局部作用域</strong>， 别的都不行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();<span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。</li><li>函数作用域在函数执行时创建，在函数执行结束时销毁。</li><li>在函数作用域中创建的变量，不能在全局中访问。</li><li>当在函数作用域中使用一个变量时，它会先在自身作用域中寻找：<blockquote><p>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找；</p></blockquote></li></ol><p>如果找到了则使用，找不到则一直会继续向上找。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 全局作用域</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">100</span>; <span class="comment">// 局部作用域  </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10  a是全局</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 100 b是局部，函数内部使用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10  a是全局</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 报错，b是局部，函数外面无法访问</span></span><br></pre></td></tr></table></figure><h3 id="3-块级作用域"><a href="#3-块级作用域" class="headerlink" title="(3) 块级作用域"></a>(3) 块级作用域</h3><p>ES6引入了<code>let</code>和<code>const</code>关键字，和<code>var</code>关键字不同，在大括号中使用<code>let</code>和<code>const</code>声明的变量存在于块级作用域中。在大括号之外不能访问这些变量。</p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><blockquote><p>如果函数内部声明的变量，声明的时候<strong>没有添加var关键字</strong>，函数内部声明的变量视为全局变量。</p></blockquote><p>(1) 外部定义了全局变量，函数内部直接改变这个全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//全局</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    a = <span class="number">100</span>; <span class="comment">//可以使用全局，改变全局</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//100  全局</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//100  全局</span></span><br></pre></td></tr></table></figure><p>(2) 外部没有定义了全局变量，而是忽略的var关键字，b变成全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    b = <span class="number">200</span>; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//200</span></span><br></pre></td></tr></table></figure><h2 id="十三-作用域链"><a href="#十三-作用域链" class="headerlink" title="十三. 作用域链"></a>十三. 作用域链</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h3><p>内部函数访问外部函数的变量，采用的是<strong>链式查找</strong>的方式来决定取哪个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();<span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>有了作用域以后，变量就有了使用范围，也就有了使用规则<br>变量使用规则分为两种：<strong>访问规则</strong> 和 <strong>赋值规则</strong></p><h3 id="2-访问规则"><a href="#2-访问规则" class="headerlink" title="(2) 访问规则"></a>(2) 访问规则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当我想获取一个变量的值的时候，我们管这个行为叫做访问</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//访问</span></span><br></pre></td></tr></table></figure><p><strong>首先，在自己的作用域内部查找</strong>：</p><ul><li>如果有，就直接拿来使用；</li><li>如果没有，就去上一级作用域查找，如果有，就拿来使用；</li><li>如果没有，就继续去上一级作用域查找，依次类推；</li><li>如果一直到全局作用域都没有这个变量，那么就会直接报错（该变量 is not defined）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 全局作用域 全局变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// 局部变量 f1作用域中的局部变量</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// var a = 1000; // 局部变量  f2作用域中的局部变量</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn1</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-赋值规则"><a href="#3-赋值规则" class="headerlink" title="(3) 赋值规则"></a>(3) 赋值规则</h3><p>当你想给一个变量赋值的时候，那么就先要找到这个变量，再给他赋值。</p><ul><li>先在自己作用域内部查找，有就直接赋值；</li><li>没有就去上一级作用域内部查找，有就直接赋值；</li><li>还没有再去上一级作用域查找，有就直接赋值；</li><li>如果<strong>一直找到全局作用域都没有</strong>，那么就<strong>把这个变量定义为全局变量</strong>，再给他赋值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = <span class="number">3</span>; <span class="comment">// b = 3   var a = b;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 3,3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 3 // 注：b的声明前面没有var关键字，变成全局的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 报错，a是局部变量</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-案例"><a href="#4-案例" class="headerlink" title="(4) 案例"></a>(4) 案例</h3><p><strong>案例1</strong></p><blockquote><p>先在自己作用域内部查找，有就直接赋值；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">200</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f1 前&quot;</span>, n); <span class="comment">// 找自己作用域中的变量n， 如果有，直接使用</span></span><br><span class="line">    n = <span class="number">500</span>; <span class="comment">// 赋值，先找自己作用域中的变量n，如果有，直接赋值，这里把自己作用域中的n修改掉</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f1 后&quot;</span>, n); <span class="comment">// 访问，找自己作用域中的变量n，如果有，直接使用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全局前&quot;</span>, n); <span class="comment">// 访问规则，找全局变量n n = 100</span></span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全局后&quot;</span>, n); <span class="comment">// 访问机制，找全局变量n n = 100</span></span><br></pre></td></tr></table></figure><p><strong>案例2</strong></p><blockquote><p>没有就去上一级作用域内部查找，有就直接赋值； 还没有再去上一级作用域查找，有就直接赋值；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f1 前&quot;</span>, n); <span class="comment">// 第二个打印，在自己作用域中找，向上一级找，找到window 中有一个n n === 100</span></span><br><span class="line">    n = <span class="number">500</span>; <span class="comment">// 赋值 ，在自己作用域中没找到，向上一级找，找到window 中有一个n n === 500</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f1 后&quot;</span>, n); <span class="comment">// 第三个打印，在自己作用域中找没找到，向上一级找，找到window中有一个n  n === 500</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全局前&quot;</span>, n); <span class="comment">// 第一个打印，自己作用域(window) 找到全局变量n n = 100</span></span><br><span class="line"><span class="title function_">f1</span>(); <span class="comment">// 第二步 函数调用，找到函数体里面的代码执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全局后&quot;</span>, n); <span class="comment">// 第四个打印，找自己作用域(window) 找到了 n === 500</span></span><br></pre></td></tr></table></figure><p><strong>案例3</strong></p><blockquote><p>如果<strong>一直找到全局作用域都没有</strong>，那么就<strong>把这个变量定义为全局变量</strong>，再给他赋值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    n = <span class="number">500</span>; <span class="comment">// 赋值  从自己作用域中找，没找到，向上找，找到window ，window没有，直接把这个n当做全局变量n进行赋值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f1后&quot;</span>, n); <span class="comment">// 从自己找，没找到向上找，找到window window有一个全局变量n n === 500</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全局&quot;</span>, n); <span class="comment">// 从自己找，没找到向上找，找到window，window有一个全局变量n n === 500</span></span><br></pre></td></tr></table></figure><h2 id="十四-作用域和作用域链相关面试题"><a href="#十四-作用域和作用域链相关面试题" class="headerlink" title="十四. 作用域和作用域链相关面试题"></a>十四. 作用域和作用域链相关面试题</h2><h3 id="面试题一"><a href="#面试题一" class="headerlink" title="面试题一"></a>面试题一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b;</span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 报错，b is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); </span><br></pre></td></tr></table></figure><p><strong>解题思路</strong>：</p><ol><li>打开浏览器</li><li>预解析<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有第一行代码需要预解析</span></span><br><span class="line"><span class="comment">// 提前声明一个变量a 不赋值</span></span><br></pre></td></tr></table></figure></li><li>代码执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a = b 赋值</span></span><br><span class="line"><span class="comment">// 把b变量对应的值赋给a</span></span><br><span class="line"><span class="comment">// 有没有b这个变量， 在作用域中找到b这个变量，报错 b is not defined </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="面试题二"><a href="#面试题二" class="headerlink" title="面试题二"></a>面试题二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b = <span class="number">10</span></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p><strong>解题思路</strong>：</p><ol><li>打开浏览器</li><li>进行预解析<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有第一行代码需要预解析</span></span><br><span class="line"><span class="comment">// 提前声明一个变量a 不赋值</span></span><br></pre></td></tr></table></figure></li><li>代码执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.执行第一行代码</span></span><br><span class="line">    <span class="comment">// var a = b = 10 实际上等同于 var a = (b = 10) </span></span><br><span class="line">    <span class="comment">// b = 10要先处理，按照赋值机制处理，这里把b定义为全局变量再进行赋值</span></span><br><span class="line">    <span class="comment">// 然后再将b中得到的10赋值给a</span></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">    <span class="comment">// a = 20 给a重新赋值为20</span></span><br><span class="line">    <span class="comment">// b = 20 给b重新赋值为20</span></span><br><span class="line"><span class="comment">// 3. </span></span><br><span class="line">    <span class="comment">// console.log(a) 打印a的值 // 20</span></span><br><span class="line">    <span class="comment">// console.log(b) 打印b的值 // 20</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="十五-递归函数"><a href="#十五-递归函数" class="headerlink" title="十五. 递归函数"></a>十五. 递归函数</h2><p>在编程世界里面，递归函数是在一个函数通过名字调用自身情况下构成的，即函数内部调用函数本身。它是一种比较高阶的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">fn</span>(); <span class="comment">//函数调用函数自身</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><p>递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。<br><strong>递归函数的书写技巧</strong>：</p><ol><li>先写一个函数</li><li>先找到折返点</li><li>未找到折返点，不要忘记return<br><strong>用递归需要注意以下两点</strong>：</li><li>递归就是在过程或函数里调用自身。</li><li>在使用递归策略时， 必须有一个明确的递归结束条件， 称为递归出口。</li></ol><h2 id="十六-递归的简单应用"><a href="#十六-递归的简单应用" class="headerlink" title="十六. 递归的简单应用"></a>十六. 递归的简单应用</h2><h3 id="1-使用一个函数，求阶乘"><a href="#1-使用一个函数，求阶乘" class="headerlink" title="(1) 使用一个函数，求阶乘"></a>(1) 使用一个函数，求阶乘</h3><p><strong>分析</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阶乘：5！：5*4*3*2*1 ==&gt; 5*4!</span></span><br><span class="line"><span class="comment">//      4！：4*3*2*1   ==&gt; 4*3!</span></span><br><span class="line"><span class="comment">//      3！：3*2*1     ==&gt; 3*2!</span></span><br><span class="line"><span class="comment">//      2！：3*2*1     ==&gt; 2*1!</span></span><br><span class="line"><span class="comment">//      1！：1         ==&gt; 1</span></span><br><span class="line"><span class="comment">//      得到结论：n! = n * (n-1)!</span></span><br><span class="line"><span class="comment">// 折返点：n为1</span></span><br></pre></td></tr></table></figure><p><strong>代码编写</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">n</span>) &#123; <span class="comment">//n=5   求n的阶乘，n的阶乘 = n * n-1!</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="title function_">fn1</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn1</span>(<span class="number">5</span>)); <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><blockquote><p>如果没有递归出口，程序报栈溢出(RangeError: Maximum call stack size exceeded)</p></blockquote><h3 id="2-求斐波那契数列第20位。"><a href="#2-求斐波那契数列第20位。" class="headerlink" title="(2) 求斐波那契数列第20位。"></a>(2) 求斐波那契数列第20位。</h3><p><strong>斐波那契数列</strong>：字面理解就是：后一个数等于前两个数的和。<br><strong>分析</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1,1,2,3,5,8,13,21......</span></span><br><span class="line"><span class="comment">// 第一项是1，第二项1，从第三项开始，后面的数字等于前面两个数字的和。</span></span><br><span class="line"><span class="comment">// fb(20) = fb(19) + fb(18)</span></span><br><span class="line"><span class="comment">// fb(19) = fb(18) + fb(17)</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// fb(3) = fb(2) + fb(1)</span></span><br><span class="line"><span class="comment">// 递归出口：fb(2) + fb(1)</span></span><br><span class="line"><span class="comment">// fb(2) = 1;</span></span><br><span class="line"><span class="comment">// fb(1) = 1;</span></span><br></pre></td></tr></table></figure><p><strong>代码执行</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params">n</span>) &#123; <span class="comment">//n=20</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fb</span>(n - <span class="number">1</span>) + <span class="title function_">fb</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fb</span>(<span class="number">20</span>)); <span class="comment">//6765</span></span><br></pre></td></tr></table></figure><h3 id="3-使用一个函数，求当n为偶数时：计算1-2-1-4-1-6-…-1-n；当n为奇数时：计算1-1-3-1-5-…-1-n"><a href="#3-使用一个函数，求当n为偶数时：计算1-2-1-4-1-6-…-1-n；当n为奇数时：计算1-1-3-1-5-…-1-n" class="headerlink" title="(3) 使用一个函数，求当n为偶数时：计算1&#x2F;2+1&#x2F;4+1&#x2F;6+…+1&#x2F;n；当n为奇数时：计算1+1&#x2F;3+1&#x2F;5+…+1&#x2F;n"></a>(3) 使用一个函数，求当n为偶数时：计算1&#x2F;2+1&#x2F;4+1&#x2F;6+…+1&#x2F;n；当n为奇数时：计算1+1&#x2F;3+1&#x2F;5+…+1&#x2F;n</h3><p><strong>分析</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n为偶数：</span></span><br><span class="line"><span class="comment">// n=8 ===&gt; 1/2+1/4+1/6+1/8 ===&gt; fn(6)+1/8</span></span><br><span class="line"><span class="comment">// n=6 ===&gt; 1/2+1/4+1/6     ===&gt; fn(4)+1/6</span></span><br><span class="line"><span class="comment">// n=4 ===&gt; 1/2+1/4         ===&gt; fn(2)+1/4</span></span><br><span class="line"><span class="comment">// n=2 ===&gt; 1/2</span></span><br><span class="line"><span class="comment">// n为奇数：</span></span><br><span class="line"><span class="comment">// n=7 ===&gt; 1+1/3+1/5+1/7 ===&gt; fn(5)+1/7</span></span><br><span class="line"><span class="comment">// n=5 ===&gt; 1+1/3+1/5     ===&gt; fn(3)+1/5</span></span><br><span class="line"><span class="comment">// n=3 ===&gt; 1+1/3         ===&gt; fn(1)+1/3</span></span><br><span class="line"><span class="comment">// n=1 ===&gt; 1</span></span><br><span class="line"><span class="comment">// 折返点：n为1和2</span></span><br></pre></td></tr></table></figure><p><strong>代码执行</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / n + <span class="title function_">fn3</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn3</span>(<span class="number">100</span>)); <span class="comment">// 2.2496026691647115</span></span><br></pre></td></tr></table></figure><p><strong>递归的缺点</strong></p><blockquote><p>虽然递归和循环有类似的思想而且通过上面的例子看上去很好用，但是这边<strong>建议少用递归</strong>，因为运行效率低，容易出现死循环(栈溢出)，只有像类似于求斐波那契数列这样的题目实在没办法在用递归。</p></blockquote><p>总之能用循环写，尽量用循环写。</p><h2 id="十七-函数在两个阶段-定义、调用-做了什么事情"><a href="#十七-函数在两个阶段-定义、调用-做了什么事情" class="headerlink" title="十七. 函数在两个阶段(定义、调用)做了什么事情"></a>十七. 函数在两个阶段(定义、调用)做了什么事情</h2><p>内存</p><ul><li>栈内存 ： 基本数据类型 、引用数据类型的地址</li><li>堆内存 ： 引用数据类型的值<br>复杂数据类型(引用数据类型&#x2F;地址数据类型)</li></ul><ol><li>函数定义阶段<ul><li>在堆内存中开辟一段空间</li><li>把函数体内的所有代码，一模一样的存储到这个空间中(此时不会解析变量)</li><li>把存储空间的地址赋值给函数名</li></ul></li><li>函数调用阶段<ul><li>按照函数名存储的地址找堆内存中对应的空间 -&gt; 判断内存中有没有这个变量 -&gt; 判断这个变量存储的内容是不是一个函数</li><li>在调用栈 内开辟一个函数执行空间</li><li>在执行空间 内进行形参赋值</li><li>在执行空间 内进行函数内的预解析</li><li>在执行空间 内把函数的代码执行一遍</li><li>执行完毕后， 执行空间立即销毁</li></ul></li><li>把函数体内的所有代码，一模一样的存储到这个空间中(<strong>此时不会解析变量</strong>)<blockquote><p>函数体内的代码不会提前预解析，而是等函数调用的时候预解析</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">200</span>;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 结果为：200</span></span><br></pre></td></tr></table></figure></li><li>形参赋值和预解析(函数内的预解析)的顺序：先形参赋值在进行预解析<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>); <span class="comment">// 结果为：ƒ a() &#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">函数也是一个对象，也具有普通对象的功能；函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码。所有的方法都是函数构建的，函数构建一些常用功能。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 高级</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/JavaScript/%E3%80%90JS%E3%80%91%E9%AB%98%E7%BA%A7/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/JavaScript/%E3%80%90JS%E3%80%91%E9%AB%98%E7%BA%A7/</id>
    <published>2023-11-28T14:32:25.000Z</published>
    <updated>2023-12-02T12:23:36.640Z</updated>
    
    
    <summary type="html">还未同步</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>对象的相关知识点</title>
    <link href="https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/JavaScript/%E3%80%90JS%E3%80%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://fanxing28.github.io/2023/11/28/%E5%89%8D%E7%AB%AF/JavaScript/%E3%80%90JS%E3%80%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-11-28T14:32:25.000Z</published>
    <updated>2023-12-02T12:28:42.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-对象概述及基础操作"><a href="#一-对象概述及基础操作" class="headerlink" title="一. 对象概述及基础操作"></a>一. 对象概述及基础操作</h2><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="(一) 概述"></a>(一) 概述</h3><p>在JavaScript中，<strong>对象是一组无序的相关属性（方法）的集合</strong>，所有的事物都是对象，例如：字符串、数组、函数等。<br><strong>简单理解</strong>：对象就是一个盒子，以键值对的方式来存储数据，并且这些数据是无序的。<br>使用<code>typeof</code>检查一个对象时，会返回object。<br>对象是由属性和<strong>方法</strong>组成的</p><ol><li>属性：事物的特征，在对象中用属性来表示</li><li>方法：事物的行为，在对象中用方法来表示</li></ol><h3 id="二-六大对象"><a href="#二-六大对象" class="headerlink" title="(二) 六大对象"></a>(二) 六大对象</h3><ol><li>函数对象 - Function</li><li>数组对象 - Array</li><li>对象(自定义对象) - Object</li><li>字符串对象 - String</li><li>数学对象 - Math</li><li>日期对象 - Date<br><strong>对象分为三类</strong>：内置对象、宿主对象、自定义对象 （1）内置对象： Arguments、Array、Boolean、Date、Error、Function、Number、String、Regexp、Math、Object （2）宿主对象：运行环境提供的对象。如Window和Documen、Element、form、image。 （3）自定义对象：开发人员定义的对象。</li></ol><h3 id="三-对象的操作"><a href="#三-对象的操作" class="headerlink" title="(三) 对象的操作"></a>(三) 对象的操作</h3><h4 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="(1) 创建对象"></a>(1) 创建对象</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><blockquote><p>利用new Object（构造函数）创建对象</p></blockquote><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);<span class="comment">// zs</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);<span class="comment">// 19</span></span><br></pre></td></tr></table></figure><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><blockquote><p>利用对象字面量创建对象 <strong>（推荐使用）</strong></p></blockquote><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = &#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>, </span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象内对于 键(属性名 key) 的要求</strong>：</p><ol><li>推荐使用符合变量命名规则和规范的名字</li><li>可以使用纯数字当做键名<blockquote><p>纯数字的键名在展示的时候会排在第一位</p></blockquote></li><li>可以使用任何特殊符号<blockquote><p>要使用特殊符号的时候，需要把键名用引号包裹起来</p></blockquote></li></ol><p><strong>调用对象的属性和方法</strong><br>调用对象属性：对象名.属性名（或对象名[‘属性名’]） 调用对象方法：对象名.方法名()</p><h4 id="2-对象的特点"><a href="#2-对象的特点" class="headerlink" title="(2) 对象的特点"></a>(2) 对象的特点</h4><ol><li>对象的属性名一定是字符串格式，引号可有可无<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>, <span class="comment">// 等同于&quot;name&quot;:&#x27;zs&#x27;</span></span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对象的属性名如果是变量，必须将变量名写在一个中括号里面，否则变量名当作字符串处理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="string">&#x27;username&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="comment">// n是普通的字符串</span></span><br><span class="line">    [n]: <span class="string">&#x27;ls&#x27;</span> <span class="comment">// n是变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">n</span>); <span class="comment">// zs</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">username</span>); <span class="comment">// ls</span></span><br></pre></td></tr></table></figure></li><li>读写(获取和设置)对象的属性值可以使用点符号和中括号，点符号后面只能跟字符串(省略引号)，中括号里面可以是变量，字符串，数字等。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="number">100</span>: <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj<span class="number">.100</span>); <span class="comment">//语法错误</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="number">100</span>]); <span class="comment">//ok  200</span></span><br></pre></td></tr></table></figure></li><li>对象的值是固定的，输出[object Object]<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">alert</span>(obj1); <span class="comment">//[object Object]</span></span><br><span class="line"><span class="title function_">alert</span>(obj2); <span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-对象的增删改查"><a href="#3-对象的增删改查" class="headerlink" title="(3) 对象的增删改查"></a>(3) 对象的增删改查</h4><h5 id="1-向对象中添加属性"><a href="#1-向对象中添加属性" class="headerlink" title="1. 向对象中添加属性"></a>1. 向对象中添加属性</h5><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.对象.属性名 = 属性值;</span></span><br><span class="line"><span class="comment">// 2.对象[&quot;属性名&quot;] = 属性值;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">19</span>;</span><br></pre></td></tr></table></figure><ul><li>对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。</li><li>属性值也可以任意的数据类型。</li></ul><h5 id="2-删除对象中的属性"><a href="#2-删除对象中的属性" class="headerlink" title="2. 删除对象中的属性"></a>2. 删除对象中的属性</h5><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> 对象.属性名</span><br><span class="line"><span class="keyword">delete</span> 对象[<span class="string">&quot;属性名&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">delete</span> obj[<span class="string">&#x27;name&#x27;</span>];</span><br></pre></td></tr></table></figure><h5 id="3-修改对象中的属性"><a href="#3-修改对象中的属性" class="headerlink" title="3. 修改对象中的属性"></a>3. 修改对象中的属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">obj[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// zs</span></span><br></pre></td></tr></table></figure><h5 id="4-查看对象中的属性"><a href="#4-查看对象中的属性" class="headerlink" title="4. 查看对象中的属性"></a>4. 查看对象中的属性</h5><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.对象.属性名</span></span><br><span class="line"><span class="comment">// 2.对象[&quot;属性名&quot;]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">obj[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><blockquote><p>如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined。</p></blockquote><h4 id="4-使用in检查对象中是否含有指定属性"><a href="#4-使用in检查对象中是否含有指定属性" class="headerlink" title="(4). 使用in检查对象中是否含有指定属性"></a>(4). 使用in检查对象中是否含有指定属性</h4><p>语法：”属性名” in 对象</p><ul><li>如果在对象中含有该属性，则返回true</li><li>如果没有则返回false</li></ul><h4 id="5-对象名-键名-和对象名-键名的区别"><a href="#5-对象名-键名-和对象名-键名的区别" class="headerlink" title="(5). 对象名[&quot;键名&quot;]和对象名.键名的区别"></a>(5). <code>对象名[&quot;键名&quot;]</code>和<code>对象名.键名</code>的区别</h4><ul><li>当键名是符合变量规则和规范的时候，两个语法没有区别</li><li>操作不符合变量规则和规范的键名的时候，只能用数组关联语法</li><li>涉及变量相关的时候，只能用数组关联语法<br><strong>注意</strong>：<code>对象名[&quot;键名&quot;]</code>方式中：[] 中没有写引号的时候，就表示一个变量，此刻 obj[a] 中会把变量a的值拿过来使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小红&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;a-b&quot;</span>: <span class="string">&quot;哈哈哈&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   console.log(obj.1)  // 报错</span></span><br><span class="line"><span class="comment">//   console.log(obj.a-b)   // 报错</span></span><br><span class="line"><span class="comment">//   console.log(obj[&quot;a-b&quot;]) // &#x27;哈哈哈&#x27;</span></span><br><span class="line"><span class="comment">//   console.log(obj[a]) // 报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="四-遍历对象"><a href="#四-遍历对象" class="headerlink" title="(四) 遍历对象"></a>(四) 遍历对象</h3><blockquote><p>对象是属性的无序集合，无法利用for循环的遍历</p></blockquote><p>for…in 语句用于对数组或者对象的属性进行循环操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 对象)&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k) <span class="comment">// 所有的属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k])<span class="comment">// 所有的属性名对应的值，必须使用中括号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-变量和属性、函数和方法的区别"><a href="#五-变量和属性、函数和方法的区别" class="headerlink" title="(五) 变量和属性、函数和方法的区别"></a>(五) 变量和属性、函数和方法的区别</h3><ol><li>变量和属性<strong>相同点</strong>：都是用来存储数据的。 </li><li>变量和属性<strong>不同点</strong>： <ul><li>变量：单独声明并赋值，使用的时候直接写属性名</li><li>属性：在对象里面的属性不需要声明，用来描述对象的特征，使用时对象.属性名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">age</span>); <span class="comment">// 28</span></span><br></pre></td></tr></table></figure></li></ul></li><li>函数和方法的<strong>相同点</strong>：都是实现某种功能 2.函数和方法的<strong>不同点</strong>： 函数时单独声明的并且调用方式：函数名() 方法在对象中不需要声明，用来描述该对象的行为和功能，调用的时候：对象.方法()</li></ol><h2 id="二-字符串对象概述及常用方法详解"><a href="#二-字符串对象概述及常用方法详解" class="headerlink" title="二. 字符串对象概述及常用方法详解"></a>二. 字符串对象概述及常用方法详解</h2><h3 id="一-字符串的创建"><a href="#一-字符串的创建" class="headerlink" title="(一) 字符串的创建"></a>(一) 字符串的创建</h3><h4 id="1-字面量方式创建"><a href="#1-字面量方式创建" class="headerlink" title="(1) 字面量方式创建"></a>(1) 字面量方式创建</h4><ul><li>单引号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="string">&#x27;内容&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>双引号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="string">&quot;内容&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>反引号 模板字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="string">`内容`</span>;</span><br></pre></td></tr></table></figure><strong>反引号的特点</strong>：</li></ul><ol><li>可以直接书写回车</li><li>可以直接放置变量</li></ol><h4 id="2-内置构造函数方式创建"><a href="#2-内置构造函数方式创建" class="headerlink" title="(2) 内置构造函数方式创建"></a>(2) 内置构造函数方式创建</h4><ul><li>语法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;内容&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="二-字符串的基本操作"><a href="#二-字符串的基本操作" class="headerlink" title="(二) 字符串的基本操作"></a>(二) 字符串的基本操作</h3><h4 id="1-length属性"><a href="#1-length属性" class="headerlink" title="(1) length属性"></a>(1) length属性</h4><p>表示字符串的长度，该字符串由多少字符组成。</p><blockquote><p>是一个 <strong>只读</strong> 属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Today is sun day&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h4 id="2-索引属性"><a href="#2-索引属性" class="headerlink" title="(2) 索引属性"></a>(2) 索引属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Today is sun day&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">2</span>]); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">100</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="3-遍历"><a href="#3-遍历" class="headerlink" title="(3) 遍历"></a>(3) 遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Today is sun day&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-字符串常见方法"><a href="#三-字符串常见方法" class="headerlink" title="(三) 字符串常见方法"></a>(三) 字符串常见方法</h3><h4 id="1-charAt"><a href="#1-charAt" class="headerlink" title="(1) charAt()"></a>(1) charAt()</h4><p><strong>charAt()</strong> 方法从一个字符串中返回指定的字符。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">charAt</span>(index)</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：<code>index</code>一个介于 0 和字符串长度减 1 之间的整数。(0~length-1) 如果没有提供索引，charAt() 将使用 0。<br><strong>描述</strong>：字符串中的字符从左向右索引，第一个字符的索引值为 0，最后一个字符（假设该字符位于字符串 stringName 中）的索引值为 <code>stringName.length - 1</code>。如果指定的 index 值超出了该范围，则返回一个空字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>()); <span class="comment">// h</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">4</span>)); <span class="comment">// o</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">10</span>)); <span class="comment">// 空字符串</span></span><br></pre></td></tr></table></figure><h4 id="2-charCodeAt"><a href="#2-charCodeAt" class="headerlink" title="(2) charCodeAt()"></a>(2) charCodeAt()</h4><p><strong><code>charCodeAt()</code></strong> 方法返回 <code>0</code> 到 <code>65535</code> 之间的整数，表示给定索引处的 UTF-16 代码单元<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">charCodeAt</span>(index)</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：<code>index</code>一个大于等于 <code>0</code>，小于字符串长度的整数。如果不是一个数值，则默认为 <code>0</code>。<br><strong>返回值</strong>：指定 <code>index</code> 处字符的 UTF-16 代码单元值的一个数字；如果 <code>index</code> 超出范围，<code>charCodeAt()</code> 返回<code>NaN</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>()); <span class="comment">// 104</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">4</span>)); <span class="comment">// 111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">10</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p><strong>常见的字母和数字对应的Unicode编码</strong>：</p><blockquote><p>0-9：48-57 A-Z：65-90 a-z：97-122</p></blockquote><h4 id="3-toUpperCase"><a href="#3-toUpperCase" class="headerlink" title="(3) toUpperCase()"></a>(3) toUpperCase()</h4><p><strong><code>toUpperCase()</code></strong> 方法将调用该方法的字符串转为大写形式并返回（如果调用该方法的值不是字符串类型会被强制转换）。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">toUpperCase</span>()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：一个新的字符串，表示转换为大写的调用字符串。<br><strong>描述</strong>：<code>toUpperCase()</code> 返回转为大写形式的字符串。此方法不会影响原字符串本身的值，因为 JavaScript 中字符串的值是不可改变的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>()); <span class="comment">// HELLO</span></span><br></pre></td></tr></table></figure><h4 id="4-toLowerCase"><a href="#4-toLowerCase" class="headerlink" title="(4) toLowerCase()"></a>(4) toLowerCase()</h4><p><strong><code>toLowerCase()</code></strong> 会将调用该方法的字符串值转为小写形式，并返回。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">toLowerCase</span>()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：一个新的字符串，表示转换为小写的调用字符串。<br><strong>描述</strong>：<code>toLowerCase</code> 会将调用该方法的字符串值转为小写形式，并返回。<code>toLowerCase</code> 不会影响字符串本身的值。</p><h4 id="5-substr"><a href="#5-substr" class="headerlink" title="(5) substr()"></a>(5) substr()</h4><blockquote><p>注：此方法官方没有严格被废弃，可以使用 <code>substring()</code> 替代它。</p></blockquote><p><strong><code>substr()</code></strong> 方法返回一个字符串中从指定位置开始到指定字符数的字符。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">substr</span>(start[, length])</span><br></pre></td></tr></table></figure><p><strong>返回值</strong> ：截取后的字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;2022-12-28&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">7</span>)); <span class="comment">// 2022-12</span></span><br></pre></td></tr></table></figure><h4 id="6-substring"><a href="#6-substring" class="headerlink" title="(6) substring()"></a>(6) substring()</h4><p><strong><code>substring()</code></strong> 方法返回一个字符串在开始索引到结束索引之间的一个子集，或从开始索引直到字符串的末尾的一个子集。<br><strong>特点</strong>：包括开始索引，不包括结束索引。<br><strong>参数</strong>：<br><code>indexStart</code></p><blockquote><p>需要截取的第一个字符的索引，该索引位置的字符作为返回的字符串的首字母。</p></blockquote><p><code>indexEnd</code></p><blockquote><p>可选。一个 0 到字符串长度之间的整数，以该数字为索引的字符不包含在截取的字符串内。</p></blockquote><p><strong>返回值</strong>：包含给定字符串的指定部分的新字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><h4 id="7-slice"><a href="#7-slice" class="headerlink" title="(7) slice()"></a>(7) slice()</h4><p><strong><code>slice()</code></strong> 方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">slice</span>(beginIndex[, endIndex])</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：<br><code>beginIndex</code><br>从该索引（以 0 为基数）处开始提取原字符串中的字符。如果值为负数，会被当做 <code>strLength + beginIndex</code> 看待，这里的<code>strLength</code> 是字符串的长度。<br><code>endIndex</code><br>可选。在该索引（以 0 为基数）处结束提取字符串。如果省略该参数，<code>slice()</code> 会一直提取到字符串末尾。如果该参数为负数，则被看作是 strLength + endIndex，这里的 strLength 就是字符串的长度。<br><strong>返回值</strong>：返回一个从原字符串中提取出来的<strong>新字符串</strong><br><strong>特点</strong>：包含开始索引，不包括结束索引，<strong>可以为负值</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;      </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">// ll</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>)); <span class="comment">// ell</span></span><br></pre></td></tr></table></figure><h4 id="8-split"><a href="#8-split" class="headerlink" title="(8) split()"></a>(8) split()</h4><p><strong><code>split()</code></strong> 方法使用指定的分隔符字符串将一个<code>String</code>对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">split</span>([separator[, limit]])</span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：返回原字符串以分隔符出现位置分隔而成的一个 <code>Array</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;2022-12-28&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>));[<span class="string">&#x27;2022&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;28&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// [&#x27;2&#x27;, &#x27;0&#x27;, &#x27;2&#x27;, &#x27;2&#x27;, &#x27;-&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;-&#x27;, &#x27;2&#x27;, &#x27;8&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// &quot;2022-12-28&quot;</span></span><br></pre></td></tr></table></figure><h4 id="9-concat"><a href="#9-concat" class="headerlink" title="(9) concat()"></a>(9) concat()</h4><p><strong><code>concat()</code></strong> 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">concat</span>(str2, [, ...strN])</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：str2 [, …strN]需要连接到 <code>str</code> 的字符串。<br><strong>返回值</strong>：一个新的字符串，包含参数所提供的连接字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&#x27;world&#x27;</span>)); <span class="comment">// helloworld</span></span><br></pre></td></tr></table></figure><h4 id="10-indexOf"><a href="#10-indexOf" class="headerlink" title="(10) indexOf()"></a>(10) indexOf()</h4><p><strong><code>indexOf()</code></strong> 方法，给定一个参数：要搜索的子字符串，搜索整个调用字符串，并返回指定子字符串第一次出现的索引。给定第二个参数：一个数字，该方法将返回指定子字符串在大于或等于指定数字的索引处的第一次出现。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">indexOf</span>(查找的字符)</span><br><span class="line"><span class="title function_">indexOf</span>(查找的字符, 开始的索引)</span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：查找的字符串 <code>searchValue</code> 的第一次出现的索引，如果没有找到，则返回 <code>-1</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;helloworld&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;ll&#x27;</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="11-includes"><a href="#11-includes" class="headerlink" title="(11) includes()"></a>(11) includes()</h4><p><strong><code>includes()</code></strong> 方法执行区分大小写的搜索，以确定是否可以在另一个字符串中找到一个字符串，并根据情况返回 <code>true</code> 或 <code>false</code>。<br><strong>语法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">includes</span>(searchString)</span><br><span class="line"><span class="title function_">includes</span>(searchString, position)</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：<br><code>searchString</code></p><blockquote><p>要在 <code>str</code> 中搜索的字符串。不能是正则表达式。</p></blockquote><p><code>position</code> 可选</p><blockquote><p>在字符串中开始搜索 <code>searchString</code> 的位置。（默认为 <code>0</code>。）</p></blockquote><p><strong>返回值</strong>：如果当前字符串包含被搜寻的字符串，就返回 **<code>true</code>**，否则返回 **<code>false</code>**。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;helloworld&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;ll&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;o&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="12-trim"><a href="#12-trim" class="headerlink" title="(12) trim()"></a>(12) trim()</h4><p><strong><code>trim()</code></strong> 方法从字符串的两端清除空格，返回一个新的字符串，而不修改原始字符串。<br><strong>语法</strong>：str.trim()<br><strong>返回值</strong>：</p><blockquote><p>一个表示 <code>str</code> 去掉了开头和结尾的空白字符后的新字符串。</p></blockquote><p>如果 <code>str</code> 的开头和结尾都没有空白字符，仍然会返回一个新字符串（本质上是 <code>str</code> 的副本），而不会抛出异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">`  </span></span><br><span class="line"><span class="string">                hao  de</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">//   </span></span><br><span class="line"><span class="comment">//      hao  de</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>()); <span class="comment">// hao  de</span></span><br></pre></td></tr></table></figure><h4 id="13-replace"><a href="#13-replace" class="headerlink" title="(13) replace()"></a>(13) replace()</h4><p><strong>语法</strong>：字符串.replace(换下字符, 换上字符)<br><strong>作用</strong> ：替换字符串内容</p><blockquote><p>注：一次只能换一个</p></blockquote><p><strong>返回值</strong>：一个部分或全部匹配由替代模式所取代的新的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;美好的生活，从写代码开始&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;写代码&#x27;</span>, <span class="string">&#x27;一日三餐&#x27;</span>)); <span class="comment">// 美好的生活，从一日三餐开始</span></span><br></pre></td></tr></table></figure><h3 id="四-案例"><a href="#四-案例" class="headerlink" title="(四) 案例"></a>(四) 案例</h3><h4 id="案例一：反转字符串"><a href="#案例一：反转字符串" class="headerlink" title="案例一：反转字符串"></a>案例一：反转字符串</h4><p><strong>方法1</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> origin = <span class="string">&quot;abcde&quot;</span>;  </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; origin.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    str = origin[i] + str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// edcba</span></span><br></pre></td></tr></table></figure><p><strong>方法2</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> origin = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> r1 = origin.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> r2 = r1.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="keyword">var</span> r3 = r2.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> res = origin.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// edcba</span></span><br></pre></td></tr></table></figure><h4 id="案例二：连字符转驼峰"><a href="#案例二：连字符转驼峰" class="headerlink" title="案例二：连字符转驼峰"></a>案例二：连字符转驼峰</h4><blockquote><p>get-element-by-class-name &#x3D;&#x3D;&gt; getElementByClassName</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;get-element-by-class-name&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr[i] = arr[i].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">1</span>).<span class="title function_">toUpperCase</span>() + arr[i].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">str = arr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// getElementByClassName</span></span><br></pre></td></tr></table></figure><h4 id="案例三：敏感词变为"><a href="#案例三：敏感词变为" class="headerlink" title="案例三：敏感词变为*"></a>案例三：敏感词变为*</h4><ol><li><strong>改变一种敏感词</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;as小明bdd小明adf小明asdfa小明asdfasdf &quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">str = str.<span class="title function_">split</span>(s).<span class="title function_">join</span>(<span class="string">&quot;**&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// as**bdd**adf**asdfa**asdfasdf</span></span><br></pre></td></tr></table></figure></li><li><strong>批量替换敏感词</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;as小明bdd小明adf小明asdfa小明asdfasdf &quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s = [<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;a&quot;</span>];</span><br><span class="line">s.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    str = str.<span class="title function_">split</span>(item).<span class="title function_">join</span>(<span class="string">&quot;**&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// **s**bdd****df****sdf******sdf**sdf </span></span><br></pre></td></tr></table></figure></li></ol><h4 id="案例四：统计字符串中每一个字符出现的次数"><a href="#案例四：统计字符串中每一个字符出现的次数" class="headerlink" title="案例四：统计字符串中每一个字符出现的次数"></a>案例四：统计字符串中每一个字符出现的次数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaaaabbbbcccdddabacdbdeeedfad&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = str[i]; <span class="comment">// 每一个字符</span></span><br><span class="line">    obj[item] ? obj[item]++ : (obj[item] = <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;a: 8, b: 6, c: 4, d: 7, e: 3, f: 1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="三-查询字符串（URL参数）的处理"><a href="#三-查询字符串（URL参数）的处理" class="headerlink" title="三. 查询字符串（URL参数）的处理"></a>三. 查询字符串（URL参数）的处理</h2><p><strong>查询字符串（URL参数）</strong> 是指在URL的末尾加上用于向服务器发送信息的字符串（变量）。将“？”放在URL的末尾，然后再加上“参数＝值”，想加上多个参数的话，使用“&amp;”。以这个形式，可以将想要发送给服务器的数据添加到URL中。<br><strong>格式</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key=value&amp;key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure><h3 id="一-查询字符串转为对象"><a href="#一-查询字符串转为对象" class="headerlink" title="(一) 查询字符串转为对象"></a>(一) 查询字符串转为对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要转换的查询字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;name=zs&amp;age=18&quot;</span>;</span><br><span class="line"><span class="comment">// 封装一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseQueryString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="comment">// 准备一个接收的空对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 将每一个数值分隔开</span></span><br><span class="line">    <span class="keyword">var</span> s1 = str.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    <span class="comment">// console.log(s1); // [&#x27;name=zs&#x27;, &#x27;age=18&#x27;]</span></span><br><span class="line">    <span class="comment">// 将数组中的值依次放入对象中</span></span><br><span class="line">    s1.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="comment">// 将每个数组里面的字符串按照等号分割开,得到若干个数组</span></span><br><span class="line">        <span class="keyword">var</span> t = item.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> key = t[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> value = t[<span class="number">1</span>];</span><br><span class="line">        obj[key] = value;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">parseQueryString</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: &#x27;18&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="二-将对象转换为查询字符串"><a href="#二-将对象转换为查询字符串" class="headerlink" title="(二) 将对象转换为查询字符串"></a>(二) 将对象转换为查询字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要转换的对象：&#123;name:&#x27;ls&#x27;,age:20&#125;</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 封装一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryStringify</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个空字符串</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// 对对象进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">// 利用模板字符串进行拼接</span></span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;obj[key]&#125;</span>&amp;`</span>;</span><br><span class="line">        <span class="comment">// console.log(str); // name=ls&amp;age=20&amp;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将最后多一个&amp;，截取掉</span></span><br><span class="line">    str = str.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="title function_">queryStringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// name=ls&amp;age=20</span></span><br></pre></td></tr></table></figure><h2 id="四-JSON-格式字符串相关处理"><a href="#四-JSON-格式字符串相关处理" class="headerlink" title="四. JSON 格式字符串相关处理"></a>四. JSON 格式字符串相关处理</h2><h3 id="一-JSON对象"><a href="#一-JSON对象" class="headerlink" title="(一) JSON对象"></a>(一) JSON对象</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h4><p>JSON使用JavaScript语法来描述数据对象，但是 JSON 仍然独立于语言和平台， JSON 解析器和 JSON 库支持许多不同的编程语言。</p><ol><li>JSON描述数据对象 - 前后端交互最好的数据格式。</li><li>JSON独立于语言和平台 - JSON是一种文件的格式，扩展名。</li><li>JSON不是JavaScript独有的。<br><strong>json字符串格式</strong>：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zs&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">&#125;</span>&#x27;</span><br><span class="line">&#x27;<span class="punctuation">[</span> <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zs&quot;</span><span class="punctuation">&#125;</span> <span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">&#125;</span> <span class="punctuation">]</span>&#x27;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-JSON的特点"><a href="#2-JSON的特点" class="headerlink" title="(2) JSON的特点"></a>(2) JSON的特点</h4><ol><li>json里面字符串需要添加双引号，<strong>数字</strong> 和 <strong>布尔</strong> 可以不包裹</li><li>json不能包含JavaScript相关的语法。</li><li>json使用类似JavaScript语法来描述数据,由简单值+’对象’+’数组’组成。</li><li>是一种轻量级的数据交换格式，不是js独有的。</li><li>不接受函数</li></ol><h4 id="3-在线json检查的网站"><a href="#3-在线json检查的网站" class="headerlink" title="(3) 在线json检查的网站"></a>(3) 在线json检查的网站</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bejson.com/</span><br></pre></td></tr></table></figure><h3 id="二-json字符串格式转为js对象格式"><a href="#二-json字符串格式转为js对象格式" class="headerlink" title="(二) json字符串格式转为js对象格式"></a>(二) json字符串格式转为js对象格式</h3><p><strong>方法</strong>：JSON.parse(json格式字符串)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;zs&quot;, &quot;age&quot;: &quot;18&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(s);      </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// &#123;username: &#x27;zs&#x27;, age: &#x27;18&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="三-js对象格式转为-json字符串格式"><a href="#三-js对象格式转为-json字符串格式" class="headerlink" title="(三) js对象格式转为 json字符串格式"></a>(三) js对象格式转为 json字符串格式</h3><p><strong>方法</strong>：JSON.stringify(js格式字符串);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// &#123;&quot;name&quot;:&quot;ls&quot;,&quot;age&quot;:18&#125;</span></span><br></pre></td></tr></table></figure><h2 id="五-Math-对象常见方法详解"><a href="#五-Math-对象常见方法详解" class="headerlink" title="五. Math 对象常见方法详解"></a>五. Math 对象常见方法详解</h2><p>Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法，我们可以直接使用它来进行数学运算相关的操作。</p><h4 id="Math常见的方法"><a href="#Math常见的方法" class="headerlink" title="Math常见的方法"></a>Math常见的方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Math.random()</td><td>生成一个 <code>[0-1)</code> 之间的随机数；生成一个x-y之间的随机数</td></tr><tr><td>Math.round()</td><td>给定数字的值四舍五入到最接近的整数</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.abs()</td><td>绝对值运算</td></tr><tr><td>Math.max()</td><td>求多个数中最大值</td></tr><tr><td>Math.min()</td><td>求多个数中的最小值</td></tr><tr><td>Math.pow(x,y)</td><td>求x的y次幂</td></tr><tr><td>Math.sqrt()</td><td>对一个数进行开方</td></tr><tr><td>Math.PI</td><td>常量，圆周率</td></tr></tbody></table><blockquote><p>下面分别讲述以上的一些重要方法的使用</p></blockquote><h4 id="1-Math-random"><a href="#1-Math-random" class="headerlink" title="(1) Math.random()"></a>(1) Math.random()</h4><p><strong><code>Math.random()</code></strong> 函数返回一个浮点数，伪随机数在范围从<strong>0 到</strong>小于<strong>1</strong>，也就是说，从 0（包括 0）往上，但是不包括 1（排除 1），然后您可以缩放到所需的范围。实现将初始种子选择到随机数生成算法;它不能被用户选择或重置。<br><strong>语法</strong>：Math.random()<br><strong>返回值</strong>：一个浮点型伪随机数字，在<code>0</code>（包括 0）和<code>1</code>（不包括）之间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成  0 ~ 9 的随机整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>)); <span class="comment">// 0 ~ 9.9999999</span></span><br><span class="line"><span class="comment">// 生成 1 ~ 10 的随机整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="2-Math-round"><a href="#2-Math-round" class="headerlink" title="(2) Math.round()"></a>(2) Math.round()</h4><p><strong><code>Math.round()</code></strong> 函数返回一个数字四舍五入后最接近的整数。<br><strong>语法</strong>：Math.round(x)<br><strong>参数</strong>：x (一个数字)<br><strong>返回值</strong>：给定数字的值四舍五入到最接近的整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">20.49</span>);   <span class="comment">//20</span></span><br><span class="line">x = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">20.5</span>);    <span class="comment">//21</span></span><br><span class="line">x = <span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">20.5</span>);   <span class="comment">//-20</span></span><br><span class="line">x = <span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">20.51</span>);  <span class="comment">//-21</span></span><br></pre></td></tr></table></figure><h4 id="3-Math-ceil"><a href="#3-Math-ceil" class="headerlink" title="(3) Math.ceil()"></a>(3) Math.ceil()</h4><p><strong><code>Math.ceil()</code></strong> 函数总是四舍五入并返回大于等于给定数字的最小整数。<br><strong>语法</strong>：Math.ceil(x)<br><strong>参数</strong>：x (一个数字)<br><strong>作用</strong>：对一个浮点数进行向下取整<br><strong>返回值</strong>：大于等于 <code>x</code> 的最小整数。它的值与 <code>-Math.floor(-x)</code>相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="title class_">Infinity</span>); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">7.004</span>); <span class="comment">// -7</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">4</span>); <span class="comment">// -4</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">0.95</span>); <span class="comment">// -0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">0</span>); <span class="comment">// -0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">0.95</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">4</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">7.004</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Infinity</span>); <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure><h4 id="4-Math-floor"><a href="#4-Math-floor" class="headerlink" title="(4) Math.floor()"></a>(4) Math.floor()</h4><p><strong><code>Math.floor()</code></strong> 函数总是返回小于等于一个给定数字的最大整数。<br><strong>语法</strong>：Math.floor(x)<br><strong>参数</strong>：x (一个数字)<br><strong>作用</strong>：对一个浮点数进行向下取整<br><strong>返回值</strong>：小于等于 <code>x</code> 的最大整数。它的值与 <code>-Math.ceil(-x)</code>相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="title class_">Infinity</span>); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">45.95</span>); <span class="comment">// -46</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">45.05</span>); <span class="comment">// -46</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">0</span>); <span class="comment">// -0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4</span>); <span class="comment">//   4</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">45.05</span>); <span class="comment">//  45</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">45.95</span>); <span class="comment">//  45</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Infinity</span>); <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure><h4 id="5-Math-abs"><a href="#5-Math-abs" class="headerlink" title="(5) Math.abs()"></a>(5) Math.abs()</h4><p><strong><code>Math.abs(x)</code></strong> 函数返回一个数字的绝对值。<br><strong>语法</strong>：Math.abs(x)<br><strong>参数</strong>：x (一个数字)<br><strong>作用</strong>：取一个数的绝对值<br><strong>返回值</strong>：<code>x</code> 的绝对值。如果 <code>x</code> 是负数（包括 <code>-0</code>），则返回 <code>-x</code>。否则，返回 <code>x</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">10.5</span>)); <span class="comment">// 10.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = -<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// -10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(a)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><strong>强制转换参数</strong><br><code>Math.abs()</code> 将其参数强制转换为数字。无法强制转换的值将变成 <code>NaN</code>，使 <code>Math.abs()</code> 也返回 <code>NaN</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&quot;-1&quot;</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="literal">null</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>([]); <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>([<span class="number">2</span>]); <span class="comment">// 2</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(&#123;&#125;); <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&quot;string&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h4 id="6-Math-min"><a href="#6-Math-min" class="headerlink" title="(6) Math.min()"></a>(6) Math.min()</h4><p><strong><code>Math.min()</code></strong> 函数返回作为输入参数的数字中最小的一个，如果没有参数，则返回<code>Infinity</code>。<br><strong>语法</strong>：Math.min(数字1，数字2，数字3…)<br><strong>作用</strong>：寻找一组数中的最小值<br><strong>返回值</strong>：给定数值中最小的数。如果任一参数不能转换为数值，则返回 <code>NaN</code>。如果没有提供参数，返回 <code>Infinity</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">70</span> ,<span class="number">34</span>)); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">34</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>()); <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure><h4 id="7-Math-max"><a href="#7-Math-max" class="headerlink" title="(7) Math.max()"></a>(7) Math.max()</h4><p><code>Math.max()</code> 函数返回作为输入参数的最大数字，如果没有参数，则返回 <code>-Infinity</code>。<br><strong>语法</strong>：Math.max(数字1，数字2，数字3…)<br><strong>作用</strong>：寻找一组数中的最大值<br><strong>返回值</strong>：给定数值中最大的数。如果任一参数不能转换为数值，则返回 <code>NaN</code>。如果没有提供参数，返回 <code>-Infinity</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">48</span>, <span class="number">29</span>, <span class="number">40</span>, <span class="number">28</span>, -<span class="number">29</span>)); <span class="comment">// 48</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">34</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)); <span class="comment">// 34</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>()); <span class="comment">// -Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> max = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(a, b), -<span class="title class_">Infinity</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="8-Math-PI"><a href="#8-Math-PI" class="headerlink" title="(8) Math.PI"></a>(8) Math.PI</h4><p><strong><code>Math.PI</code></strong> 表示一个圆的周长与直径的比例，约为 3.14159<br><strong>语法</strong>：Math.PI<br><strong>作用</strong>：就是一个常量（π），经常当做常量用来参与运算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>); <span class="comment">// 3.141592653589793</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">100</span>); <span class="comment">// 314.1592653589793</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong>：使用 Math.PI 计算给定半径的圆周长</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcul</span> (radius) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">calcul</span>(<span class="number">1</span>);  <span class="comment">// 6.283185307179586</span></span><br></pre></td></tr></table></figure><p>了解更多Math对象方法可以观看官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random">Math.random() - JavaScript | MDN (mozilla.org)</a></p><h3 id="重要案例"><a href="#重要案例" class="headerlink" title="重要案例"></a>重要案例</h3><ol><li>得到两个数之间的随机整数并且包含着两个整数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min,max</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(max - min)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRandom</span>(<span class="number">2</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure></li><li>封装一个函数， 随机生成一个rgb颜色<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randNum</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;randNum(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>, <span class="subst">$&#123;randNum(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>, <span class="subst">$&#123;randNum(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">randColor</span>()); <span class="comment">// rgb(100, 200, 244)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="六-对象的静态方法"><a href="#六-对象的静态方法" class="headerlink" title="六. 对象的静态方法"></a>六. 对象的静态方法</h2><p><strong>实例用例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><blockquote><p>将对象的key值放到一个数组中返回</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj));<span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><blockquote><p>将对象的value值放到一个数组中返回</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj));<span class="comment">// [1,2,]</span></span><br></pre></td></tr></table></figure><h2 id="七-进制之间的转换方式"><a href="#七-进制之间的转换方式" class="headerlink" title="七. 进制之间的转换方式"></a>七. 进制之间的转换方式</h2><h3 id="一-十进制转为其他进制"><a href="#一-十进制转为其他进制" class="headerlink" title="(一) 十进制转为其他进制"></a>(一) 十进制转为其他进制</h3><p><strong>语法</strong>：十进制数字.toString(要转换的进制);<br><strong>返回值</strong>：一个字符串格式的数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">255</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">// 11111111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">16</span>                 )); <span class="comment">// ff</span></span><br></pre></td></tr></table></figure><h3 id="二-其他进制转为十进制"><a href="#二-其他进制转为十进制" class="headerlink" title="(二) 其他进制转为十进制"></a>(二) 其他进制转为十进制</h3><p><strong>语法</strong>：parseInt(要转换的数字, 该数字原来是几进制)<br><strong>返回值</strong>：转换好的十进制数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;ff&quot;</span>, <span class="number">16</span>)); <span class="comment">// 255</span></span><br></pre></td></tr></table></figure><h3 id="三-案例：封装一个函数，生成随机十六进制颜色"><a href="#三-案例：封装一个函数，生成随机十六进制颜色" class="headerlink" title="(三) 案例：封装一个函数，生成随机十六进制颜色"></a>(三) 案例：封装一个函数，生成随机十六进制颜色</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randNum</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 生成一个 0 ~ 15 的随机数</span></span><br><span class="line">    <span class="comment">// 2. 把这个数字转为十六进制</span></span><br><span class="line">    <span class="comment">// 3. 重复6次</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="title function_">randNum</span>(<span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">        num = num.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//   console.log(num);</span></span><br><span class="line">        str += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">randColor</span>()); <span class="comment">// #aacbb2</span></span><br></pre></td></tr></table></figure><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个0 ~ 255 之间的数字 重复3次</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 什么时候需要前面 补 0</span></span><br><span class="line">        <span class="comment">// 在十进制的时候判断这个数字转成十六进制是不是一位，是就前面补0</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="title function_">randNum</span>(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">            <span class="comment">// 前面补0</span></span><br><span class="line">            num = <span class="string">&quot;0&quot;</span> + num.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num = num.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        str += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">randColor</span>());</span><br></pre></td></tr></table></figure><h2 id="八-定时器"><a href="#八-定时器" class="headerlink" title="八. 定时器"></a>八. 定时器</h2><h3 id="一-定时器分类"><a href="#一-定时器分类" class="headerlink" title="(一) 定时器分类"></a>(一) 定时器分类</h3><ol><li><strong>延迟定时器</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, 毫秒数)</span><br></pre></td></tr></table></figure><strong>作用</strong>：隔一段时间之后执行</li><li><strong>间隔定时器</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, 毫秒数)</span><br></pre></td></tr></table></figure><strong>作用</strong>：每隔一段时间执行一次</li><li><strong>关闭定时器</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(定时器)</span><br><span class="line"><span class="built_in">clearInterval</span>(定时器)</span><br></pre></td></tr></table></figure><strong>注</strong>：虽然关闭定时器的方式有两种，且没什么太大的区别，但是还是建议对应着使用。(如：setInterval &#x3D;&#x3D;&gt; clearInterval(定时器))</li></ol><h3 id="二-定时器的使用"><a href="#二-定时器的使用" class="headerlink" title="(二) 定时器的使用"></a>(二) 定时器的使用</h3><ol><li><strong>延迟定时器</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行了。。。&quot;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>); <span class="comment">// 2s 之后，控制台输出：执行了。。。</span></span><br></pre></td></tr></table></figure></li><li><strong>间隔定时器</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行了...&quot;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li><li><strong>关闭定时器</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t1 = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行了延迟定时器&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">clearInterval</span>(t1); <span class="comment">// 关闭定时器</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="三-案例：实现抽奖效果"><a href="#三-案例：实现抽奖效果" class="headerlink" title="(三) 案例：实现抽奖效果"></a>(三) 案例：实现抽奖效果</h3><h4 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h4><p><strong>HTML代码</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>开始抽奖<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CSS代码</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JavaScript代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 奖品</span></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    <span class="string">&quot;皮筋一个&quot;</span>,</span><br><span class="line">    <span class="string">&quot;辣条一包&quot;</span>,</span><br><span class="line">    <span class="string">&quot;谢谢惠顾&quot;</span>,</span><br><span class="line">    <span class="string">&quot;包子一个&quot;</span>,</span><br><span class="line">    <span class="string">&quot;卡片一张&quot;</span>,</span><br><span class="line">    <span class="string">&quot;发夹一个&quot;</span>,</span><br><span class="line">    <span class="string">&quot;手机模型&quot;</span>,</span><br><span class="line">    <span class="string">&quot;空头支票&quot;</span>,</span><br><span class="line">    <span class="string">&quot;皮球一个&quot;</span>,</span><br><span class="line">    <span class="string">&quot;果冻一个&quot;</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 随机生成 0~arr.length-1 随机数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randNum</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 标记思维</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 点击开始</span></span><br><span class="line">box.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="comment">// 每个一段时间进行内容切换</span></span><br><span class="line">        t = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 调用生成随机数函数</span></span><br><span class="line">            <span class="keyword">var</span> num = <span class="title function_">randNum</span>(<span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 将生成的随机数当做数组的索引，显示数组的值</span></span><br><span class="line">            <span class="keyword">var</span> res = arr[num];</span><br><span class="line">            <span class="comment">// 将对应的值显示到页面中</span></span><br><span class="line">            box.<span class="property">innerHTML</span> = res;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(t);</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：</p><p><img src="/../_resources/%E6%8A%BD%E5%A5%961.gif" class="lazyload placeholder" data-srcset="/../_resources/%E6%8A%BD%E5%A5%961.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/抽奖1.gif"></p><h4 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h4><p><strong>HTML代码</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>开始抽奖<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CSS代码</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JavaScript代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机生成 0~arr.length-1 随机数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randNum</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 奖品</span></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    <span class="string">&quot;皮筋一个&quot;</span>,</span><br><span class="line">    <span class="string">&quot;辣条一包&quot;</span>,</span><br><span class="line">    <span class="string">&quot;谢谢惠顾&quot;</span>,</span><br><span class="line">    <span class="string">&quot;包子一个&quot;</span>,</span><br><span class="line">    <span class="string">&quot;卡片一张&quot;</span>,</span><br><span class="line">    <span class="string">&quot;发夹一个&quot;</span>,</span><br><span class="line">    <span class="string">&quot;手机模型&quot;</span>,</span><br><span class="line">    <span class="string">&quot;空头支票&quot;</span>,</span><br><span class="line">    <span class="string">&quot;皮球一个&quot;</span>,</span><br><span class="line">    <span class="string">&quot;果冻一个&quot;</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 随机生成 0~arr.length-1 随机数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randNum</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min;</span><br><span class="line">&#125;</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 点击开始</span></span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 防止点击开始重复触发</span></span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每个一段时间进行内容切换</span></span><br><span class="line">    t = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 调用生成随机数函数</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="title function_">randNum</span>(<span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 将生成的随机数当做数组的索引，显示数组的值</span></span><br><span class="line">        <span class="keyword">var</span> res = arr[num];</span><br><span class="line">        <span class="comment">// 将对应的值显示到页面中</span></span><br><span class="line">        box.<span class="property">innerHTML</span> = res;</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">btn2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(t);</span><br><span class="line">    t = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：</p><p><img src="/../_resources/%E6%8A%BD%E5%A5%962.gif" class="lazyload placeholder" data-srcset="/../_resources/%E6%8A%BD%E5%A5%962.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/抽奖2.gif"></p><h2 id="九-Date-日期对象概述及相关方法"><a href="#九-Date-日期对象概述及相关方法" class="headerlink" title="九. Date 日期对象概述及相关方法"></a>九. Date 日期对象概述及相关方法</h2><h3 id="一-日期对象的创建"><a href="#一-日期对象的创建" class="headerlink" title="(一) 日期对象的创建"></a>(一) 日期对象的创建</h3><p>Date 日期对象是一个构造函数，必须使用new来调用创建对象。<br>其创建方式类似于数组和对象的创建方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();<span class="comment">// 创建一个数组对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 创建了一个实例对象</span></span><br></pre></td></tr></table></figure><p>使用Date 如果没有参数，返回当前系统的当前时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br></pre></td></tr></table></figure><h3 id="二-日期对象的相关方法"><a href="#二-日期对象的相关方法" class="headerlink" title="(二) 日期对象的相关方法"></a>(二) 日期对象的相关方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年</td><td>date.getFullYear()</td></tr><tr><td>getMonth()</td><td>获取当月（0-11）</td><td>date.getMonth()</td></tr><tr><td>getDate()</td><td>获取当天日期</td><td>date.getDate()</td></tr><tr><td>getDay()</td><td>获取星期几（周日(0)到周六(6)）</td><td>date.getDay()</td></tr><tr><td>getHours()</td><td>获取当前小时</td><td>date.getHours()</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td><td>date.getMinutes()</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td><td>date.getSeconds()</td></tr><tr><td>setFullYear()</td><td>设置年份</td><td>date.setFullYear()</td></tr><tr><td>setMonth()</td><td>设置月份</td><td>date.setMonth()</td></tr><tr><td>setDate()</td><td>设置日期</td><td>date.setDate()</td></tr><tr><td>setHours()</td><td>设置小时</td><td>date.setHours()</td></tr><tr><td>setMinutes()</td><td>设置分钟</td><td>date.setMinutes()</td></tr><tr><td>setSeconds()</td><td>设置秒钟</td><td>date.setSeconds()</td></tr></tbody></table><h3 id="三-时间戳"><a href="#三-时间戳" class="headerlink" title="(三) 时间戳"></a>(三) 时间戳</h3><p>从 格林威治时间 到现在的毫秒数</p><blockquote><p>获取1970年01月01日00时00分00秒至现在的总毫秒数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>()); <span class="comment">// 1672320018445</span></span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">date.<span class="title function_">setTime</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Thu Jan 01 1970 08:00:01 GMT+0800 (香港标准时间)</span></span><br></pre></td></tr></table></figure><p><strong>Date.now（）</strong> 方法返回自1970年1月1日00.00.00UTC到当前时间的毫秒数</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="案例1：在页面上展示一个时钟，隔1s更新一次"><a href="#案例1：在页面上展示一个时钟，隔1s更新一次" class="headerlink" title="案例1：在页面上展示一个时钟，隔1s更新一次"></a>案例1：在页面上展示一个时钟，隔1s更新一次</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个函数，当数字是一位数的时候，前面补0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt;= <span class="number">10</span> ? num : <span class="string">&quot;0&quot;</span> + num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 定义一个空字符串</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取终端的日期</span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 获取年份</span></span><br><span class="line">    <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="comment">// 获取月份，从0开始所以需要+1</span></span><br><span class="line">    <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 获取日期</span></span><br><span class="line">    <span class="keyword">var</span> day = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="comment">// 获取星期</span></span><br><span class="line">    <span class="keyword">var</span> week = date.<span class="title function_">getDay</span>();</span><br><span class="line">    <span class="keyword">var</span> weekStr = <span class="string">&quot;日一二三四五六&quot;</span>;</span><br><span class="line">    week = <span class="string">&quot;星期&quot;</span> + weekStr[week];</span><br><span class="line">    <span class="comment">// 获取小时</span></span><br><span class="line">    <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="comment">// 获取分钟</span></span><br><span class="line">    <span class="keyword">var</span> m = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="comment">// 获取秒数</span></span><br><span class="line">    <span class="keyword">var</span> s = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">    <span class="comment">// 进行拼接</span></span><br><span class="line">    str = <span class="string">`<span class="subst">$&#123;year&#125;</span>年<span class="subst">$&#123;month&#125;</span>月<span class="subst">$&#123;day&#125;</span>日 <span class="subst">$&#123;week&#125;</span>  <span class="subst">$&#123;format(h)&#125;</span>:<span class="subst">$&#123;format(</span></span></span><br><span class="line"><span class="subst"><span class="string">        m</span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span>:<span class="subst">$&#123;format(s)&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示在页面上</span></span><br><span class="line">box.<span class="property">innerHTML</span> = <span class="title function_">dateStr</span>();</span><br><span class="line"><span class="comment">// 利用间隔定时器，进行每隔一秒数字变化</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    box.<span class="property">innerHTML</span> = <span class="title function_">dateStr</span>();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：</p><p><img src="/../_resources/%E6%97%B6%E9%92%9F%E5%8F%98%E5%8C%96.gif" class="lazyload placeholder" data-srcset="/../_resources/%E6%97%B6%E9%92%9F%E5%8F%98%E5%8C%96.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/时钟变化.gif"></p><h5 id="案例2：距离除夕倒计时"><a href="#案例2：距离除夕倒计时" class="headerlink" title="案例2：距离除夕倒计时"></a>案例2：距离除夕倒计时</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;距离除夕倒计时：&lt;/h4&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 封装函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 目标日期</span></span><br><span class="line">    <span class="keyword">var</span> futureTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="comment">// 当前日期</span></span><br><span class="line">    <span class="keyword">var</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 距离最终日期的剩余时间</span></span><br><span class="line">    <span class="keyword">var</span> time = <span class="built_in">parseInt</span>((futureTime - currentTime) / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果time&lt;1,关闭定时器</span></span><br><span class="line">    <span class="keyword">if</span> (time &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(t);</span><br><span class="line">                     <span class="keyword">return</span> <span class="string">&#x27;你设置的时间已经过去&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次计算剩余天数、小时数、分钟数、秒钟数</span></span><br><span class="line">    <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(time / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">    <span class="keyword">var</span> hour = <span class="built_in">parseInt</span>(time % (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>) / (<span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">    <span class="keyword">var</span> min = <span class="built_in">parseInt</span>(time % (<span class="number">60</span> * <span class="number">60</span>) / <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">var</span> sec = time % <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;day&#125;</span>天<span class="subst">$&#123;hour&#125;</span>时<span class="subst">$&#123;min&#125;</span>分<span class="subst">$&#123;sec&#125;</span>秒`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置目标日期</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="string">&quot;2023/1/21&quot;</span>;</span><br><span class="line"><span class="comment">// 利用间隔定时器，进行每隔一秒数字变化</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    box.<span class="property">innerHTML</span> = <span class="title function_">countDown</span>(date);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>效果图</strong>：</p><p><img src="/../_resources/%E9%99%A4%E5%A4%95%E5%A4%9C%E5%80%92%E8%AE%A1%E6%97%B6.gif" class="lazyload placeholder" data-srcset="/../_resources/%E9%99%A4%E5%A4%95%E5%A4%9C%E5%80%92%E8%AE%A1%E6%97%B6.gif" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="../_resources/除夕夜倒计时.gif"></p>]]></content>
    
    
    <summary type="html">在JavaScript中，对象是一组无序的相关属性（方法）的集合，所有的事物都是对象，例如：字符串、数组、函数等。</summary>
    
    
    
    <category term="前端" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://fanxing28.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://fanxing28.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
